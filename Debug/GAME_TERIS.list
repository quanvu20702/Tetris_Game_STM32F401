
GAME_TERIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000654  08005b40  08005b40  00015b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006194  08006194  000205ec  2**0
                  CONTENTS
  4 .ARM          00000000  08006194  08006194  000205ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006194  08006194  000205ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006194  08006194  00016194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006198  08006198  00016198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005ec  20000000  0800619c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018ec  200005ec  08006788  000205ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ed8  08006788  00021ed8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205ec  2**0
                  CONTENTS, READONLY
 12 .comment      000000be  00000000  00000000  0002061c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00039305  00000000  00000000  000206da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000330d  00000000  00000000  000599df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e60  00000000  00000000  0005ccf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000e2  00000000  00000000  0005db50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000111f1  00000000  00000000  0005dc32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bd5a  00000000  00000000  0006ee23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000527a9  00000000  00000000  0007ab7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003da0  00000000  00000000  000cd328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000d10c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000b50  00000000  00000000  000d1129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200005ec 	.word	0x200005ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005b28 	.word	0x08005b28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200005f0 	.word	0x200005f0
 80001dc:	08005b28 	.word	0x08005b28

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <initB1ButtonInterrupt>:
 * @func   initB1ButtonInterrupt
 * @brief  Initialize Interrupt for Button B1
 * @param  None
 * @retval None
 */
static void initB1ButtonInterrupt(void){
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef	GPIO_InitStructure;
	EXTI_InitTypeDef	EXTI_InitStructure;
	NVIC_InitTypeDef	NVIC_InitStructure;

	// Enable Clock Port B;
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000286:	2101      	movs	r1, #1
 8000288:	2002      	movs	r0, #2
 800028a:	f001 fcc9 	bl	8001c20 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800028e:	2300      	movs	r3, #0
 8000290:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Pin = BUTTON_UP_B1_PIN;
 8000292:	2320      	movs	r3, #32
 8000294:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000296:	2301      	movs	r3, #1
 8000298:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800029a:	2302      	movs	r3, #2
 800029c:	757b      	strb	r3, [r7, #21]

	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800029e:	f107 0310 	add.w	r3, r7, #16
 80002a2:	4619      	mov	r1, r3
 80002a4:	4814      	ldr	r0, [pc, #80]	; (80002f8 <initB1ButtonInterrupt+0x78>)
 80002a6:	f001 fb6d 	bl	8001984 <GPIO_Init>

	//  Enable Clock Syscfg, Connect EXTI Line 5 to PB5 pin
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80002aa:	2101      	movs	r1, #1
 80002ac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80002b0:	f001 fcd6 	bl	8001c60 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource5);
 80002b4:	2105      	movs	r1, #5
 80002b6:	2001      	movs	r0, #1
 80002b8:	f001 fd12 	bl	8001ce0 <SYSCFG_EXTILineConfig>

	//	Configuration Interrupt
	EXTI_InitStructure.EXTI_Line =  EXTI_Line5;
 80002bc:	2320      	movs	r3, #32
 80002be:	60bb      	str	r3, [r7, #8]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80002c0:	2301      	movs	r3, #1
 80002c2:	73bb      	strb	r3, [r7, #14]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 80002c4:	2300      	movs	r3, #0
 80002c6:	733b      	strb	r3, [r7, #12]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 80002c8:	230c      	movs	r3, #12
 80002ca:	737b      	strb	r3, [r7, #13]
	EXTI_Init(&EXTI_InitStructure);
 80002cc:	f107 0308 	add.w	r3, r7, #8
 80002d0:	4618      	mov	r0, r3
 80002d2:	f001 fabb 	bl	800184c <EXTI_Init>

	// Configuration NVIC
	NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn;
 80002d6:	2317      	movs	r3, #23
 80002d8:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80002da:	2301      	movs	r3, #1
 80002dc:	71fb      	strb	r3, [r7, #7]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80002de:	2300      	movs	r3, #0
 80002e0:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVIC_InitStructure);
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	4618      	mov	r0, r3
 80002ea:	f001 fa4d 	bl	8001788 <NVIC_Init>
}
 80002ee:	bf00      	nop
 80002f0:	3718      	adds	r7, #24
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40020400 	.word	0x40020400

080002fc <initB2ButtonInterrupt>:
 * @func   initB2ButtonInterrupt
 * @brief  Initialize Interrupt for Button B2
 * @param  None
 * @retval None
 */
static void initB2ButtonInterrupt(void) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b086      	sub	sp, #24
 8000300:	af00      	add	r7, sp, #0
    // Enable Clock Port B
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000302:	2101      	movs	r1, #1
 8000304:	2002      	movs	r0, #2
 8000306:	f001 fc8b 	bl	8001c20 <RCC_AHB1PeriphClockCmd>

    // Configure GPIO for Button B2
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800030a:	2300      	movs	r3, #0
 800030c:	753b      	strb	r3, [r7, #20]
    GPIO_InitStructure.GPIO_Pin = BUTTON_LEFT_B2_PIN;
 800030e:	2308      	movs	r3, #8
 8000310:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000312:	2301      	movs	r3, #1
 8000314:	75fb      	strb	r3, [r7, #23]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000316:	2302      	movs	r3, #2
 8000318:	757b      	strb	r3, [r7, #21]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 800031a:	f107 0310 	add.w	r3, r7, #16
 800031e:	4619      	mov	r1, r3
 8000320:	4814      	ldr	r0, [pc, #80]	; (8000374 <initB2ButtonInterrupt+0x78>)
 8000322:	f001 fb2f 	bl	8001984 <GPIO_Init>

    // Enable Clock for Syscfg, Connect EXTI Line 3 to PB3 pin
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8000326:	2101      	movs	r1, #1
 8000328:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800032c:	f001 fc98 	bl	8001c60 <RCC_APB2PeriphClockCmd>
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource3);
 8000330:	2103      	movs	r1, #3
 8000332:	2001      	movs	r0, #1
 8000334:	f001 fcd4 	bl	8001ce0 <SYSCFG_EXTILineConfig>

    // Configure EXTI for Button B2
    EXTI_InitTypeDef EXTI_InitStructure;
    EXTI_InitStructure.EXTI_Line = EXTI_Line3;
 8000338:	2308      	movs	r3, #8
 800033a:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800033c:	2301      	movs	r3, #1
 800033e:	73bb      	strb	r3, [r7, #14]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000340:	2300      	movs	r3, #0
 8000342:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 8000344:	230c      	movs	r3, #12
 8000346:	737b      	strb	r3, [r7, #13]
    EXTI_Init(&EXTI_InitStructure);
 8000348:	f107 0308 	add.w	r3, r7, #8
 800034c:	4618      	mov	r0, r3
 800034e:	f001 fa7d 	bl	800184c <EXTI_Init>

    // Configure NVIC for Button B2
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = EXTI3_IRQn;
 8000352:	2309      	movs	r3, #9
 8000354:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000356:	2301      	movs	r3, #1
 8000358:	71fb      	strb	r3, [r7, #7]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800035a:	2300      	movs	r3, #0
 800035c:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800035e:	2300      	movs	r3, #0
 8000360:	71bb      	strb	r3, [r7, #6]
    NVIC_Init(&NVIC_InitStructure);
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	4618      	mov	r0, r3
 8000366:	f001 fa0f 	bl	8001788 <NVIC_Init>
}
 800036a:	bf00      	nop
 800036c:	3718      	adds	r7, #24
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40020400 	.word	0x40020400

08000378 <initB3ButtonInterrupt>:
 * @func   initB3ButtonInterrupt
 * @brief  Initialize Interrupt for Button B3
 * @param  None
 * @retval None
 */
static void initB3ButtonInterrupt(void) {
 8000378:	b580      	push	{r7, lr}
 800037a:	b086      	sub	sp, #24
 800037c:	af00      	add	r7, sp, #0
    // Enable Clock Port A
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800037e:	2101      	movs	r1, #1
 8000380:	2001      	movs	r0, #1
 8000382:	f001 fc4d 	bl	8001c20 <RCC_AHB1PeriphClockCmd>

    // Configure GPIO for Button B3
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000386:	2300      	movs	r3, #0
 8000388:	753b      	strb	r3, [r7, #20]
    GPIO_InitStructure.GPIO_Pin = BUTTON_PLAY_B3_PIN;
 800038a:	2310      	movs	r3, #16
 800038c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800038e:	2301      	movs	r3, #1
 8000390:	75fb      	strb	r3, [r7, #23]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000392:	2302      	movs	r3, #2
 8000394:	757b      	strb	r3, [r7, #21]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000396:	f107 0310 	add.w	r3, r7, #16
 800039a:	4619      	mov	r1, r3
 800039c:	4814      	ldr	r0, [pc, #80]	; (80003f0 <initB3ButtonInterrupt+0x78>)
 800039e:	f001 faf1 	bl	8001984 <GPIO_Init>

    // Enable Clock for Syscfg, Connect EXTI Line 4 to PA4 pin
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80003a2:	2101      	movs	r1, #1
 80003a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80003a8:	f001 fc5a 	bl	8001c60 <RCC_APB2PeriphClockCmd>
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource4);
 80003ac:	2104      	movs	r1, #4
 80003ae:	2000      	movs	r0, #0
 80003b0:	f001 fc96 	bl	8001ce0 <SYSCFG_EXTILineConfig>

    // Configure EXTI for Button B3
    EXTI_InitTypeDef EXTI_InitStructure;
    EXTI_InitStructure.EXTI_Line = EXTI_Line4;
 80003b4:	2310      	movs	r3, #16
 80003b6:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80003b8:	2301      	movs	r3, #1
 80003ba:	73bb      	strb	r3, [r7, #14]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 80003bc:	2300      	movs	r3, #0
 80003be:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 80003c0:	230c      	movs	r3, #12
 80003c2:	737b      	strb	r3, [r7, #13]
    EXTI_Init(&EXTI_InitStructure);
 80003c4:	f107 0308 	add.w	r3, r7, #8
 80003c8:	4618      	mov	r0, r3
 80003ca:	f001 fa3f 	bl	800184c <EXTI_Init>

    // Configure NVIC for Button B3
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = EXTI4_IRQn;
 80003ce:	230a      	movs	r3, #10
 80003d0:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80003d2:	2301      	movs	r3, #1
 80003d4:	71fb      	strb	r3, [r7, #7]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80003d6:	2300      	movs	r3, #0
 80003d8:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80003da:	2300      	movs	r3, #0
 80003dc:	71bb      	strb	r3, [r7, #6]
    NVIC_Init(&NVIC_InitStructure);
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	4618      	mov	r0, r3
 80003e2:	f001 f9d1 	bl	8001788 <NVIC_Init>
}
 80003e6:	bf00      	nop
 80003e8:	3718      	adds	r7, #24
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40020000 	.word	0x40020000

080003f4 <initB4ButtonInterrupt>:
 * @func   initB4ButtonInterrupt
 * @brief  Initialize Interrupt for Button B4
 * @param  None
 * @retval None
 */
static void initB4ButtonInterrupt(void) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b086      	sub	sp, #24
 80003f8:	af00      	add	r7, sp, #0
    // Enable Clock Port B
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80003fa:	2101      	movs	r1, #1
 80003fc:	2002      	movs	r0, #2
 80003fe:	f001 fc0f 	bl	8001c20 <RCC_AHB1PeriphClockCmd>

    // Configure GPIO for Button B4
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000402:	2300      	movs	r3, #0
 8000404:	753b      	strb	r3, [r7, #20]
    GPIO_InitStructure.GPIO_Pin = BUTTON_RIGHT_B4_PIN;
 8000406:	2301      	movs	r3, #1
 8000408:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800040a:	2301      	movs	r3, #1
 800040c:	75fb      	strb	r3, [r7, #23]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800040e:	2302      	movs	r3, #2
 8000410:	757b      	strb	r3, [r7, #21]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000412:	f107 0310 	add.w	r3, r7, #16
 8000416:	4619      	mov	r1, r3
 8000418:	4814      	ldr	r0, [pc, #80]	; (800046c <initB4ButtonInterrupt+0x78>)
 800041a:	f001 fab3 	bl	8001984 <GPIO_Init>

    // Enable Clock for Syscfg, Connect EXTI Line 0 to PB0 pin
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800041e:	2101      	movs	r1, #1
 8000420:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000424:	f001 fc1c 	bl	8001c60 <RCC_APB2PeriphClockCmd>
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource0);
 8000428:	2100      	movs	r1, #0
 800042a:	2001      	movs	r0, #1
 800042c:	f001 fc58 	bl	8001ce0 <SYSCFG_EXTILineConfig>

    // Configure EXTI for Button B4
    EXTI_InitTypeDef EXTI_InitStructure;
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
 8000430:	2301      	movs	r3, #1
 8000432:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000434:	2301      	movs	r3, #1
 8000436:	73bb      	strb	r3, [r7, #14]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000438:	2300      	movs	r3, #0
 800043a:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 800043c:	230c      	movs	r3, #12
 800043e:	737b      	strb	r3, [r7, #13]
    EXTI_Init(&EXTI_InitStructure);
 8000440:	f107 0308 	add.w	r3, r7, #8
 8000444:	4618      	mov	r0, r3
 8000446:	f001 fa01 	bl	800184c <EXTI_Init>

    // Configure NVIC for Button B4
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
 800044a:	2306      	movs	r3, #6
 800044c:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800044e:	2301      	movs	r3, #1
 8000450:	71fb      	strb	r3, [r7, #7]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000452:	2300      	movs	r3, #0
 8000454:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000456:	2300      	movs	r3, #0
 8000458:	71bb      	strb	r3, [r7, #6]
    NVIC_Init(&NVIC_InitStructure);
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	4618      	mov	r0, r3
 800045e:	f001 f993 	bl	8001788 <NVIC_Init>
}
 8000462:	bf00      	nop
 8000464:	3718      	adds	r7, #24
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	40020400 	.word	0x40020400

08000470 <delayMs>:
 * @func   delayMs
 * @brief  Delay for a specified number of milliseconds.
 * @param  milliseconds: The duration of the delay in milliseconds
 * @retval None
 */
void delayMs(uint32_t milliseconds) {
 8000470:	b480      	push	{r7}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
    // Calculate the number of cycles needed for the delay
    uint32_t cycles = (50000000 / 1000) * milliseconds;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800047e:	fb02 f303 	mul.w	r3, r2, r3
 8000482:	60bb      	str	r3, [r7, #8]

    // Simple loop-based delay
    for (uint32_t i = 0; i < cycles; i++) {
 8000484:	2300      	movs	r3, #0
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	e002      	b.n	8000490 <delayMs+0x20>
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	3301      	adds	r3, #1
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	68fa      	ldr	r2, [r7, #12]
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	429a      	cmp	r2, r3
 8000496:	d3f8      	bcc.n	800048a <delayMs+0x1a>
        // Do nothing
    }
}
 8000498:	bf00      	nop
 800049a:	bf00      	nop
 800049c:	3714      	adds	r7, #20
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
	...

080004a8 <loadConfiguration>:
 * @func   loadConfiguration
 * @brief  Initializes the configuration for the Tetris game.
 * @param  None
 * @retval None
 */
void loadConfiguration(void) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af02      	add	r7, sp, #8
	ucg_DrawFrame(&ucg, 0, 0, 62, 122);					// Draw a frame for the game area
 80004ae:	237a      	movs	r3, #122	; 0x7a
 80004b0:	9300      	str	r3, [sp, #0]
 80004b2:	233e      	movs	r3, #62	; 0x3e
 80004b4:	2200      	movs	r2, #0
 80004b6:	2100      	movs	r1, #0
 80004b8:	480a      	ldr	r0, [pc, #40]	; (80004e4 <loadConfiguration+0x3c>)
 80004ba:	f002 f928 	bl	800270e <ucg_DrawFrame>
	ucg_DrawString(&ucg, 65, 15, 0, "Teris Game");		// Display the Tetris Game title
 80004be:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <loadConfiguration+0x40>)
 80004c0:	9300      	str	r3, [sp, #0]
 80004c2:	2300      	movs	r3, #0
 80004c4:	220f      	movs	r2, #15
 80004c6:	2141      	movs	r1, #65	; 0x41
 80004c8:	4806      	ldr	r0, [pc, #24]	; (80004e4 <loadConfiguration+0x3c>)
 80004ca:	f003 f99b 	bl	8003804 <ucg_DrawString>
	ucg_DrawString(&ucg, 65, 50, 0, "Score: ");			// Display the initial score
 80004ce:	4b07      	ldr	r3, [pc, #28]	; (80004ec <loadConfiguration+0x44>)
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	2300      	movs	r3, #0
 80004d4:	2232      	movs	r2, #50	; 0x32
 80004d6:	2141      	movs	r1, #65	; 0x41
 80004d8:	4802      	ldr	r0, [pc, #8]	; (80004e4 <loadConfiguration+0x3c>)
 80004da:	f003 f993 	bl	8003804 <ucg_DrawString>
}
 80004de:	bf00      	nop
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	20000608 	.word	0x20000608
 80004e8:	08005b40 	.word	0x08005b40
 80004ec:	08005b4c 	.word	0x08005b4c

080004f0 <chooseBlock>:
 * @func   chooseBlock
 * @brief  Random Block Selection
 * @param  None
 * @retval None
 */
void chooseBlock(void) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
    // Generate a random index for the block type
    int randomBlockIndex = LightSensor_MeasureUseDMAMode() % 19;
 80004f6:	f001 fefd 	bl	80022f4 <LightSensor_MeasureUseDMAMode>
 80004fa:	4603      	mov	r3, r0
 80004fc:	461a      	mov	r2, r3
 80004fe:	4b10      	ldr	r3, [pc, #64]	; (8000540 <chooseBlock+0x50>)
 8000500:	fba3 1302 	umull	r1, r3, r3, r2
 8000504:	1ad1      	subs	r1, r2, r3
 8000506:	0849      	lsrs	r1, r1, #1
 8000508:	440b      	add	r3, r1
 800050a:	0919      	lsrs	r1, r3, #4
 800050c:	460b      	mov	r3, r1
 800050e:	00db      	lsls	r3, r3, #3
 8000510:	440b      	add	r3, r1
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	440b      	add	r3, r1
 8000516:	1ad3      	subs	r3, r2, r3
 8000518:	b29b      	uxth	r3, r3
 800051a:	607b      	str	r3, [r7, #4]
    // Point to the selected random block type
    int (*randomBlock)[4] = blockTypes[randomBlockIndex];
 800051c:	4a09      	ldr	r2, [pc, #36]	; (8000544 <chooseBlock+0x54>)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000524:	603b      	str	r3, [r7, #0]
    blockIndex = randomBlockIndex;
 8000526:	4a08      	ldr	r2, [pc, #32]	; (8000548 <chooseBlock+0x58>)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	6013      	str	r3, [r2, #0]
	// Copy the selected block to the nextBlock array
    memcpy(nextBlock, randomBlock, sizeof(nextBlock));
 800052c:	2240      	movs	r2, #64	; 0x40
 800052e:	6839      	ldr	r1, [r7, #0]
 8000530:	4806      	ldr	r0, [pc, #24]	; (800054c <chooseBlock+0x5c>)
 8000532:	f004 fea9 	bl	8005288 <memcpy>
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	af286bcb 	.word	0xaf286bcb
 8000544:	200004e0 	.word	0x200004e0
 8000548:	20000bcc 	.word	0x20000bcc
 800054c:	20000b8c 	.word	0x20000b8c

08000550 <initializeCurrentBlock>:
 * @func   initializeCurrentBlock
 * @brief  Initializes the current block by choosing a new block.
 * @param  None
 * @retval None
 */
void initializeCurrentBlock(void) {
 8000550:	b5b0      	push	{r4, r5, r7, lr}
 8000552:	af00      	add	r7, sp, #0
	chooseBlock();
 8000554:	f7ff ffcc 	bl	80004f0 <chooseBlock>
	// Copy values from nextBlock to currentBlock
    memcpy(currentBlock, nextBlock, sizeof(currentBlock));
 8000558:	4a07      	ldr	r2, [pc, #28]	; (8000578 <initializeCurrentBlock+0x28>)
 800055a:	4b08      	ldr	r3, [pc, #32]	; (800057c <initializeCurrentBlock+0x2c>)
 800055c:	4614      	mov	r4, r2
 800055e:	461d      	mov	r5, r3
 8000560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000570:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000574:	bf00      	nop
 8000576:	bdb0      	pop	{r4, r5, r7, pc}
 8000578:	20000b4c 	.word	0x20000b4c
 800057c:	20000b8c 	.word	0x20000b8c

08000580 <drawBlockOnScreen>:
  * @param  x: X-coordinate of the block's top-left corner
 *         	y: Y-coordinate of the block's top-left corner
 *         	block: 2D array representing the block to be drawn
 * @retval None
 */
void drawBlockOnScreen(int x, int y,  int block[4][4]) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	; 0x28
 8000584:	af02      	add	r7, sp, #8
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
	ucg_SetColor(&ucg, 0, 0, 255, 255);
 800058c:	23ff      	movs	r3, #255	; 0xff
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	23ff      	movs	r3, #255	; 0xff
 8000592:	2200      	movs	r2, #0
 8000594:	2100      	movs	r1, #0
 8000596:	4821      	ldr	r0, [pc, #132]	; (800061c <drawBlockOnScreen+0x9c>)
 8000598:	f003 faf6 	bl	8003b88 <ucg_SetColor>
    // Iterate through the block and draw filled boxes on the screen where the block is present
	for(int i = 0; i < 4; i++){
 800059c:	2300      	movs	r3, #0
 800059e:	61fb      	str	r3, [r7, #28]
 80005a0:	e034      	b.n	800060c <drawBlockOnScreen+0x8c>
		for(int j = 0; j < 4; j++) {
 80005a2:	2300      	movs	r3, #0
 80005a4:	61bb      	str	r3, [r7, #24]
 80005a6:	e02b      	b.n	8000600 <drawBlockOnScreen+0x80>
			if(block[i][j] == 1) {
 80005a8:	69fb      	ldr	r3, [r7, #28]
 80005aa:	011b      	lsls	r3, r3, #4
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	4413      	add	r3, r2
 80005b0:	69ba      	ldr	r2, [r7, #24]
 80005b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d11f      	bne.n	80005fa <drawBlockOnScreen+0x7a>
				int px = x + j*size+1;
 80005ba:	4b19      	ldr	r3, [pc, #100]	; (8000620 <drawBlockOnScreen+0xa0>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	69ba      	ldr	r2, [r7, #24]
 80005c0:	fb03 f202 	mul.w	r2, r3, r2
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	4413      	add	r3, r2
 80005c8:	3301      	adds	r3, #1
 80005ca:	617b      	str	r3, [r7, #20]
				int py = y + i*size;
 80005cc:	4b14      	ldr	r3, [pc, #80]	; (8000620 <drawBlockOnScreen+0xa0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	69fa      	ldr	r2, [r7, #28]
 80005d2:	fb02 f303 	mul.w	r3, r2, r3
 80005d6:	68ba      	ldr	r2, [r7, #8]
 80005d8:	4413      	add	r3, r2
 80005da:	613b      	str	r3, [r7, #16]
				ucg_DrawBox(&ucg, px, py, size, size);
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	b219      	sxth	r1, r3
 80005e0:	693b      	ldr	r3, [r7, #16]
 80005e2:	b21a      	sxth	r2, r3
 80005e4:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <drawBlockOnScreen+0xa0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	b218      	sxth	r0, r3
 80005ea:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <drawBlockOnScreen+0xa0>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	b21b      	sxth	r3, r3
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	4603      	mov	r3, r0
 80005f4:	4809      	ldr	r0, [pc, #36]	; (800061c <drawBlockOnScreen+0x9c>)
 80005f6:	f002 f837 	bl	8002668 <ucg_DrawBox>
		for(int j = 0; j < 4; j++) {
 80005fa:	69bb      	ldr	r3, [r7, #24]
 80005fc:	3301      	adds	r3, #1
 80005fe:	61bb      	str	r3, [r7, #24]
 8000600:	69bb      	ldr	r3, [r7, #24]
 8000602:	2b03      	cmp	r3, #3
 8000604:	ddd0      	ble.n	80005a8 <drawBlockOnScreen+0x28>
	for(int i = 0; i < 4; i++){
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	3301      	adds	r3, #1
 800060a:	61fb      	str	r3, [r7, #28]
 800060c:	69fb      	ldr	r3, [r7, #28]
 800060e:	2b03      	cmp	r3, #3
 8000610:	ddc7      	ble.n	80005a2 <drawBlockOnScreen+0x22>
			}
		}
	}
}
 8000612:	bf00      	nop
 8000614:	bf00      	nop
 8000616:	3720      	adds	r7, #32
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000608 	.word	0x20000608
 8000620:	2000000c 	.word	0x2000000c

08000624 <eraseBlockOnScreen>:
 * @param  x: X-coordinate of the block's top-left corner
 *         y: Y-coordinate of the block's top-left corner
 *         block: 2D array representing the block to be erased
 * @retval None
 */
void eraseBlockOnScreen(int x, int y, int block[4][4]) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	; 0x28
 8000628:	af02      	add	r7, sp, #8
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	607a      	str	r2, [r7, #4]
	ucg_SetColor(&ucg, 0, 0, 0, 0);
 8000630:	2300      	movs	r3, #0
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2300      	movs	r3, #0
 8000636:	2200      	movs	r2, #0
 8000638:	2100      	movs	r1, #0
 800063a:	4821      	ldr	r0, [pc, #132]	; (80006c0 <eraseBlockOnScreen+0x9c>)
 800063c:	f003 faa4 	bl	8003b88 <ucg_SetColor>
    // Iterate through the block and draw filled boxes with the background color to erase the block
	for(int i = 0; i < 4; i++){
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]
 8000644:	e034      	b.n	80006b0 <eraseBlockOnScreen+0x8c>
		for(int j = 0; j < 4; j++) {
 8000646:	2300      	movs	r3, #0
 8000648:	61bb      	str	r3, [r7, #24]
 800064a:	e02b      	b.n	80006a4 <eraseBlockOnScreen+0x80>
			if(block[i][j] == 1) {
 800064c:	69fb      	ldr	r3, [r7, #28]
 800064e:	011b      	lsls	r3, r3, #4
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	4413      	add	r3, r2
 8000654:	69ba      	ldr	r2, [r7, #24]
 8000656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d11f      	bne.n	800069e <eraseBlockOnScreen+0x7a>
				int px = x + j*size+1;
 800065e:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <eraseBlockOnScreen+0xa0>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	69ba      	ldr	r2, [r7, #24]
 8000664:	fb03 f202 	mul.w	r2, r3, r2
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	4413      	add	r3, r2
 800066c:	3301      	adds	r3, #1
 800066e:	617b      	str	r3, [r7, #20]
				int py = y + i*size;
 8000670:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <eraseBlockOnScreen+0xa0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	69fa      	ldr	r2, [r7, #28]
 8000676:	fb02 f303 	mul.w	r3, r2, r3
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	4413      	add	r3, r2
 800067e:	613b      	str	r3, [r7, #16]
				ucg_DrawBox(&ucg, px, py, size, size);
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	b219      	sxth	r1, r3
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	b21a      	sxth	r2, r3
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <eraseBlockOnScreen+0xa0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	b218      	sxth	r0, r3
 800068e:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <eraseBlockOnScreen+0xa0>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	b21b      	sxth	r3, r3
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	4603      	mov	r3, r0
 8000698:	4809      	ldr	r0, [pc, #36]	; (80006c0 <eraseBlockOnScreen+0x9c>)
 800069a:	f001 ffe5 	bl	8002668 <ucg_DrawBox>
		for(int j = 0; j < 4; j++) {
 800069e:	69bb      	ldr	r3, [r7, #24]
 80006a0:	3301      	adds	r3, #1
 80006a2:	61bb      	str	r3, [r7, #24]
 80006a4:	69bb      	ldr	r3, [r7, #24]
 80006a6:	2b03      	cmp	r3, #3
 80006a8:	ddd0      	ble.n	800064c <eraseBlockOnScreen+0x28>
	for(int i = 0; i < 4; i++){
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	3301      	adds	r3, #1
 80006ae:	61fb      	str	r3, [r7, #28]
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	2b03      	cmp	r3, #3
 80006b4:	ddc7      	ble.n	8000646 <eraseBlockOnScreen+0x22>
			}
		}
	}
}
 80006b6:	bf00      	nop
 80006b8:	bf00      	nop
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000608 	.word	0x20000608
 80006c4:	2000000c 	.word	0x2000000c

080006c8 <checkForCollisions>:
 * @param  x: X-coordinate of the block's top-left corner
 *         y: Y-coordinate of the block's top-left corner
 *         block: 2D array representing the block
 * @retval 1 if there is a collision, 0 otherwise
 */
int checkForCollisions(int x, int y, int block[4][4]) {
 80006c8:	b480      	push	{r7}
 80006ca:	b089      	sub	sp, #36	; 0x24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < 4; i++) {
 80006d4:	2300      	movs	r3, #0
 80006d6:	61fb      	str	r3, [r7, #28]
 80006d8:	e04a      	b.n	8000770 <checkForCollisions+0xa8>
		for(int j = 0; j < 4; j++) {
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
 80006de:	e041      	b.n	8000764 <checkForCollisions+0x9c>
			if(block[i][j] == 1){
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	011b      	lsls	r3, r3, #4
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	4413      	add	r3, r2
 80006e8:	69ba      	ldr	r2, [r7, #24]
 80006ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d135      	bne.n	800075e <checkForCollisions+0x96>
				int px = x + j*size;
 80006f2:	4b24      	ldr	r3, [pc, #144]	; (8000784 <checkForCollisions+0xbc>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	69ba      	ldr	r2, [r7, #24]
 80006f8:	fb02 f303 	mul.w	r3, r2, r3
 80006fc:	68fa      	ldr	r2, [r7, #12]
 80006fe:	4413      	add	r3, r2
 8000700:	617b      	str	r3, [r7, #20]
				int py = y + i*size;
 8000702:	4b20      	ldr	r3, [pc, #128]	; (8000784 <checkForCollisions+0xbc>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	69fa      	ldr	r2, [r7, #28]
 8000708:	fb02 f303 	mul.w	r3, r2, r3
 800070c:	68ba      	ldr	r2, [r7, #8]
 800070e:	4413      	add	r3, r2
 8000710:	613b      	str	r3, [r7, #16]
				// Check for collision with screen boundaries
                if (py >= SCREEN_HEIGHT * size) return 1;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <checkForCollisions+0xbc>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	4613      	mov	r3, r2
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	4413      	add	r3, r2
 800071c:	00db      	lsls	r3, r3, #3
 800071e:	461a      	mov	r2, r3
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	4293      	cmp	r3, r2
 8000724:	db01      	blt.n	800072a <checkForCollisions+0x62>
 8000726:	2301      	movs	r3, #1
 8000728:	e026      	b.n	8000778 <checkForCollisions+0xb0>

                // Check for collision with existing elements on the screen
                if (screen[py / 5][px / 5] == 1) return 1;
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	4a16      	ldr	r2, [pc, #88]	; (8000788 <checkForCollisions+0xc0>)
 800072e:	fb82 1203 	smull	r1, r2, r2, r3
 8000732:	1052      	asrs	r2, r2, #1
 8000734:	17db      	asrs	r3, r3, #31
 8000736:	1ad2      	subs	r2, r2, r3
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	4913      	ldr	r1, [pc, #76]	; (8000788 <checkForCollisions+0xc0>)
 800073c:	fb81 0103 	smull	r0, r1, r1, r3
 8000740:	1049      	asrs	r1, r1, #1
 8000742:	17db      	asrs	r3, r3, #31
 8000744:	1ac9      	subs	r1, r1, r3
 8000746:	4811      	ldr	r0, [pc, #68]	; (800078c <checkForCollisions+0xc4>)
 8000748:	4613      	mov	r3, r2
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	4413      	add	r3, r2
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	440b      	add	r3, r1
 8000752:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d101      	bne.n	800075e <checkForCollisions+0x96>
 800075a:	2301      	movs	r3, #1
 800075c:	e00c      	b.n	8000778 <checkForCollisions+0xb0>
		for(int j = 0; j < 4; j++) {
 800075e:	69bb      	ldr	r3, [r7, #24]
 8000760:	3301      	adds	r3, #1
 8000762:	61bb      	str	r3, [r7, #24]
 8000764:	69bb      	ldr	r3, [r7, #24]
 8000766:	2b03      	cmp	r3, #3
 8000768:	ddba      	ble.n	80006e0 <checkForCollisions+0x18>
	for(int i = 0; i < 4; i++) {
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	3301      	adds	r3, #1
 800076e:	61fb      	str	r3, [r7, #28]
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	2b03      	cmp	r3, #3
 8000774:	ddb1      	ble.n	80006da <checkForCollisions+0x12>
			}
		}
	}
	return 0; // No collision
 8000776:	2300      	movs	r3, #0
}
 8000778:	4618      	mov	r0, r3
 800077a:	3724      	adds	r7, #36	; 0x24
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	2000000c 	.word	0x2000000c
 8000788:	66666667 	.word	0x66666667
 800078c:	200006c0 	.word	0x200006c0

08000790 <fixBlockOnScreen>:
 * @param  x: X-coordinate of the block's top-left corner
 *         y: Y-coordinate of the block's top-left corner
 *         block: 2D array representing the block
 * @retval None
 */
void fixBlockOnScreen(int x, int y, int block[4][4]) {
 8000790:	b480      	push	{r7}
 8000792:	b089      	sub	sp, #36	; 0x24
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
    // Iterate through the block and update the screen array to fix the block
	for(int i = 0; i < 4; i++) {
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
 80007a0:	e03b      	b.n	800081a <fixBlockOnScreen+0x8a>
		for(int j = 0; j < 4; j++) {
 80007a2:	2300      	movs	r3, #0
 80007a4:	61bb      	str	r3, [r7, #24]
 80007a6:	e032      	b.n	800080e <fixBlockOnScreen+0x7e>
			if(block[i][j] == 1){
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	011b      	lsls	r3, r3, #4
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	4413      	add	r3, r2
 80007b0:	69ba      	ldr	r2, [r7, #24]
 80007b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d126      	bne.n	8000808 <fixBlockOnScreen+0x78>
				int px = x + j*size;
 80007ba:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <fixBlockOnScreen+0xa0>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	69ba      	ldr	r2, [r7, #24]
 80007c0:	fb02 f303 	mul.w	r3, r2, r3
 80007c4:	68fa      	ldr	r2, [r7, #12]
 80007c6:	4413      	add	r3, r2
 80007c8:	617b      	str	r3, [r7, #20]
				int py = y + i*size;
 80007ca:	4b19      	ldr	r3, [pc, #100]	; (8000830 <fixBlockOnScreen+0xa0>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	69fa      	ldr	r2, [r7, #28]
 80007d0:	fb02 f303 	mul.w	r3, r2, r3
 80007d4:	68ba      	ldr	r2, [r7, #8]
 80007d6:	4413      	add	r3, r2
 80007d8:	613b      	str	r3, [r7, #16]
				screen[py/5][px/5] = 1;
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	4a15      	ldr	r2, [pc, #84]	; (8000834 <fixBlockOnScreen+0xa4>)
 80007de:	fb82 1203 	smull	r1, r2, r2, r3
 80007e2:	1052      	asrs	r2, r2, #1
 80007e4:	17db      	asrs	r3, r3, #31
 80007e6:	1ad2      	subs	r2, r2, r3
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	4912      	ldr	r1, [pc, #72]	; (8000834 <fixBlockOnScreen+0xa4>)
 80007ec:	fb81 0103 	smull	r0, r1, r1, r3
 80007f0:	1049      	asrs	r1, r1, #1
 80007f2:	17db      	asrs	r3, r3, #31
 80007f4:	1ac9      	subs	r1, r1, r3
 80007f6:	4810      	ldr	r0, [pc, #64]	; (8000838 <fixBlockOnScreen+0xa8>)
 80007f8:	4613      	mov	r3, r2
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	4413      	add	r3, r2
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	440b      	add	r3, r1
 8000802:	2201      	movs	r2, #1
 8000804:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for(int j = 0; j < 4; j++) {
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	3301      	adds	r3, #1
 800080c:	61bb      	str	r3, [r7, #24]
 800080e:	69bb      	ldr	r3, [r7, #24]
 8000810:	2b03      	cmp	r3, #3
 8000812:	ddc9      	ble.n	80007a8 <fixBlockOnScreen+0x18>
	for(int i = 0; i < 4; i++) {
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	3301      	adds	r3, #1
 8000818:	61fb      	str	r3, [r7, #28]
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	2b03      	cmp	r3, #3
 800081e:	ddc0      	ble.n	80007a2 <fixBlockOnScreen+0x12>
			}
		}
	}
}
 8000820:	bf00      	nop
 8000822:	bf00      	nop
 8000824:	3724      	adds	r7, #36	; 0x24
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	2000000c 	.word	0x2000000c
 8000834:	66666667 	.word	0x66666667
 8000838:	200006c0 	.word	0x200006c0

0800083c <updateScore>:
 * @func   updateScore
 * @brief  Update the displayed score on the graphical screen.
 * @param  None
 * @retval None
 */
void updateScore(){
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af02      	add	r7, sp, #8
	ucg_SetColor(&ucg, 0, 255, 0, 0);
 8000842:	2300      	movs	r3, #0
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2300      	movs	r3, #0
 8000848:	22ff      	movs	r2, #255	; 0xff
 800084a:	2100      	movs	r1, #0
 800084c:	480c      	ldr	r0, [pc, #48]	; (8000880 <updateScore+0x44>)
 800084e:	f003 f99b 	bl	8003b88 <ucg_SetColor>
	memset(str1,0,sizeof(str1));
 8000852:	220a      	movs	r2, #10
 8000854:	2100      	movs	r1, #0
 8000856:	480b      	ldr	r0, [pc, #44]	; (8000884 <updateScore+0x48>)
 8000858:	f004 fce2 	bl	8005220 <memset>
	sprintf(str1,"Score: %d",score);
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <updateScore+0x4c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	461a      	mov	r2, r3
 8000862:	490a      	ldr	r1, [pc, #40]	; (800088c <updateScore+0x50>)
 8000864:	4807      	ldr	r0, [pc, #28]	; (8000884 <updateScore+0x48>)
 8000866:	f004 fcbb 	bl	80051e0 <siprintf>
	ucg_DrawString(&ucg, 65, 48, 0, str1);
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <updateScore+0x48>)
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	2300      	movs	r3, #0
 8000870:	2230      	movs	r2, #48	; 0x30
 8000872:	2141      	movs	r1, #65	; 0x41
 8000874:	4802      	ldr	r0, [pc, #8]	; (8000880 <updateScore+0x44>)
 8000876:	f002 ffc5 	bl	8003804 <ucg_DrawString>
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000608 	.word	0x20000608
 8000884:	20000b40 	.word	0x20000b40
 8000888:	20000bd0 	.word	0x20000bd0
 800088c:	08005b54 	.word	0x08005b54

08000890 <handleFullRows>:
 * @func   handleFullRows
 * @brief  Handle full rows in the game screen by updating the score and adjusting the screen.
 * @param  None
 * @retval None
 */
void handleFullRows(){
 8000890:	b580      	push	{r7, lr}
 8000892:	b090      	sub	sp, #64	; 0x40
 8000894:	af02      	add	r7, sp, #8
	ucg_SetColor(&ucg, 0, 0, 0, 0);
 8000896:	2300      	movs	r3, #0
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	2300      	movs	r3, #0
 800089c:	2200      	movs	r2, #0
 800089e:	2100      	movs	r1, #0
 80008a0:	4891      	ldr	r0, [pc, #580]	; (8000ae8 <handleFullRows+0x258>)
 80008a2:	f003 f971 	bl	8003b88 <ucg_SetColor>
    // Iterate through the screen to find full rows and update the score
	for(int i = 0; i < SCREEN_HEIGHT; i++){
 80008a6:	2300      	movs	r3, #0
 80008a8:	637b      	str	r3, [r7, #52]	; 0x34
 80008aa:	e114      	b.n	8000ad6 <handleFullRows+0x246>
		for(int j = 0; j < SCREEN_WIDTH; j++){
 80008ac:	2300      	movs	r3, #0
 80008ae:	633b      	str	r3, [r7, #48]	; 0x30
 80008b0:	e10a      	b.n	8000ac8 <handleFullRows+0x238>
			if(screen[i][j] == 1){
 80008b2:	498e      	ldr	r1, [pc, #568]	; (8000aec <handleFullRows+0x25c>)
 80008b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008b6:	4613      	mov	r3, r2
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	4413      	add	r3, r2
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80008c0:	4413      	add	r3, r2
 80008c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	f040 80f7 	bne.w	8000aba <handleFullRows+0x22a>
				checkRow++;
 80008cc:	4b88      	ldr	r3, [pc, #544]	; (8000af0 <handleFullRows+0x260>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	3301      	adds	r3, #1
 80008d2:	4a87      	ldr	r2, [pc, #540]	; (8000af0 <handleFullRows+0x260>)
 80008d4:	6013      	str	r3, [r2, #0]

				if(checkRow == SCREEN_WIDTH){
 80008d6:	4b86      	ldr	r3, [pc, #536]	; (8000af0 <handleFullRows+0x260>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2b0c      	cmp	r3, #12
 80008dc:	f040 80f1 	bne.w	8000ac2 <handleFullRows+0x232>
					if (timeRepeat > 0){
 80008e0:	4b84      	ldr	r3, [pc, #528]	; (8000af4 <handleFullRows+0x264>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d004      	beq.n	80008f2 <handleFullRows+0x62>
						timeRepeat -= 20;
 80008e8:	4b82      	ldr	r3, [pc, #520]	; (8000af4 <handleFullRows+0x264>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	3b14      	subs	r3, #20
 80008ee:	4a81      	ldr	r2, [pc, #516]	; (8000af4 <handleFullRows+0x264>)
 80008f0:	6013      	str	r3, [r2, #0]
					}
					// Update score
					score+=5;
 80008f2:	4b81      	ldr	r3, [pc, #516]	; (8000af8 <handleFullRows+0x268>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	3305      	adds	r3, #5
 80008f8:	4a7f      	ldr	r2, [pc, #508]	; (8000af8 <handleFullRows+0x268>)
 80008fa:	6013      	str	r3, [r2, #0]
					// Erase the full row
					ucg_SetColor(&ucg, 0, 0, 0, 0);
 80008fc:	2300      	movs	r3, #0
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	2300      	movs	r3, #0
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	4878      	ldr	r0, [pc, #480]	; (8000ae8 <handleFullRows+0x258>)
 8000908:	f003 f93e 	bl	8003b88 <ucg_SetColor>
					ucg_DrawBox(&ucg,1,i*5+1,SCREEN_WIDTH*5,5);
 800090c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800090e:	b29b      	uxth	r3, r3
 8000910:	461a      	mov	r2, r3
 8000912:	0092      	lsls	r2, r2, #2
 8000914:	4413      	add	r3, r2
 8000916:	b29b      	uxth	r3, r3
 8000918:	3301      	adds	r3, #1
 800091a:	b29b      	uxth	r3, r3
 800091c:	b21a      	sxth	r2, r3
 800091e:	2305      	movs	r3, #5
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	233c      	movs	r3, #60	; 0x3c
 8000924:	2101      	movs	r1, #1
 8000926:	4870      	ldr	r0, [pc, #448]	; (8000ae8 <handleFullRows+0x258>)
 8000928:	f001 fe9e 	bl	8002668 <ucg_DrawBox>
					// Clear the full row in the screen array
					for(int k = 0; k<SCREEN_WIDTH; k++){
 800092c:	2300      	movs	r3, #0
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000930:	e00d      	b.n	800094e <handleFullRows+0xbe>
						screen[i][k] = 0;
 8000932:	496e      	ldr	r1, [pc, #440]	; (8000aec <handleFullRows+0x25c>)
 8000934:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000936:	4613      	mov	r3, r2
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	4413      	add	r3, r2
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000940:	4413      	add	r3, r2
 8000942:	2200      	movs	r2, #0
 8000944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					for(int k = 0; k<SCREEN_WIDTH; k++){
 8000948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800094a:	3301      	adds	r3, #1
 800094c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800094e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000950:	2b0b      	cmp	r3, #11
 8000952:	ddee      	ble.n	8000932 <handleFullRows+0xa2>
					}

					// Shift blocks above the cleared row down
					ucg_SetColor(&ucg, 0, 0, 0, 0);
 8000954:	2300      	movs	r3, #0
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2300      	movs	r3, #0
 800095a:	2200      	movs	r2, #0
 800095c:	2100      	movs	r1, #0
 800095e:	4862      	ldr	r0, [pc, #392]	; (8000ae8 <handleFullRows+0x258>)
 8000960:	f003 f912 	bl	8003b88 <ucg_SetColor>
					for(int ii = 4; ii <= i; ii++){
 8000964:	2304      	movs	r3, #4
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
 8000968:	e034      	b.n	80009d4 <handleFullRows+0x144>
						for(int jj = 0; jj < SCREEN_WIDTH; jj++) {
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
 800096e:	e02b      	b.n	80009c8 <handleFullRows+0x138>
							if(screen[ii][jj] == 1) {
 8000970:	495e      	ldr	r1, [pc, #376]	; (8000aec <handleFullRows+0x25c>)
 8000972:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000974:	4613      	mov	r3, r2
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	4413      	add	r3, r2
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800097e:	4413      	add	r3, r2
 8000980:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d11c      	bne.n	80009c2 <handleFullRows+0x132>
								int px =  jj*size+1;
 8000988:	4b5c      	ldr	r3, [pc, #368]	; (8000afc <handleFullRows+0x26c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800098e:	fb02 f303 	mul.w	r3, r2, r3
 8000992:	3301      	adds	r3, #1
 8000994:	60bb      	str	r3, [r7, #8]
								int py =  ii*size+1;
 8000996:	4b59      	ldr	r3, [pc, #356]	; (8000afc <handleFullRows+0x26c>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800099c:	fb02 f303 	mul.w	r3, r2, r3
 80009a0:	3301      	adds	r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
								ucg_DrawBox(&ucg, px, py, size, size);
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	b219      	sxth	r1, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	b21a      	sxth	r2, r3
 80009ac:	4b53      	ldr	r3, [pc, #332]	; (8000afc <handleFullRows+0x26c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	b218      	sxth	r0, r3
 80009b2:	4b52      	ldr	r3, [pc, #328]	; (8000afc <handleFullRows+0x26c>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	b21b      	sxth	r3, r3
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	4603      	mov	r3, r0
 80009bc:	484a      	ldr	r0, [pc, #296]	; (8000ae8 <handleFullRows+0x258>)
 80009be:	f001 fe53 	bl	8002668 <ucg_DrawBox>
						for(int jj = 0; jj < SCREEN_WIDTH; jj++) {
 80009c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c4:	3301      	adds	r3, #1
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
 80009c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ca:	2b0b      	cmp	r3, #11
 80009cc:	ddd0      	ble.n	8000970 <handleFullRows+0xe0>
					for(int ii = 4; ii <= i; ii++){
 80009ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d0:	3301      	adds	r3, #1
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80009d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009d8:	429a      	cmp	r2, r3
 80009da:	ddc6      	ble.n	800096a <handleFullRows+0xda>
							}
						}
					}

					// Update the screen array by shifting blocks down
					for(int new_height = i; new_height >= 5; new_height--){
 80009dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009de:	623b      	str	r3, [r7, #32]
 80009e0:	e020      	b.n	8000a24 <handleFullRows+0x194>
						for(int new_width = SCREEN_WIDTH - 1; new_width >= 0; new_width--){
 80009e2:	230b      	movs	r3, #11
 80009e4:	61fb      	str	r3, [r7, #28]
 80009e6:	e017      	b.n	8000a18 <handleFullRows+0x188>
							screen[new_height][new_width] = screen[new_height - 1][new_width];
 80009e8:	6a3b      	ldr	r3, [r7, #32]
 80009ea:	1e5a      	subs	r2, r3, #1
 80009ec:	493f      	ldr	r1, [pc, #252]	; (8000aec <handleFullRows+0x25c>)
 80009ee:	4613      	mov	r3, r2
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	4413      	add	r3, r2
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	69fa      	ldr	r2, [r7, #28]
 80009f8:	4413      	add	r3, r2
 80009fa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80009fe:	483b      	ldr	r0, [pc, #236]	; (8000aec <handleFullRows+0x25c>)
 8000a00:	6a3a      	ldr	r2, [r7, #32]
 8000a02:	4613      	mov	r3, r2
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	4413      	add	r3, r2
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	69fa      	ldr	r2, [r7, #28]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
						for(int new_width = SCREEN_WIDTH - 1; new_width >= 0; new_width--){
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	3b01      	subs	r3, #1
 8000a16:	61fb      	str	r3, [r7, #28]
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	dae4      	bge.n	80009e8 <handleFullRows+0x158>
					for(int new_height = i; new_height >= 5; new_height--){
 8000a1e:	6a3b      	ldr	r3, [r7, #32]
 8000a20:	3b01      	subs	r3, #1
 8000a22:	623b      	str	r3, [r7, #32]
 8000a24:	6a3b      	ldr	r3, [r7, #32]
 8000a26:	2b04      	cmp	r3, #4
 8000a28:	dcdb      	bgt.n	80009e2 <handleFullRows+0x152>
						}
					}

					// Redraw the shifted blocks
					ucg_SetColor(&ucg,0,0,255,255);
 8000a2a:	23ff      	movs	r3, #255	; 0xff
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	23ff      	movs	r3, #255	; 0xff
 8000a30:	2200      	movs	r2, #0
 8000a32:	2100      	movs	r1, #0
 8000a34:	482c      	ldr	r0, [pc, #176]	; (8000ae8 <handleFullRows+0x258>)
 8000a36:	f003 f8a7 	bl	8003b88 <ucg_SetColor>
					for(int ii = 4; ii <= i; ii++){
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	61bb      	str	r3, [r7, #24]
 8000a3e:	e034      	b.n	8000aaa <handleFullRows+0x21a>
						for(int jj = 0; jj < SCREEN_WIDTH; jj++) {
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	e02b      	b.n	8000a9e <handleFullRows+0x20e>
							if(screen[ii][jj] == 1) {
 8000a46:	4929      	ldr	r1, [pc, #164]	; (8000aec <handleFullRows+0x25c>)
 8000a48:	69ba      	ldr	r2, [r7, #24]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	4413      	add	r3, r2
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	697a      	ldr	r2, [r7, #20]
 8000a54:	4413      	add	r3, r2
 8000a56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d11c      	bne.n	8000a98 <handleFullRows+0x208>
								int px =  jj*size+1;
 8000a5e:	4b27      	ldr	r3, [pc, #156]	; (8000afc <handleFullRows+0x26c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	697a      	ldr	r2, [r7, #20]
 8000a64:	fb02 f303 	mul.w	r3, r2, r3
 8000a68:	3301      	adds	r3, #1
 8000a6a:	613b      	str	r3, [r7, #16]
								int py =  ii*size+1;
 8000a6c:	4b23      	ldr	r3, [pc, #140]	; (8000afc <handleFullRows+0x26c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	69ba      	ldr	r2, [r7, #24]
 8000a72:	fb02 f303 	mul.w	r3, r2, r3
 8000a76:	3301      	adds	r3, #1
 8000a78:	60fb      	str	r3, [r7, #12]
								ucg_DrawBox(&ucg, px, py, size, size);
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	b219      	sxth	r1, r3
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	b21a      	sxth	r2, r3
 8000a82:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <handleFullRows+0x26c>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	b218      	sxth	r0, r3
 8000a88:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <handleFullRows+0x26c>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	b21b      	sxth	r3, r3
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	4603      	mov	r3, r0
 8000a92:	4815      	ldr	r0, [pc, #84]	; (8000ae8 <handleFullRows+0x258>)
 8000a94:	f001 fde8 	bl	8002668 <ucg_DrawBox>
						for(int jj = 0; jj < SCREEN_WIDTH; jj++) {
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	617b      	str	r3, [r7, #20]
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	2b0b      	cmp	r3, #11
 8000aa2:	ddd0      	ble.n	8000a46 <handleFullRows+0x1b6>
					for(int ii = 4; ii <= i; ii++){
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	61bb      	str	r3, [r7, #24]
 8000aaa:	69ba      	ldr	r2, [r7, #24]
 8000aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	ddc6      	ble.n	8000a40 <handleFullRows+0x1b0>
							}
						}
					}

					checkRow = 0;
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <handleFullRows+0x260>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	e003      	b.n	8000ac2 <handleFullRows+0x232>
				}
			}
			else{
				checkRow = 0;
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <handleFullRows+0x260>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
				break;
 8000ac0:	e006      	b.n	8000ad0 <handleFullRows+0x240>
		for(int j = 0; j < SCREEN_WIDTH; j++){
 8000ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
 8000ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aca:	2b0b      	cmp	r3, #11
 8000acc:	f77f aef1 	ble.w	80008b2 <handleFullRows+0x22>
	for(int i = 0; i < SCREEN_HEIGHT; i++){
 8000ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8000ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad8:	2b17      	cmp	r3, #23
 8000ada:	f77f aee7 	ble.w	80008ac <handleFullRows+0x1c>
			}
		}
	}
}
 8000ade:	bf00      	nop
 8000ae0:	bf00      	nop
 8000ae2:	3738      	adds	r7, #56	; 0x38
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000608 	.word	0x20000608
 8000aec:	200006c0 	.word	0x200006c0
 8000af0:	200006bc 	.word	0x200006bc
 8000af4:	20000008 	.word	0x20000008
 8000af8:	20000bd0 	.word	0x20000bd0
 8000afc:	2000000c 	.word	0x2000000c

08000b00 <checkForGameOver>:
 * @func   checkForGameOver
 * @brief  Check if the first row of the game screen has any block; if true, handle "Game Over".
 * @param  None
 * @retval None
 */
void checkForGameOver(){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af02      	add	r7, sp, #8
	for(int i = 0 ; i < SCREEN_WIDTH;i++){
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	e01e      	b.n	8000b4a <checkForGameOver+0x4a>
		if(screen[0][i] == 1){
 8000b0c:	4a13      	ldr	r2, [pc, #76]	; (8000b5c <checkForGameOver+0x5c>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d115      	bne.n	8000b44 <checkForGameOver+0x44>
			ucg_SetColor(&ucg, 0, 255, 0, 0);
 8000b18:	2300      	movs	r3, #0
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	22ff      	movs	r2, #255	; 0xff
 8000b20:	2100      	movs	r1, #0
 8000b22:	480f      	ldr	r0, [pc, #60]	; (8000b60 <checkForGameOver+0x60>)
 8000b24:	f003 f830 	bl	8003b88 <ucg_SetColor>
			ucg_DrawString(&ucg, 4 ,60, 0, "Game Over");
 8000b28:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <checkForGameOver+0x64>)
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	223c      	movs	r2, #60	; 0x3c
 8000b30:	2104      	movs	r1, #4
 8000b32:	480b      	ldr	r0, [pc, #44]	; (8000b60 <checkForGameOver+0x60>)
 8000b34:	f002 fe66 	bl	8003804 <ucg_DrawString>
			TimerStop(idTimer);
 8000b38:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <checkForGameOver+0x68>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 f9e0 	bl	8001f04 <TimerStop>
	for(int i = 0 ; i < SCREEN_WIDTH;i++){
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3301      	adds	r3, #1
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b0b      	cmp	r3, #11
 8000b4e:	dddd      	ble.n	8000b0c <checkForGameOver+0xc>
		}
	}
}
 8000b50:	bf00      	nop
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200006c0 	.word	0x200006c0
 8000b60:	20000608 	.word	0x20000608
 8000b64:	08005b60 	.word	0x08005b60
 8000b68:	20000004 	.word	0x20000004

08000b6c <handleFallingBlock>:
 * @func   handleFallingBlock
 * @brief  Handle the falling and placement of a block in the game, including collision detection and game state updates.
 * @param  block: 2D array representing the falling block
 * @retval None
 */
void handleFallingBlock(int block[4][4]){
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	drawBlockOnScreen(currentX, currentY, block);
 8000b74:	4b48      	ldr	r3, [pc, #288]	; (8000c98 <handleFallingBlock+0x12c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a48      	ldr	r2, [pc, #288]	; (8000c9c <handleFallingBlock+0x130>)
 8000b7a:	6811      	ldr	r1, [r2, #0]
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fcfe 	bl	8000580 <drawBlockOnScreen>
	delayMs(100);
 8000b84:	2064      	movs	r0, #100	; 0x64
 8000b86:	f7ff fc73 	bl	8000470 <delayMs>
	handleFullRows();
 8000b8a:	f7ff fe81 	bl	8000890 <handleFullRows>
	// Check for collisions with the block below
	if(!checkForCollisions(currentX, currentY + size, block)) {
 8000b8e:	4b42      	ldr	r3, [pc, #264]	; (8000c98 <handleFallingBlock+0x12c>)
 8000b90:	6818      	ldr	r0, [r3, #0]
 8000b92:	4b42      	ldr	r3, [pc, #264]	; (8000c9c <handleFallingBlock+0x130>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	4b42      	ldr	r3, [pc, #264]	; (8000ca0 <handleFallingBlock+0x134>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	687a      	ldr	r2, [r7, #4]
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	f7ff fd92 	bl	80006c8 <checkForCollisions>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d10f      	bne.n	8000bca <handleFallingBlock+0x5e>
		// If no collision, erase the block and move it down
		eraseBlockOnScreen(currentX, currentY, block);
 8000baa:	4b3b      	ldr	r3, [pc, #236]	; (8000c98 <handleFallingBlock+0x12c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a3b      	ldr	r2, [pc, #236]	; (8000c9c <handleFallingBlock+0x130>)
 8000bb0:	6811      	ldr	r1, [r2, #0]
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fd35 	bl	8000624 <eraseBlockOnScreen>
		currentY += size;
 8000bba:	4b38      	ldr	r3, [pc, #224]	; (8000c9c <handleFallingBlock+0x130>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	4b38      	ldr	r3, [pc, #224]	; (8000ca0 <handleFallingBlock+0x134>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a35      	ldr	r2, [pc, #212]	; (8000c9c <handleFallingBlock+0x130>)
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	e036      	b.n	8000c38 <handleFallingBlock+0xcc>
	}
	else {
		// If collision, fix the block on the screen, reset position, choose a new block
		fixBlockOnScreen(currentX, currentY, block);
 8000bca:	4b33      	ldr	r3, [pc, #204]	; (8000c98 <handleFallingBlock+0x12c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a33      	ldr	r2, [pc, #204]	; (8000c9c <handleFallingBlock+0x130>)
 8000bd0:	6811      	ldr	r1, [r2, #0]
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fddb 	bl	8000790 <fixBlockOnScreen>
		currentX = 25;
 8000bda:	4b2f      	ldr	r3, [pc, #188]	; (8000c98 <handleFallingBlock+0x12c>)
 8000bdc:	2219      	movs	r2, #25
 8000bde:	601a      	str	r2, [r3, #0]
		currentY = -9;
 8000be0:	4b2e      	ldr	r3, [pc, #184]	; (8000c9c <handleFallingBlock+0x130>)
 8000be2:	f06f 0208 	mvn.w	r2, #8
 8000be6:	601a      	str	r2, [r3, #0]
		x_axis = currentX;
 8000be8:	4b2b      	ldr	r3, [pc, #172]	; (8000c98 <handleFallingBlock+0x12c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a2d      	ldr	r2, [pc, #180]	; (8000ca4 <handleFallingBlock+0x138>)
 8000bee:	6013      	str	r3, [r2, #0]
		chooseBlock();
 8000bf0:	f7ff fc7e 	bl	80004f0 <chooseBlock>
	    for (int i = 0; i < 4; i++) {
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	e019      	b.n	8000c2e <handleFallingBlock+0xc2>
	        for (int j = 0; j < 4; j++) {
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	e010      	b.n	8000c22 <handleFallingBlock+0xb6>
	            currentBlock[i][j] = nextBlock[i][j];
 8000c00:	4929      	ldr	r1, [pc, #164]	; (8000ca8 <handleFallingBlock+0x13c>)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	009a      	lsls	r2, r3, #2
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	4413      	add	r3, r2
 8000c0a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000c0e:	4827      	ldr	r0, [pc, #156]	; (8000cac <handleFallingBlock+0x140>)
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	0099      	lsls	r1, r3, #2
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	440b      	add	r3, r1
 8000c18:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	        for (int j = 0; j < 4; j++) {
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	2b03      	cmp	r3, #3
 8000c26:	ddeb      	ble.n	8000c00 <handleFallingBlock+0x94>
	    for (int i = 0; i < 4; i++) {
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	2b03      	cmp	r3, #3
 8000c32:	dde2      	ble.n	8000bfa <handleFallingBlock+0x8e>
	        }
	    }
		// Check for game over
		checkForGameOver();
 8000c34:	f7ff ff64 	bl	8000b00 <checkForGameOver>
	}
	// Update the minx and maxx values based on block width and position
	minx = (calculateBlockMaxWidth(block, x_axis) - calculateBlockWidth(block))*size;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <handleFallingBlock+0x138>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f000 f862 	bl	8000d08 <calculateBlockMaxWidth>
 8000c44:	4604      	mov	r4, r0
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f000 f898 	bl	8000d7c <calculateBlockWidth>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	1ae3      	subs	r3, r4, r3
 8000c50:	4a13      	ldr	r2, [pc, #76]	; (8000ca0 <handleFallingBlock+0x134>)
 8000c52:	6812      	ldr	r2, [r2, #0]
 8000c54:	fb02 f303 	mul.w	r3, r2, r3
 8000c58:	4a15      	ldr	r2, [pc, #84]	; (8000cb0 <handleFallingBlock+0x144>)
 8000c5a:	6013      	str	r3, [r2, #0]
	maxx = calculateBlockMaxWidth(block, x_axis)*size;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <handleFallingBlock+0x138>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4619      	mov	r1, r3
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f000 f850 	bl	8000d08 <calculateBlockMaxWidth>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <handleFallingBlock+0x134>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	fb02 f303 	mul.w	r3, r2, r3
 8000c72:	4a10      	ldr	r2, [pc, #64]	; (8000cb4 <handleFallingBlock+0x148>)
 8000c74:	6013      	str	r3, [r2, #0]
	// Update the currentX position if it changed
	if(x_axis != currentX) {
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <handleFallingBlock+0x138>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <handleFallingBlock+0x12c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d003      	beq.n	8000c8a <handleFallingBlock+0x11e>
		currentX = x_axis;
 8000c82:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <handleFallingBlock+0x138>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <handleFallingBlock+0x12c>)
 8000c88:	6013      	str	r3, [r2, #0]
	}
	 // Update the score display
	updateScore();
 8000c8a:	f7ff fdd7 	bl	800083c <updateScore>
}
 8000c8e:	bf00      	nop
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd90      	pop	{r4, r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000010 	.word	0x20000010
 8000c9c:	20000014 	.word	0x20000014
 8000ca0:	2000000c 	.word	0x2000000c
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	20000b8c 	.word	0x20000b8c
 8000cac:	20000b4c 	.word	0x20000b4c
 8000cb0:	20000bd8 	.word	0x20000bd8
 8000cb4:	20000bd4 	.word	0x20000bd4

08000cb8 <startFallingBlockTimer>:
 * @func   startFallingBlockTimer
 * @brief  Start a timer to handle the falling of a block at a specified interval.
 * @param  block: 2D array representing the falling block
 * @retval None
 */
void startFallingBlockTimer(int block[4][4]) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af02      	add	r7, sp, #8
 8000cbe:	6078      	str	r0, [r7, #4]
	// Stop the timer if it's already running
	if (idTimer != NO_TIMER) {
 8000cc0:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <startFallingBlockTimer+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2bff      	cmp	r3, #255	; 0xff
 8000cc6:	d005      	beq.n	8000cd4 <startFallingBlockTimer+0x1c>
		TimerStop(idTimer);
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <startFallingBlockTimer+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f001 f918 	bl	8001f04 <TimerStop>
	}
	// Start a timer to handle the falling block at a specified interval
	idTimer = TimerStart("Fall", timeRepeat, TIMER_REPEAT_FOREVER, (void*) handleFallingBlock, block);
 8000cd4:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <startFallingBlockTimer+0x44>)
 8000cd6:	6819      	ldr	r1, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <startFallingBlockTimer+0x48>)
 8000cde:	22ff      	movs	r2, #255	; 0xff
 8000ce0:	4808      	ldr	r0, [pc, #32]	; (8000d04 <startFallingBlockTimer+0x4c>)
 8000ce2:	f001 f8ad 	bl	8001e40 <TimerStart>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <startFallingBlockTimer+0x40>)
 8000cec:	601a      	str	r2, [r3, #0]
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000004 	.word	0x20000004
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	08000b6d 	.word	0x08000b6d
 8000d04:	08005b6c 	.word	0x08005b6c

08000d08 <calculateBlockMaxWidth>:
 * @brief  Calculate the maximum width of a block based on its 2D array representation.
 * @param  block: 2D array representing the block
 * @param  x0: X-coordinate of the leftmost column of the block
 * @retval Maximum width of the block
 */
int calculateBlockMaxWidth(int block[4][4], int x0) {
 8000d08:	b480      	push	{r7}
 8000d0a:	b087      	sub	sp, #28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
    int max_width = -1;
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295
 8000d16:	617b      	str	r3, [r7, #20]
    // Iterate through the block and calculate the maximum width
    for (int i = 0; i < 4; i++) {
 8000d18:	2300      	movs	r3, #0
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	e01e      	b.n	8000d5c <calculateBlockMaxWidth+0x54>
        for (int j = 0; j < 4; j++) {
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	e015      	b.n	8000d50 <calculateBlockMaxWidth+0x48>
            if (block[i][j] == 1) {
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	011b      	lsls	r3, r3, #4
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d109      	bne.n	8000d4a <calculateBlockMaxWidth+0x42>
                int cellX = x0 + j;
 8000d36:	683a      	ldr	r2, [r7, #0]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	60bb      	str	r3, [r7, #8]
                if (cellX > max_width) {
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	dd01      	ble.n	8000d4a <calculateBlockMaxWidth+0x42>
                    max_width = cellX;
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	617b      	str	r3, [r7, #20]
        for (int j = 0; j < 4; j++) {
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2b03      	cmp	r3, #3
 8000d54:	dde6      	ble.n	8000d24 <calculateBlockMaxWidth+0x1c>
    for (int i = 0; i < 4; i++) {
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	2b03      	cmp	r3, #3
 8000d60:	dddd      	ble.n	8000d1e <calculateBlockMaxWidth+0x16>
                }
            }
        }
    }
    return max_width - abs(x0) + 1;
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	bfb8      	it	lt
 8000d68:	425b      	neglt	r3, r3
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	3301      	adds	r3, #1
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	371c      	adds	r7, #28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <calculateBlockWidth>:
 * @func   calculateBlockWidth
 * @brief  Calculate the width of a block.
 * @param  block: 2D array representing the block
 * @retval Width of the block
 */
int calculateBlockWidth(int block[4][4]) {
 8000d7c:	b480      	push	{r7}
 8000d7e:	b087      	sub	sp, #28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
    int width = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
    // Iterate through the block and calculate the width of each row
    for (int i = 0; i < 4; i++) {
 8000d88:	2300      	movs	r3, #0
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	e01f      	b.n	8000dce <calculateBlockWidth+0x52>
        int rowWidth = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
        for (int j = 0; j < 4; j++) {
 8000d92:	2300      	movs	r3, #0
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	e00e      	b.n	8000db6 <calculateBlockWidth+0x3a>
            if (block[i][j] == 1) {
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	4413      	add	r3, r2
 8000da0:	68ba      	ldr	r2, [r7, #8]
 8000da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d102      	bne.n	8000db0 <calculateBlockWidth+0x34>
                rowWidth++;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	3301      	adds	r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
        for (int j = 0; j < 4; j++) {
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	3301      	adds	r3, #1
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	2b03      	cmp	r3, #3
 8000dba:	dded      	ble.n	8000d98 <calculateBlockWidth+0x1c>
            }
        }
        // Update the width if the current row's width is greater
        if (rowWidth > width) {
 8000dbc:	68fa      	ldr	r2, [r7, #12]
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	dd01      	ble.n	8000dc8 <calculateBlockWidth+0x4c>
            width = rowWidth;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 4; i++) {
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	2b03      	cmp	r3, #3
 8000dd2:	dddc      	ble.n	8000d8e <calculateBlockWidth+0x12>
        }
    }

    return width;
 8000dd4:	697b      	ldr	r3, [r7, #20]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	371c      	adds	r7, #28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <rotateCurrentBlock>:
 * @func   rotateCurrentBlock
 * @brief  Rotate the current block based on its type and handle collisions.
 * @param  None
 * @retval None
 */
void rotateCurrentBlock(void) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b0aa      	sub	sp, #168	; 0xa8
 8000de8:	af00      	add	r7, sp, #0
    // Erase the current block before rotation
	eraseBlockOnScreen(currentX, currentY, block);
 8000dea:	4bae      	ldr	r3, [pc, #696]	; (80010a4 <rotateCurrentBlock+0x2c0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4aae      	ldr	r2, [pc, #696]	; (80010a8 <rotateCurrentBlock+0x2c4>)
 8000df0:	6811      	ldr	r1, [r2, #0]
 8000df2:	4aae      	ldr	r2, [pc, #696]	; (80010ac <rotateCurrentBlock+0x2c8>)
 8000df4:	6812      	ldr	r2, [r2, #0]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fc14 	bl	8000624 <eraseBlockOnScreen>
    // Calculate the next rotation index
	int nextRotation = (currentRotation + 1)%4;
 8000dfc:	4bac      	ldr	r3, [pc, #688]	; (80010b0 <rotateCurrentBlock+0x2cc>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	3301      	adds	r3, #1
 8000e02:	425a      	negs	r2, r3
 8000e04:	f003 0303 	and.w	r3, r3, #3
 8000e08:	f002 0203 	and.w	r2, r2, #3
 8000e0c:	bf58      	it	pl
 8000e0e:	4253      	negpl	r3, r2
 8000e10:	657b      	str	r3, [r7, #84]	; 0x54
	int tempBlock[4][4];
	// Determine block type and perform rotation
	if (blockIndex >= 0 && blockIndex < 4) {
 8000e12:	4ba8      	ldr	r3, [pc, #672]	; (80010b4 <rotateCurrentBlock+0x2d0>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f2c0 8082 	blt.w	8000f20 <rotateCurrentBlock+0x13c>
 8000e1c:	4ba5      	ldr	r3, [pc, #660]	; (80010b4 <rotateCurrentBlock+0x2d0>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b03      	cmp	r3, #3
 8000e22:	dc7d      	bgt.n	8000f20 <rotateCurrentBlock+0x13c>
        // Rotate the block type T
		blockIndex = (blockIndex + currentRotation)%4;
 8000e24:	4ba3      	ldr	r3, [pc, #652]	; (80010b4 <rotateCurrentBlock+0x2d0>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4ba1      	ldr	r3, [pc, #644]	; (80010b0 <rotateCurrentBlock+0x2cc>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	425a      	negs	r2, r3
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	f002 0203 	and.w	r2, r2, #3
 8000e38:	bf58      	it	pl
 8000e3a:	4253      	negpl	r3, r2
 8000e3c:	4a9d      	ldr	r2, [pc, #628]	; (80010b4 <rotateCurrentBlock+0x2d0>)
 8000e3e:	6013      	str	r3, [r2, #0]
	    int (*rotBlock)[4] = block_T[blockIndex];
 8000e40:	4b9c      	ldr	r3, [pc, #624]	; (80010b4 <rotateCurrentBlock+0x2d0>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a9c      	ldr	r2, [pc, #624]	; (80010b8 <rotateCurrentBlock+0x2d4>)
 8000e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4a:	653b      	str	r3, [r7, #80]	; 0x50
	    if (!checkForCollisions(currentX, currentY, rotBlock)) {
 8000e4c:	4b95      	ldr	r3, [pc, #596]	; (80010a4 <rotateCurrentBlock+0x2c0>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a95      	ldr	r2, [pc, #596]	; (80010a8 <rotateCurrentBlock+0x2c4>)
 8000e52:	6811      	ldr	r1, [r2, #0]
 8000e54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fc36 	bl	80006c8 <checkForCollisions>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d12d      	bne.n	8000ebe <rotateCurrentBlock+0xda>
		    for (int i = 0; i < 4; i++) {
 8000e62:	2300      	movs	r3, #0
 8000e64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000e68:	e025      	b.n	8000eb6 <rotateCurrentBlock+0xd2>
			        for (int j = 0; j < 4; j++) {
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000e70:	e018      	b.n	8000ea4 <rotateCurrentBlock+0xc0>
			            tempBlock[i][j] = rotBlock[i][j];
 8000e72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000e76:	011b      	lsls	r3, r3, #4
 8000e78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000e7a:	4413      	add	r3, r2
 8000e7c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000e80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000e88:	0099      	lsls	r1, r3, #2
 8000e8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000e8e:	440b      	add	r3, r1
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	33a8      	adds	r3, #168	; 0xa8
 8000e94:	443b      	add	r3, r7
 8000e96:	f843 2ca8 	str.w	r2, [r3, #-168]
			        for (int j = 0; j < 4; j++) {
 8000e9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000ea4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000ea8:	2b03      	cmp	r3, #3
 8000eaa:	dde2      	ble.n	8000e72 <rotateCurrentBlock+0x8e>
		    for (int i = 0; i < 4; i++) {
 8000eac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000eb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000eba:	2b03      	cmp	r3, #3
 8000ebc:	ddd5      	ble.n	8000e6a <rotateCurrentBlock+0x86>
			        }
			    }
	    }
	    for (int i = 0; i < 4; i++) {
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000ec4:	e025      	b.n	8000f12 <rotateCurrentBlock+0x12e>
		        for (int j = 0; j < 4; j++) {
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000ecc:	e018      	b.n	8000f00 <rotateCurrentBlock+0x11c>
		            currentBlock[i][j] = tempBlock[i][j];
 8000ece:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ed2:	009a      	lsls	r2, r3, #2
 8000ed4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000ed8:	4413      	add	r3, r2
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	33a8      	adds	r3, #168	; 0xa8
 8000ede:	443b      	add	r3, r7
 8000ee0:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 8000ee4:	4875      	ldr	r0, [pc, #468]	; (80010bc <rotateCurrentBlock+0x2d8>)
 8000ee6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000eea:	0099      	lsls	r1, r3, #2
 8000eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000ef0:	440b      	add	r3, r1
 8000ef2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		        for (int j = 0; j < 4; j++) {
 8000ef6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000efa:	3301      	adds	r3, #1
 8000efc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000f00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	dde2      	ble.n	8000ece <rotateCurrentBlock+0xea>
	    for (int i = 0; i < 4; i++) {
 8000f08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000f12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f16:	2b03      	cmp	r3, #3
 8000f18:	ddd5      	ble.n	8000ec6 <rotateCurrentBlock+0xe2>
		        }
		    }
	    currentRotation = nextRotation;
 8000f1a:	4a65      	ldr	r2, [pc, #404]	; (80010b0 <rotateCurrentBlock+0x2cc>)
 8000f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f1e:	6013      	str	r3, [r2, #0]
	}
	// Determine block type and perform rotation
	if (blockIndex >= 4 && blockIndex < 8) {
 8000f20:	4b64      	ldr	r3, [pc, #400]	; (80010b4 <rotateCurrentBlock+0x2d0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	f340 8089 	ble.w	800103c <rotateCurrentBlock+0x258>
 8000f2a:	4b62      	ldr	r3, [pc, #392]	; (80010b4 <rotateCurrentBlock+0x2d0>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b07      	cmp	r3, #7
 8000f30:	f300 8084 	bgt.w	800103c <rotateCurrentBlock+0x258>
        // Rotate the block type J
		blockIndex = (blockIndex - 4 + currentRotation)%4;
 8000f34:	4b5f      	ldr	r3, [pc, #380]	; (80010b4 <rotateCurrentBlock+0x2d0>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	1f1a      	subs	r2, r3, #4
 8000f3a:	4b5d      	ldr	r3, [pc, #372]	; (80010b0 <rotateCurrentBlock+0x2cc>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	425a      	negs	r2, r3
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	f002 0203 	and.w	r2, r2, #3
 8000f4a:	bf58      	it	pl
 8000f4c:	4253      	negpl	r3, r2
 8000f4e:	4a59      	ldr	r2, [pc, #356]	; (80010b4 <rotateCurrentBlock+0x2d0>)
 8000f50:	6013      	str	r3, [r2, #0]
	    int (*rotBlock)[4] = block_J[blockIndex];
 8000f52:	4b58      	ldr	r3, [pc, #352]	; (80010b4 <rotateCurrentBlock+0x2d0>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a5a      	ldr	r2, [pc, #360]	; (80010c0 <rotateCurrentBlock+0x2dc>)
 8000f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
	    if (!checkForCollisions(currentX, currentY, rotBlock)) {
 8000f5e:	4b51      	ldr	r3, [pc, #324]	; (80010a4 <rotateCurrentBlock+0x2c0>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a51      	ldr	r2, [pc, #324]	; (80010a8 <rotateCurrentBlock+0x2c4>)
 8000f64:	6811      	ldr	r1, [r2, #0]
 8000f66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fbad 	bl	80006c8 <checkForCollisions>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d12d      	bne.n	8000fd0 <rotateCurrentBlock+0x1ec>
		    for (int i = 0; i < 4; i++) {
 8000f74:	2300      	movs	r3, #0
 8000f76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000f7a:	e025      	b.n	8000fc8 <rotateCurrentBlock+0x1e4>
			        for (int j = 0; j < 4; j++) {
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000f82:	e018      	b.n	8000fb6 <rotateCurrentBlock+0x1d2>
			            tempBlock[i][j] = rotBlock[i][j];
 8000f84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f88:	011b      	lsls	r3, r3, #4
 8000f8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f8c:	4413      	add	r3, r2
 8000f8e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000f92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f9a:	0099      	lsls	r1, r3, #2
 8000f9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000fa0:	440b      	add	r3, r1
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	33a8      	adds	r3, #168	; 0xa8
 8000fa6:	443b      	add	r3, r7
 8000fa8:	f843 2ca8 	str.w	r2, [r3, #-168]
			        for (int j = 0; j < 4; j++) {
 8000fac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000fb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	dde2      	ble.n	8000f84 <rotateCurrentBlock+0x1a0>
		    for (int i = 0; i < 4; i++) {
 8000fbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000fc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	ddd5      	ble.n	8000f7c <rotateCurrentBlock+0x198>
			        }
			    }
	    }
	    for (int i = 0; i < 4; i++) {
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000fd6:	e025      	b.n	8001024 <rotateCurrentBlock+0x240>
		        for (int j = 0; j < 4; j++) {
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000fde:	e018      	b.n	8001012 <rotateCurrentBlock+0x22e>
		            currentBlock[i][j] = tempBlock[i][j];
 8000fe0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000fe4:	009a      	lsls	r2, r3, #2
 8000fe6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000fea:	4413      	add	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	33a8      	adds	r3, #168	; 0xa8
 8000ff0:	443b      	add	r3, r7
 8000ff2:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 8000ff6:	4831      	ldr	r0, [pc, #196]	; (80010bc <rotateCurrentBlock+0x2d8>)
 8000ff8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000ffc:	0099      	lsls	r1, r3, #2
 8000ffe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001002:	440b      	add	r3, r1
 8001004:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		        for (int j = 0; j < 4; j++) {
 8001008:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800100c:	3301      	adds	r3, #1
 800100e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001012:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001016:	2b03      	cmp	r3, #3
 8001018:	dde2      	ble.n	8000fe0 <rotateCurrentBlock+0x1fc>
	    for (int i = 0; i < 4; i++) {
 800101a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800101e:	3301      	adds	r3, #1
 8001020:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001024:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001028:	2b03      	cmp	r3, #3
 800102a:	ddd5      	ble.n	8000fd8 <rotateCurrentBlock+0x1f4>
		        }
		    }
	    currentRotation = nextRotation;
 800102c:	4a20      	ldr	r2, [pc, #128]	; (80010b0 <rotateCurrentBlock+0x2cc>)
 800102e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001030:	6013      	str	r3, [r2, #0]
	    blockIndex += 4;
 8001032:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <rotateCurrentBlock+0x2d0>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	3304      	adds	r3, #4
 8001038:	4a1e      	ldr	r2, [pc, #120]	; (80010b4 <rotateCurrentBlock+0x2d0>)
 800103a:	6013      	str	r3, [r2, #0]
	}
	// Determine block type and perform rotation
	if (blockIndex >= 8 && blockIndex < 12) {
 800103c:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <rotateCurrentBlock+0x2d0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b07      	cmp	r3, #7
 8001042:	f340 8091 	ble.w	8001168 <rotateCurrentBlock+0x384>
 8001046:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <rotateCurrentBlock+0x2d0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b0b      	cmp	r3, #11
 800104c:	f300 808c 	bgt.w	8001168 <rotateCurrentBlock+0x384>
        // Rotate the block type Z
		blockIndex = (blockIndex - 8 + currentRotation)%4;
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <rotateCurrentBlock+0x2d0>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f1a3 0208 	sub.w	r2, r3, #8
 8001058:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <rotateCurrentBlock+0x2cc>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4413      	add	r3, r2
 800105e:	425a      	negs	r2, r3
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	f002 0203 	and.w	r2, r2, #3
 8001068:	bf58      	it	pl
 800106a:	4253      	negpl	r3, r2
 800106c:	4a11      	ldr	r2, [pc, #68]	; (80010b4 <rotateCurrentBlock+0x2d0>)
 800106e:	6013      	str	r3, [r2, #0]
	    int (*rotBlock)[4] = block_Z[blockIndex];
 8001070:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <rotateCurrentBlock+0x2d0>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a13      	ldr	r2, [pc, #76]	; (80010c4 <rotateCurrentBlock+0x2e0>)
 8001076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107a:	64bb      	str	r3, [r7, #72]	; 0x48
	    if (!checkForCollisions(currentX, currentY, rotBlock)) {
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <rotateCurrentBlock+0x2c0>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a09      	ldr	r2, [pc, #36]	; (80010a8 <rotateCurrentBlock+0x2c4>)
 8001082:	6811      	ldr	r1, [r2, #0]
 8001084:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fb1e 	bl	80006c8 <checkForCollisions>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d140      	bne.n	8001114 <rotateCurrentBlock+0x330>
		    for (int i = 0; i < 4; i++) {
 8001092:	2300      	movs	r3, #0
 8001094:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001098:	e038      	b.n	800110c <rotateCurrentBlock+0x328>
			        for (int j = 0; j < 4; j++) {
 800109a:	2300      	movs	r3, #0
 800109c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80010a0:	e02b      	b.n	80010fa <rotateCurrentBlock+0x316>
 80010a2:	bf00      	nop
 80010a4:	20000010 	.word	0x20000010
 80010a8:	20000014 	.word	0x20000014
 80010ac:	2000001c 	.word	0x2000001c
 80010b0:	20000018 	.word	0x20000018
 80010b4:	20000bcc 	.word	0x20000bcc
 80010b8:	2000052c 	.word	0x2000052c
 80010bc:	20000b4c 	.word	0x20000b4c
 80010c0:	2000053c 	.word	0x2000053c
 80010c4:	2000054c 	.word	0x2000054c
			            tempBlock[i][j] = rotBlock[i][j];
 80010c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010cc:	011b      	lsls	r3, r3, #4
 80010ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80010d0:	4413      	add	r3, r2
 80010d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80010d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80010da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010de:	0099      	lsls	r1, r3, #2
 80010e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80010e4:	440b      	add	r3, r1
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	33a8      	adds	r3, #168	; 0xa8
 80010ea:	443b      	add	r3, r7
 80010ec:	f843 2ca8 	str.w	r2, [r3, #-168]
			        for (int j = 0; j < 4; j++) {
 80010f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80010f4:	3301      	adds	r3, #1
 80010f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80010fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80010fe:	2b03      	cmp	r3, #3
 8001100:	dde2      	ble.n	80010c8 <rotateCurrentBlock+0x2e4>
		    for (int i = 0; i < 4; i++) {
 8001102:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001106:	3301      	adds	r3, #1
 8001108:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800110c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001110:	2b03      	cmp	r3, #3
 8001112:	ddc2      	ble.n	800109a <rotateCurrentBlock+0x2b6>
			        }
			    }
	    }
	    for (int i = 0; i < 4; i++) {
 8001114:	2300      	movs	r3, #0
 8001116:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001118:	e01b      	b.n	8001152 <rotateCurrentBlock+0x36e>
		        for (int j = 0; j < 4; j++) {
 800111a:	2300      	movs	r3, #0
 800111c:	67bb      	str	r3, [r7, #120]	; 0x78
 800111e:	e012      	b.n	8001146 <rotateCurrentBlock+0x362>
		            currentBlock[i][j] = tempBlock[i][j];
 8001120:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001122:	009a      	lsls	r2, r3, #2
 8001124:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001126:	4413      	add	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	33a8      	adds	r3, #168	; 0xa8
 800112c:	443b      	add	r3, r7
 800112e:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 8001132:	4883      	ldr	r0, [pc, #524]	; (8001340 <rotateCurrentBlock+0x55c>)
 8001134:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001136:	0099      	lsls	r1, r3, #2
 8001138:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800113a:	440b      	add	r3, r1
 800113c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		        for (int j = 0; j < 4; j++) {
 8001140:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001142:	3301      	adds	r3, #1
 8001144:	67bb      	str	r3, [r7, #120]	; 0x78
 8001146:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001148:	2b03      	cmp	r3, #3
 800114a:	dde9      	ble.n	8001120 <rotateCurrentBlock+0x33c>
	    for (int i = 0; i < 4; i++) {
 800114c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800114e:	3301      	adds	r3, #1
 8001150:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001152:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001154:	2b03      	cmp	r3, #3
 8001156:	dde0      	ble.n	800111a <rotateCurrentBlock+0x336>
		        }
		    }
	    currentRotation = nextRotation;
 8001158:	4a7a      	ldr	r2, [pc, #488]	; (8001344 <rotateCurrentBlock+0x560>)
 800115a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800115c:	6013      	str	r3, [r2, #0]
	    blockIndex += 8;
 800115e:	4b7a      	ldr	r3, [pc, #488]	; (8001348 <rotateCurrentBlock+0x564>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	3308      	adds	r3, #8
 8001164:	4a78      	ldr	r2, [pc, #480]	; (8001348 <rotateCurrentBlock+0x564>)
 8001166:	6013      	str	r3, [r2, #0]
	}
	// Determine block type and perform rotation
	if (blockIndex >= 12 && blockIndex < 16) {
 8001168:	4b77      	ldr	r3, [pc, #476]	; (8001348 <rotateCurrentBlock+0x564>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b0b      	cmp	r3, #11
 800116e:	dd70      	ble.n	8001252 <rotateCurrentBlock+0x46e>
 8001170:	4b75      	ldr	r3, [pc, #468]	; (8001348 <rotateCurrentBlock+0x564>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b0f      	cmp	r3, #15
 8001176:	dc6c      	bgt.n	8001252 <rotateCurrentBlock+0x46e>
        // Rotate the block type L
		blockIndex = (blockIndex - 12 + currentRotation)%4;
 8001178:	4b73      	ldr	r3, [pc, #460]	; (8001348 <rotateCurrentBlock+0x564>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f1a3 020c 	sub.w	r2, r3, #12
 8001180:	4b70      	ldr	r3, [pc, #448]	; (8001344 <rotateCurrentBlock+0x560>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4413      	add	r3, r2
 8001186:	425a      	negs	r2, r3
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	f002 0203 	and.w	r2, r2, #3
 8001190:	bf58      	it	pl
 8001192:	4253      	negpl	r3, r2
 8001194:	4a6c      	ldr	r2, [pc, #432]	; (8001348 <rotateCurrentBlock+0x564>)
 8001196:	6013      	str	r3, [r2, #0]
	    int (*rotBlock)[4] = block_L[blockIndex];
 8001198:	4b6b      	ldr	r3, [pc, #428]	; (8001348 <rotateCurrentBlock+0x564>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a6b      	ldr	r2, [pc, #428]	; (800134c <rotateCurrentBlock+0x568>)
 800119e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a2:	647b      	str	r3, [r7, #68]	; 0x44
	    if (!checkForCollisions(currentX, currentY, rotBlock)) {
 80011a4:	4b6a      	ldr	r3, [pc, #424]	; (8001350 <rotateCurrentBlock+0x56c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a6a      	ldr	r2, [pc, #424]	; (8001354 <rotateCurrentBlock+0x570>)
 80011aa:	6811      	ldr	r1, [r2, #0]
 80011ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fa8a 	bl	80006c8 <checkForCollisions>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d121      	bne.n	80011fe <rotateCurrentBlock+0x41a>
		    for (int i = 0; i < 4; i++) {
 80011ba:	2300      	movs	r3, #0
 80011bc:	677b      	str	r3, [r7, #116]	; 0x74
 80011be:	e01b      	b.n	80011f8 <rotateCurrentBlock+0x414>
			        for (int j = 0; j < 4; j++) {
 80011c0:	2300      	movs	r3, #0
 80011c2:	673b      	str	r3, [r7, #112]	; 0x70
 80011c4:	e012      	b.n	80011ec <rotateCurrentBlock+0x408>
			            tempBlock[i][j] = rotBlock[i][j];
 80011c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011c8:	011b      	lsls	r3, r3, #4
 80011ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80011cc:	4413      	add	r3, r2
 80011ce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80011d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011d6:	0099      	lsls	r1, r3, #2
 80011d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80011da:	440b      	add	r3, r1
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	33a8      	adds	r3, #168	; 0xa8
 80011e0:	443b      	add	r3, r7
 80011e2:	f843 2ca8 	str.w	r2, [r3, #-168]
			        for (int j = 0; j < 4; j++) {
 80011e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80011e8:	3301      	adds	r3, #1
 80011ea:	673b      	str	r3, [r7, #112]	; 0x70
 80011ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80011ee:	2b03      	cmp	r3, #3
 80011f0:	dde9      	ble.n	80011c6 <rotateCurrentBlock+0x3e2>
		    for (int i = 0; i < 4; i++) {
 80011f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011f4:	3301      	adds	r3, #1
 80011f6:	677b      	str	r3, [r7, #116]	; 0x74
 80011f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	dde0      	ble.n	80011c0 <rotateCurrentBlock+0x3dc>
			        }
			    }
	    }
	    for (int i = 0; i < 4; i++) {
 80011fe:	2300      	movs	r3, #0
 8001200:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001202:	e01b      	b.n	800123c <rotateCurrentBlock+0x458>
		        for (int j = 0; j < 4; j++) {
 8001204:	2300      	movs	r3, #0
 8001206:	66bb      	str	r3, [r7, #104]	; 0x68
 8001208:	e012      	b.n	8001230 <rotateCurrentBlock+0x44c>
		            currentBlock[i][j] = tempBlock[i][j];
 800120a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800120c:	009a      	lsls	r2, r3, #2
 800120e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001210:	4413      	add	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	33a8      	adds	r3, #168	; 0xa8
 8001216:	443b      	add	r3, r7
 8001218:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 800121c:	4848      	ldr	r0, [pc, #288]	; (8001340 <rotateCurrentBlock+0x55c>)
 800121e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001220:	0099      	lsls	r1, r3, #2
 8001222:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001224:	440b      	add	r3, r1
 8001226:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		        for (int j = 0; j < 4; j++) {
 800122a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800122c:	3301      	adds	r3, #1
 800122e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001230:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001232:	2b03      	cmp	r3, #3
 8001234:	dde9      	ble.n	800120a <rotateCurrentBlock+0x426>
	    for (int i = 0; i < 4; i++) {
 8001236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001238:	3301      	adds	r3, #1
 800123a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800123c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800123e:	2b03      	cmp	r3, #3
 8001240:	dde0      	ble.n	8001204 <rotateCurrentBlock+0x420>
		        }
		    }
	    currentRotation = nextRotation;
 8001242:	4a40      	ldr	r2, [pc, #256]	; (8001344 <rotateCurrentBlock+0x560>)
 8001244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001246:	6013      	str	r3, [r2, #0]
	    blockIndex += 12;
 8001248:	4b3f      	ldr	r3, [pc, #252]	; (8001348 <rotateCurrentBlock+0x564>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	330c      	adds	r3, #12
 800124e:	4a3e      	ldr	r2, [pc, #248]	; (8001348 <rotateCurrentBlock+0x564>)
 8001250:	6013      	str	r3, [r2, #0]
	}
	// Determine block type and perform rotation
	if (blockIndex >= 16 && blockIndex < 18) {
 8001252:	4b3d      	ldr	r3, [pc, #244]	; (8001348 <rotateCurrentBlock+0x564>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b0f      	cmp	r3, #15
 8001258:	dd6e      	ble.n	8001338 <rotateCurrentBlock+0x554>
 800125a:	4b3b      	ldr	r3, [pc, #236]	; (8001348 <rotateCurrentBlock+0x564>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b11      	cmp	r3, #17
 8001260:	dc6a      	bgt.n	8001338 <rotateCurrentBlock+0x554>
        // Rotate the block type I
		blockIndex = (blockIndex - 16 + currentRotation)%2;
 8001262:	4b39      	ldr	r3, [pc, #228]	; (8001348 <rotateCurrentBlock+0x564>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f1a3 0210 	sub.w	r2, r3, #16
 800126a:	4b36      	ldr	r3, [pc, #216]	; (8001344 <rotateCurrentBlock+0x560>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4413      	add	r3, r2
 8001270:	2b00      	cmp	r3, #0
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	bfb8      	it	lt
 8001278:	425b      	neglt	r3, r3
 800127a:	4a33      	ldr	r2, [pc, #204]	; (8001348 <rotateCurrentBlock+0x564>)
 800127c:	6013      	str	r3, [r2, #0]
		int (*rotBlock)[4] = block_I[blockIndex];
 800127e:	4b32      	ldr	r3, [pc, #200]	; (8001348 <rotateCurrentBlock+0x564>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a35      	ldr	r2, [pc, #212]	; (8001358 <rotateCurrentBlock+0x574>)
 8001284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001288:	643b      	str	r3, [r7, #64]	; 0x40
		if (!checkForCollisions(currentX, currentY, rotBlock)) {
 800128a:	4b31      	ldr	r3, [pc, #196]	; (8001350 <rotateCurrentBlock+0x56c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a31      	ldr	r2, [pc, #196]	; (8001354 <rotateCurrentBlock+0x570>)
 8001290:	6811      	ldr	r1, [r2, #0]
 8001292:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fa17 	bl	80006c8 <checkForCollisions>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d121      	bne.n	80012e4 <rotateCurrentBlock+0x500>
			for (int i = 0; i < 4; i++) {
 80012a0:	2300      	movs	r3, #0
 80012a2:	667b      	str	r3, [r7, #100]	; 0x64
 80012a4:	e01b      	b.n	80012de <rotateCurrentBlock+0x4fa>
			        for (int j = 0; j < 4; j++) {
 80012a6:	2300      	movs	r3, #0
 80012a8:	663b      	str	r3, [r7, #96]	; 0x60
 80012aa:	e012      	b.n	80012d2 <rotateCurrentBlock+0x4ee>
			            tempBlock[i][j] = rotBlock[i][j];
 80012ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012ae:	011b      	lsls	r3, r3, #4
 80012b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80012b2:	4413      	add	r3, r2
 80012b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80012ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012bc:	0099      	lsls	r1, r3, #2
 80012be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012c0:	440b      	add	r3, r1
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	33a8      	adds	r3, #168	; 0xa8
 80012c6:	443b      	add	r3, r7
 80012c8:	f843 2ca8 	str.w	r2, [r3, #-168]
			        for (int j = 0; j < 4; j++) {
 80012cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012ce:	3301      	adds	r3, #1
 80012d0:	663b      	str	r3, [r7, #96]	; 0x60
 80012d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	dde9      	ble.n	80012ac <rotateCurrentBlock+0x4c8>
			for (int i = 0; i < 4; i++) {
 80012d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012da:	3301      	adds	r3, #1
 80012dc:	667b      	str	r3, [r7, #100]	; 0x64
 80012de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012e0:	2b03      	cmp	r3, #3
 80012e2:	dde0      	ble.n	80012a6 <rotateCurrentBlock+0x4c2>
			        }
			    }
		}
		for (int i = 0; i < 4; i++) {
 80012e4:	2300      	movs	r3, #0
 80012e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012e8:	e01b      	b.n	8001322 <rotateCurrentBlock+0x53e>
		        for (int j = 0; j < 4; j++) {
 80012ea:	2300      	movs	r3, #0
 80012ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80012ee:	e012      	b.n	8001316 <rotateCurrentBlock+0x532>
		            currentBlock[i][j] = tempBlock[i][j];
 80012f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012f2:	009a      	lsls	r2, r3, #2
 80012f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012f6:	4413      	add	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	33a8      	adds	r3, #168	; 0xa8
 80012fc:	443b      	add	r3, r7
 80012fe:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 8001302:	480f      	ldr	r0, [pc, #60]	; (8001340 <rotateCurrentBlock+0x55c>)
 8001304:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001306:	0099      	lsls	r1, r3, #2
 8001308:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800130a:	440b      	add	r3, r1
 800130c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		        for (int j = 0; j < 4; j++) {
 8001310:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001312:	3301      	adds	r3, #1
 8001314:	65bb      	str	r3, [r7, #88]	; 0x58
 8001316:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001318:	2b03      	cmp	r3, #3
 800131a:	dde9      	ble.n	80012f0 <rotateCurrentBlock+0x50c>
		for (int i = 0; i < 4; i++) {
 800131c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800131e:	3301      	adds	r3, #1
 8001320:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001324:	2b03      	cmp	r3, #3
 8001326:	dde0      	ble.n	80012ea <rotateCurrentBlock+0x506>
		        }
		    }
		currentRotation = nextRotation;
 8001328:	4a06      	ldr	r2, [pc, #24]	; (8001344 <rotateCurrentBlock+0x560>)
 800132a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800132c:	6013      	str	r3, [r2, #0]
		blockIndex += 16;
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <rotateCurrentBlock+0x564>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	3310      	adds	r3, #16
 8001334:	4a04      	ldr	r2, [pc, #16]	; (8001348 <rotateCurrentBlock+0x564>)
 8001336:	6013      	str	r3, [r2, #0]
		}
}
 8001338:	bf00      	nop
 800133a:	37a8      	adds	r7, #168	; 0xa8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000b4c 	.word	0x20000b4c
 8001344:	20000018 	.word	0x20000018
 8001348:	20000bcc 	.word	0x20000bcc
 800134c:	2000055c 	.word	0x2000055c
 8001350:	20000010 	.word	0x20000010
 8001354:	20000014 	.word	0x20000014
 8001358:	2000056c 	.word	0x2000056c

0800135c <EXTI3_IRQHandler>:
 * @brief  Interrupt Service Routine for handling Button B2 to move left.
 * @param  None
 * @retval None
 */
void EXTI3_IRQHandler(void)//Button B2 for go left
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	// Check if moving left is within the boundary
	if(EXTI_GetFlagStatus(EXTI_Line3) == SET)
 8001360:	2008      	movs	r0, #8
 8001362:	f000 fae5 	bl	8001930 <EXTI_GetFlagStatus>
 8001366:	4603      	mov	r3, r0
 8001368:	2b01      	cmp	r3, #1
 800136a:	d10f      	bne.n	800138c <EXTI3_IRQHandler+0x30>
	{
		if (x_axis + minx >= size) {
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <EXTI3_IRQHandler+0x3c>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <EXTI3_IRQHandler+0x40>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	441a      	add	r2, r3
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <EXTI3_IRQHandler+0x44>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	429a      	cmp	r2, r3
 800137c:	db06      	blt.n	800138c <EXTI3_IRQHandler+0x30>
			x_axis -= size;
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <EXTI3_IRQHandler+0x3c>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <EXTI3_IRQHandler+0x44>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	4a03      	ldr	r2, [pc, #12]	; (8001398 <EXTI3_IRQHandler+0x3c>)
 800138a:	6013      	str	r3, [r2, #0]
		}
	}
	// Clear the EXTI line 3 pending bit
	EXTI_ClearITPendingBit(EXTI_Line3);
 800138c:	2008      	movs	r0, #8
 800138e:	f000 fae9 	bl	8001964 <EXTI_ClearITPendingBit>
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000000 	.word	0x20000000
 800139c:	20000bd8 	.word	0x20000bd8
 80013a0:	2000000c 	.word	0x2000000c

080013a4 <EXTI0_IRQHandler>:
 * @func   EXTI0_IRQHandler
 * @brief  Interrupt Service Routine for handling Button B4 to move right.
 * @param  None
 * @retval None
 */
void EXTI0_IRQHandler(void) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
    if (EXTI_GetFlagStatus(EXTI_Line0) == SET) {
 80013a8:	2001      	movs	r0, #1
 80013aa:	f000 fac1 	bl	8001930 <EXTI_GetFlagStatus>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d114      	bne.n	80013de <EXTI0_IRQHandler+0x3a>
        // Check if moving right is within the boundary
        if (x_axis + maxx <= (SCREEN_WIDTH - 1) * size) {
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <EXTI0_IRQHandler+0x44>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <EXTI0_IRQHandler+0x48>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	18d1      	adds	r1, r2, r3
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <EXTI0_IRQHandler+0x4c>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	4299      	cmp	r1, r3
 80013ce:	dc06      	bgt.n	80013de <EXTI0_IRQHandler+0x3a>
            x_axis += size;
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <EXTI0_IRQHandler+0x44>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <EXTI0_IRQHandler+0x4c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4413      	add	r3, r2
 80013da:	4a03      	ldr	r2, [pc, #12]	; (80013e8 <EXTI0_IRQHandler+0x44>)
 80013dc:	6013      	str	r3, [r2, #0]
        }
    }
    // Clear the EXTI line 0 pending bit
    EXTI_ClearITPendingBit(EXTI_Line0);
 80013de:	2001      	movs	r0, #1
 80013e0:	f000 fac0 	bl	8001964 <EXTI_ClearITPendingBit>
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000000 	.word	0x20000000
 80013ec:	20000bd4 	.word	0x20000bd4
 80013f0:	2000000c 	.word	0x2000000c

080013f4 <EXTI4_IRQHandler>:
 * @func   EXTI4_IRQHandler
 * @brief  Interrupt Service Routine for handling Button B3 to start the game.
 * @param  None
 * @retval None
 */
void EXTI4_IRQHandler(void) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
    if (EXTI_GetFlagStatus(EXTI_Line4) == SET) {
 80013f8:	2010      	movs	r0, #16
 80013fa:	f000 fa99 	bl	8001930 <EXTI_GetFlagStatus>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b01      	cmp	r3, #1
 8001402:	d104      	bne.n	800140e <EXTI4_IRQHandler+0x1a>
        // Start the falling block timer when Button B3 is pressed
        startFallingBlockTimer(block);
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <EXTI4_IRQHandler+0x24>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fc55 	bl	8000cb8 <startFallingBlockTimer>
    }
    // Clear the EXTI line 4 pending bit
    EXTI_ClearITPendingBit(EXTI_Line4);
 800140e:	2010      	movs	r0, #16
 8001410:	f000 faa8 	bl	8001964 <EXTI_ClearITPendingBit>
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	2000001c 	.word	0x2000001c

0800141c <EXTI9_5_IRQHandler>:
 * @func   EXTI5_IRQHandler
 * @brief  Interrupt Service Routine for handling Button B1 to rotate the current block.
 * @param  None
 * @retval None
 */
void EXTI9_5_IRQHandler(void) {
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
    if (EXTI_GetFlagStatus(EXTI_Line5) == SET) {
 8001420:	2020      	movs	r0, #32
 8001422:	f000 fa85 	bl	8001930 <EXTI_GetFlagStatus>
 8001426:	4603      	mov	r3, r0
 8001428:	2b01      	cmp	r3, #1
 800142a:	d101      	bne.n	8001430 <EXTI9_5_IRQHandler+0x14>
        // Rotate the current block when Button B1 is pressed
    	rotateCurrentBlock();
 800142c:	f7ff fcda 	bl	8000de4 <rotateCurrentBlock>
    }
    // Clear the EXTI line 5 pending bit
    EXTI_ClearITPendingBit(EXTI_Line5);
 8001430:	2020      	movs	r0, #32
 8001432:	f000 fa97 	bl	8001964 <EXTI_ClearITPendingBit>
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <initializeApplication>:
 * @func   initializeApplication
 * @brief  Common initialization routine for the application.
 * @param  None
 * @retval None
 */
static void initializeApplication(void){
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af02      	add	r7, sp, #8
	// Update the system core clock
    SystemCoreClockUpdate();
 8001442:	f000 f8d5 	bl	80015f0 <SystemCoreClockUpdate>

    // Initialize timers
    TimerInit();
 8001446:	f000 fcd9 	bl	8001dfc <TimerInit>

    // Initialize the current block
    initializeCurrentBlock();
 800144a:	f7ff f881 	bl	8000550 <initializeCurrentBlock>

    // Initialize the light sensor in DMA mode
    LightSensor_Init(ADC_READ_MODE_DMA);
 800144e:	2000      	movs	r0, #0
 8001450:	f000 fea0 	bl	8002194 <LightSensor_Init>

    // Initialize interrupts for buttons B1, B2, B3, and B4
    initB1ButtonInterrupt();
 8001454:	f7fe ff14 	bl	8000280 <initB1ButtonInterrupt>
    initB2ButtonInterrupt();
 8001458:	f7fe ff50 	bl	80002fc <initB2ButtonInterrupt>
    initB4ButtonInterrupt();
 800145c:	f7fe ffca 	bl	80003f4 <initB4ButtonInterrupt>
    initB3ButtonInterrupt();
 8001460:	f7fe ff8a 	bl	8000378 <initB3ButtonInterrupt>

    // Begin the initialization of the LCD using the Ucglib4WireSWSPI library
    Ucglib4WireSWSPI_begin(&ucg, UCG_FONT_MODE_SOLID);
 8001464:	2100      	movs	r1, #0
 8001466:	4810      	ldr	r0, [pc, #64]	; (80014a8 <initializeApplication+0x6c>)
 8001468:	f001 f8e2 	bl	8002630 <Ucglib4WireSWSPI_begin>

    // Clear the screen
    ucg_ClearScreen(&ucg);
 800146c:	480e      	ldr	r0, [pc, #56]	; (80014a8 <initializeApplication+0x6c>)
 800146e:	f001 f926 	bl	80026be <ucg_ClearScreen>

    // Set the font and color for the LCD
    ucg_SetFont(&ucg, ucg_font_ncenR08_hr);
 8001472:	490e      	ldr	r1, [pc, #56]	; (80014ac <initializeApplication+0x70>)
 8001474:	480c      	ldr	r0, [pc, #48]	; (80014a8 <initializeApplication+0x6c>)
 8001476:	f002 fa89 	bl	800398c <ucg_SetFont>
    ucg_SetColor(&ucg, 0, 255, 255, 255);
 800147a:	23ff      	movs	r3, #255	; 0xff
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	23ff      	movs	r3, #255	; 0xff
 8001480:	22ff      	movs	r2, #255	; 0xff
 8001482:	2100      	movs	r1, #0
 8001484:	4808      	ldr	r0, [pc, #32]	; (80014a8 <initializeApplication+0x6c>)
 8001486:	f002 fb7f 	bl	8003b88 <ucg_SetColor>
    ucg_SetColor(&ucg, 1, 0, 0, 0);
 800148a:	2300      	movs	r3, #0
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	2300      	movs	r3, #0
 8001490:	2200      	movs	r2, #0
 8001492:	2101      	movs	r1, #1
 8001494:	4804      	ldr	r0, [pc, #16]	; (80014a8 <initializeApplication+0x6c>)
 8001496:	f002 fb77 	bl	8003b88 <ucg_SetColor>

    // Rotate the display 180 degrees
    ucg_SetRotate180(&ucg);
 800149a:	4803      	ldr	r0, [pc, #12]	; (80014a8 <initializeApplication+0x6c>)
 800149c:	f002 fc6e 	bl	8003d7c <ucg_SetRotate180>
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000608 	.word	0x20000608
 80014ac:	08005c64 	.word	0x08005c64

080014b0 <main>:

int main(void) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
    // Initialize the application
    initializeApplication();
 80014b4:	f7ff ffc2 	bl	800143c <initializeApplication>

    // Load configuration settings
    loadConfiguration();
 80014b8:	f7fe fff6 	bl	80004a8 <loadConfiguration>

    // Main application loop
    while (1) {
        // Process the timer scheduler
        processTimerScheduler();
 80014bc:	f000 fd7e 	bl	8001fbc <processTimerScheduler>
 80014c0:	e7fc      	b.n	80014bc <main+0xc>
	...

080014c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014cc:	4a14      	ldr	r2, [pc, #80]	; (8001520 <_sbrk+0x5c>)
 80014ce:	4b15      	ldr	r3, [pc, #84]	; (8001524 <_sbrk+0x60>)
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d8:	4b13      	ldr	r3, [pc, #76]	; (8001528 <_sbrk+0x64>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d102      	bne.n	80014e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <_sbrk+0x64>)
 80014e2:	4a12      	ldr	r2, [pc, #72]	; (800152c <_sbrk+0x68>)
 80014e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <_sbrk+0x64>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d207      	bcs.n	8001504 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f4:	f003 fe9c 	bl	8005230 <__errno>
 80014f8:	4603      	mov	r3, r0
 80014fa:	220c      	movs	r2, #12
 80014fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001502:	e009      	b.n	8001518 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001504:	4b08      	ldr	r3, [pc, #32]	; (8001528 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800150a:	4b07      	ldr	r3, [pc, #28]	; (8001528 <_sbrk+0x64>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	4a05      	ldr	r2, [pc, #20]	; (8001528 <_sbrk+0x64>)
 8001514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001516:	68fb      	ldr	r3, [r7, #12]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20018000 	.word	0x20018000
 8001524:	00000400 	.word	0x00000400
 8001528:	20000bdc 	.word	0x20000bdc
 800152c:	20001ed8 	.word	0x20001ed8

08001530 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001530:	480d      	ldr	r0, [pc, #52]	; (8001568 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001532:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001534:	f000 f826 	bl	8001584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001538:	480c      	ldr	r0, [pc, #48]	; (800156c <LoopForever+0x6>)
  ldr r1, =_edata
 800153a:	490d      	ldr	r1, [pc, #52]	; (8001570 <LoopForever+0xa>)
  ldr r2, =_sidata
 800153c:	4a0d      	ldr	r2, [pc, #52]	; (8001574 <LoopForever+0xe>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001540:	e002      	b.n	8001548 <LoopCopyDataInit>

08001542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001546:	3304      	adds	r3, #4

08001548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800154c:	d3f9      	bcc.n	8001542 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154e:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001550:	4c0a      	ldr	r4, [pc, #40]	; (800157c <LoopForever+0x16>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001554:	e001      	b.n	800155a <LoopFillZerobss>

08001556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001558:	3204      	adds	r2, #4

0800155a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800155c:	d3fb      	bcc.n	8001556 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800155e:	f003 fe6d 	bl	800523c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001562:	f7ff ffa5 	bl	80014b0 <main>

08001566 <LoopForever>:

LoopForever:
  b LoopForever
 8001566:	e7fe      	b.n	8001566 <LoopForever>
  ldr   r0, =_estack
 8001568:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800156c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001570:	200005ec 	.word	0x200005ec
  ldr r2, =_sidata
 8001574:	0800619c 	.word	0x0800619c
  ldr r2, =_sbss
 8001578:	200005ec 	.word	0x200005ec
  ldr r4, =_ebss
 800157c:	20001ed8 	.word	0x20001ed8

08001580 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001580:	e7fe      	b.n	8001580 <ADC_IRQHandler>
	...

08001584 <SystemInit>:
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
 8001588:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <SystemInit+0x60>)
 800158a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800158e:	4a15      	ldr	r2, [pc, #84]	; (80015e4 <SystemInit+0x60>)
 8001590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <SystemInit+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <SystemInit+0x64>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <SystemInit+0x64>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <SystemInit+0x64>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <SystemInit+0x64>)
 80015b0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80015b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <SystemInit+0x64>)
 80015bc:	4a0b      	ldr	r2, [pc, #44]	; (80015ec <SystemInit+0x68>)
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <SystemInit+0x64>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a08      	ldr	r2, [pc, #32]	; (80015e8 <SystemInit+0x64>)
 80015c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <SystemInit+0x64>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	f000 f889 	bl	80016e8 <SetSysClock>
 80015d6:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <SystemInit+0x60>)
 80015d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	e000ed00 	.word	0xe000ed00
 80015e8:	40023800 	.word	0x40023800
 80015ec:	24003010 	.word	0x24003010

080015f0 <SystemCoreClockUpdate>:
 80015f0:	b480      	push	{r7}
 80015f2:	b087      	sub	sp, #28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	2302      	movs	r3, #2
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	2302      	movs	r3, #2
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	4b32      	ldr	r3, [pc, #200]	; (80016d4 <SystemCoreClockUpdate+0xe4>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 030c 	and.w	r3, r3, #12
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	2b04      	cmp	r3, #4
 8001618:	d007      	beq.n	800162a <SystemCoreClockUpdate+0x3a>
 800161a:	2b08      	cmp	r3, #8
 800161c:	d009      	beq.n	8001632 <SystemCoreClockUpdate+0x42>
 800161e:	2b00      	cmp	r3, #0
 8001620:	d13d      	bne.n	800169e <SystemCoreClockUpdate+0xae>
 8001622:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <SystemCoreClockUpdate+0xe8>)
 8001624:	4a2d      	ldr	r2, [pc, #180]	; (80016dc <SystemCoreClockUpdate+0xec>)
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	e03d      	b.n	80016a6 <SystemCoreClockUpdate+0xb6>
 800162a:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <SystemCoreClockUpdate+0xe8>)
 800162c:	4a2c      	ldr	r2, [pc, #176]	; (80016e0 <SystemCoreClockUpdate+0xf0>)
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	e039      	b.n	80016a6 <SystemCoreClockUpdate+0xb6>
 8001632:	4b28      	ldr	r3, [pc, #160]	; (80016d4 <SystemCoreClockUpdate+0xe4>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	0d9b      	lsrs	r3, r3, #22
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	4b25      	ldr	r3, [pc, #148]	; (80016d4 <SystemCoreClockUpdate+0xe4>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00c      	beq.n	8001668 <SystemCoreClockUpdate+0x78>
 800164e:	4a24      	ldr	r2, [pc, #144]	; (80016e0 <SystemCoreClockUpdate+0xf0>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	fbb2 f3f3 	udiv	r3, r2, r3
 8001656:	4a1f      	ldr	r2, [pc, #124]	; (80016d4 <SystemCoreClockUpdate+0xe4>)
 8001658:	6852      	ldr	r2, [r2, #4]
 800165a:	0992      	lsrs	r2, r2, #6
 800165c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001660:	fb02 f303 	mul.w	r3, r2, r3
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	e00b      	b.n	8001680 <SystemCoreClockUpdate+0x90>
 8001668:	4a1c      	ldr	r2, [pc, #112]	; (80016dc <SystemCoreClockUpdate+0xec>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001670:	4a18      	ldr	r2, [pc, #96]	; (80016d4 <SystemCoreClockUpdate+0xe4>)
 8001672:	6852      	ldr	r2, [r2, #4]
 8001674:	0992      	lsrs	r2, r2, #6
 8001676:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800167a:	fb02 f303 	mul.w	r3, r2, r3
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <SystemCoreClockUpdate+0xe4>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	0c1b      	lsrs	r3, r3, #16
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	3301      	adds	r3, #1
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	fbb2 f3f3 	udiv	r3, r2, r3
 8001698:	4a0f      	ldr	r2, [pc, #60]	; (80016d8 <SystemCoreClockUpdate+0xe8>)
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	e003      	b.n	80016a6 <SystemCoreClockUpdate+0xb6>
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <SystemCoreClockUpdate+0xe8>)
 80016a0:	4a0e      	ldr	r2, [pc, #56]	; (80016dc <SystemCoreClockUpdate+0xec>)
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	bf00      	nop
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <SystemCoreClockUpdate+0xe4>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	091b      	lsrs	r3, r3, #4
 80016ac:	f003 030f 	and.w	r3, r3, #15
 80016b0:	4a0c      	ldr	r2, [pc, #48]	; (80016e4 <SystemCoreClockUpdate+0xf4>)
 80016b2:	5cd3      	ldrb	r3, [r2, r3]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <SystemCoreClockUpdate+0xe8>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	fa22 f303 	lsr.w	r3, r2, r3
 80016c2:	4a05      	ldr	r2, [pc, #20]	; (80016d8 <SystemCoreClockUpdate+0xe8>)
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	bf00      	nop
 80016c8:	371c      	adds	r7, #28
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	40023800 	.word	0x40023800
 80016d8:	20000574 	.word	0x20000574
 80016dc:	00f42400 	.word	0x00f42400
 80016e0:	017d7840 	.word	0x017d7840
 80016e4:	20000578 	.word	0x20000578

080016e8 <SetSysClock>:
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	4b22      	ldr	r3, [pc, #136]	; (8001778 <SetSysClock+0x90>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	4a21      	ldr	r2, [pc, #132]	; (8001778 <SetSysClock+0x90>)
 80016f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f6:	6413      	str	r3, [r2, #64]	; 0x40
 80016f8:	4b20      	ldr	r3, [pc, #128]	; (800177c <SetSysClock+0x94>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a1f      	ldr	r2, [pc, #124]	; (800177c <SetSysClock+0x94>)
 80016fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <SetSysClock+0x90>)
 8001706:	4a1c      	ldr	r2, [pc, #112]	; (8001778 <SetSysClock+0x90>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	6093      	str	r3, [r2, #8]
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <SetSysClock+0x90>)
 800170e:	4a1a      	ldr	r2, [pc, #104]	; (8001778 <SetSysClock+0x90>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	6093      	str	r3, [r2, #8]
 8001714:	4b18      	ldr	r3, [pc, #96]	; (8001778 <SetSysClock+0x90>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	4a17      	ldr	r2, [pc, #92]	; (8001778 <SetSysClock+0x90>)
 800171a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800171e:	6093      	str	r3, [r2, #8]
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <SetSysClock+0x90>)
 8001722:	4a17      	ldr	r2, [pc, #92]	; (8001780 <SetSysClock+0x98>)
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <SetSysClock+0x90>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a13      	ldr	r2, [pc, #76]	; (8001778 <SetSysClock+0x90>)
 800172c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	bf00      	nop
 8001734:	4b10      	ldr	r3, [pc, #64]	; (8001778 <SetSysClock+0x90>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f9      	beq.n	8001734 <SetSysClock+0x4c>
 8001740:	4b10      	ldr	r3, [pc, #64]	; (8001784 <SetSysClock+0x9c>)
 8001742:	f240 6202 	movw	r2, #1538	; 0x602
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <SetSysClock+0x90>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <SetSysClock+0x90>)
 800174e:	f023 0303 	bic.w	r3, r3, #3
 8001752:	6093      	str	r3, [r2, #8]
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <SetSysClock+0x90>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	4a07      	ldr	r2, [pc, #28]	; (8001778 <SetSysClock+0x90>)
 800175a:	f043 0302 	orr.w	r3, r3, #2
 800175e:	6093      	str	r3, [r2, #8]
 8001760:	bf00      	nop
 8001762:	4b05      	ldr	r3, [pc, #20]	; (8001778 <SetSysClock+0x90>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	2b08      	cmp	r3, #8
 800176c:	d1f9      	bne.n	8001762 <SetSysClock+0x7a>
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	40023800 	.word	0x40023800
 800177c:	40007000 	.word	0x40007000
 8001780:	08015410 	.word	0x08015410
 8001784:	40023c00 	.word	0x40023c00

08001788 <NVIC_Init>:
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	2300      	movs	r3, #0
 8001792:	73fb      	strb	r3, [r7, #15]
 8001794:	2300      	movs	r3, #0
 8001796:	73bb      	strb	r3, [r7, #14]
 8001798:	230f      	movs	r3, #15
 800179a:	737b      	strb	r3, [r7, #13]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	78db      	ldrb	r3, [r3, #3]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d039      	beq.n	8001818 <NVIC_Init+0x90>
 80017a4:	4b27      	ldr	r3, [pc, #156]	; (8001844 <NVIC_Init+0xbc>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	43db      	mvns	r3, r3
 80017aa:	0a1b      	lsrs	r3, r3, #8
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	73fb      	strb	r3, [r7, #15]
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	f1c3 0304 	rsb	r3, r3, #4
 80017ba:	73bb      	strb	r3, [r7, #14]
 80017bc:	7b7a      	ldrb	r2, [r7, #13]
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	fa42 f303 	asr.w	r3, r2, r3
 80017c4:	737b      	strb	r3, [r7, #13]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	785b      	ldrb	r3, [r3, #1]
 80017ca:	461a      	mov	r2, r3
 80017cc:	7bbb      	ldrb	r3, [r7, #14]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	73fb      	strb	r3, [r7, #15]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	789a      	ldrb	r2, [r3, #2]
 80017d8:	7b7b      	ldrb	r3, [r7, #13]
 80017da:	4013      	ands	r3, r2
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	7bfb      	ldrb	r3, [r7, #15]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	73fb      	strb	r3, [r7, #15]
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	011b      	lsls	r3, r3, #4
 80017e8:	73fb      	strb	r3, [r7, #15]
 80017ea:	4a17      	ldr	r2, [pc, #92]	; (8001848 <NVIC_Init+0xc0>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4413      	add	r3, r2
 80017f2:	7bfa      	ldrb	r2, [r7, #15]
 80017f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	f003 031f 	and.w	r3, r3, #31
 8001800:	4911      	ldr	r1, [pc, #68]	; (8001848 <NVIC_Init+0xc0>)
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	7812      	ldrb	r2, [r2, #0]
 8001806:	0952      	lsrs	r2, r2, #5
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	4610      	mov	r0, r2
 800180c:	2201      	movs	r2, #1
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
 8001816:	e00f      	b.n	8001838 <NVIC_Init+0xb0>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	f003 031f 	and.w	r3, r3, #31
 8001820:	4909      	ldr	r1, [pc, #36]	; (8001848 <NVIC_Init+0xc0>)
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	7812      	ldrb	r2, [r2, #0]
 8001826:	0952      	lsrs	r2, r2, #5
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	4610      	mov	r0, r2
 800182c:	2201      	movs	r2, #1
 800182e:	409a      	lsls	r2, r3
 8001830:	f100 0320 	add.w	r3, r0, #32
 8001834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001838:	bf00      	nop
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000ed00 	.word	0xe000ed00
 8001848:	e000e100 	.word	0xe000e100

0800184c <EXTI_Init>:
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	4b34      	ldr	r3, [pc, #208]	; (800192c <EXTI_Init+0xe0>)
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	799b      	ldrb	r3, [r3, #6]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d04f      	beq.n	8001904 <EXTI_Init+0xb8>
 8001864:	4b31      	ldr	r3, [pc, #196]	; (800192c <EXTI_Init+0xe0>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	43db      	mvns	r3, r3
 800186e:	492f      	ldr	r1, [pc, #188]	; (800192c <EXTI_Init+0xe0>)
 8001870:	4013      	ands	r3, r2
 8001872:	600b      	str	r3, [r1, #0]
 8001874:	4b2d      	ldr	r3, [pc, #180]	; (800192c <EXTI_Init+0xe0>)
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	43db      	mvns	r3, r3
 800187e:	492b      	ldr	r1, [pc, #172]	; (800192c <EXTI_Init+0xe0>)
 8001880:	4013      	ands	r3, r2
 8001882:	604b      	str	r3, [r1, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	791b      	ldrb	r3, [r3, #4]
 8001888:	461a      	mov	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4413      	add	r3, r2
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6819      	ldr	r1, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	430a      	orrs	r2, r1
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	4b23      	ldr	r3, [pc, #140]	; (800192c <EXTI_Init+0xe0>)
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	4920      	ldr	r1, [pc, #128]	; (800192c <EXTI_Init+0xe0>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	608b      	str	r3, [r1, #8]
 80018ae:	4b1f      	ldr	r3, [pc, #124]	; (800192c <EXTI_Init+0xe0>)
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	491c      	ldr	r1, [pc, #112]	; (800192c <EXTI_Init+0xe0>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	60cb      	str	r3, [r1, #12]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	795b      	ldrb	r3, [r3, #5]
 80018c2:	2b10      	cmp	r3, #16
 80018c4:	d10e      	bne.n	80018e4 <EXTI_Init+0x98>
 80018c6:	4b19      	ldr	r3, [pc, #100]	; (800192c <EXTI_Init+0xe0>)
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4917      	ldr	r1, [pc, #92]	; (800192c <EXTI_Init+0xe0>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	608b      	str	r3, [r1, #8]
 80018d4:	4b15      	ldr	r3, [pc, #84]	; (800192c <EXTI_Init+0xe0>)
 80018d6:	68da      	ldr	r2, [r3, #12]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4913      	ldr	r1, [pc, #76]	; (800192c <EXTI_Init+0xe0>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	60cb      	str	r3, [r1, #12]
 80018e2:	e01d      	b.n	8001920 <EXTI_Init+0xd4>
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <EXTI_Init+0xe0>)
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	795b      	ldrb	r3, [r3, #5]
 80018ec:	461a      	mov	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4413      	add	r3, r2
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6819      	ldr	r1, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	430a      	orrs	r2, r1
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	e00d      	b.n	8001920 <EXTI_Init+0xd4>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	791b      	ldrb	r3, [r3, #4]
 8001908:	461a      	mov	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4413      	add	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6819      	ldr	r1, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	43da      	mvns	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	400a      	ands	r2, r1
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	bf00      	nop
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	40013c00 	.word	0x40013c00

08001930 <EXTI_GetFlagStatus>:
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	2300      	movs	r3, #0
 800193a:	73fb      	strb	r3, [r7, #15]
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <EXTI_GetFlagStatus+0x30>)
 800193e:	695a      	ldr	r2, [r3, #20]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4013      	ands	r3, r2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d002      	beq.n	800194e <EXTI_GetFlagStatus+0x1e>
 8001948:	2301      	movs	r3, #1
 800194a:	73fb      	strb	r3, [r7, #15]
 800194c:	e001      	b.n	8001952 <EXTI_GetFlagStatus+0x22>
 800194e:	2300      	movs	r3, #0
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	4618      	mov	r0, r3
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	40013c00 	.word	0x40013c00

08001964 <EXTI_ClearITPendingBit>:
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	4a04      	ldr	r2, [pc, #16]	; (8001980 <EXTI_ClearITPendingBit+0x1c>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6153      	str	r3, [r2, #20]
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40013c00 	.word	0x40013c00

08001984 <GPIO_Init>:
 8001984:	b480      	push	{r7}
 8001986:	b087      	sub	sp, #28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	e076      	b.n	8001a8e <GPIO_Init+0x10a>
 80019a0:	2201      	movs	r2, #1
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4013      	ands	r3, r2
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d165      	bne.n	8001a88 <GPIO_Init+0x104>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	2103      	movs	r1, #3
 80019c6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	401a      	ands	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	791b      	ldrb	r3, [r3, #4]
 80019da:	4619      	mov	r1, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	fa01 f303 	lsl.w	r3, r1, r3
 80019e4:	431a      	orrs	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	791b      	ldrb	r3, [r3, #4]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d003      	beq.n	80019fa <GPIO_Init+0x76>
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	791b      	ldrb	r3, [r3, #4]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d12e      	bne.n	8001a58 <GPIO_Init+0xd4>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	2103      	movs	r1, #3
 8001a04:	fa01 f303 	lsl.w	r3, r1, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	795b      	ldrb	r3, [r3, #5]
 8001a18:	4619      	mov	r1, r3
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	4619      	mov	r1, r3
 8001a32:	2301      	movs	r3, #1
 8001a34:	408b      	lsls	r3, r1
 8001a36:	43db      	mvns	r3, r3
 8001a38:	401a      	ands	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	7992      	ldrb	r2, [r2, #6]
 8001a46:	4611      	mov	r1, r2
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	b292      	uxth	r2, r2
 8001a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a50:	b292      	uxth	r2, r2
 8001a52:	431a      	orrs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	2103      	movs	r1, #3
 8001a64:	fa01 f303 	lsl.w	r3, r1, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	60da      	str	r2, [r3, #12]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68da      	ldr	r2, [r3, #12]
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	79db      	ldrb	r3, [r3, #7]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	60da      	str	r2, [r3, #12]
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	2b0f      	cmp	r3, #15
 8001a92:	d985      	bls.n	80019a0 <GPIO_Init+0x1c>
 8001a94:	bf00      	nop
 8001a96:	371c      	adds	r7, #28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <GPIO_WriteBit>:
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	807b      	strh	r3, [r7, #2]
 8001aac:	4613      	mov	r3, r2
 8001aae:	707b      	strb	r3, [r7, #1]
 8001ab0:	787b      	ldrb	r3, [r7, #1]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <GPIO_WriteBit+0x1e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	887a      	ldrh	r2, [r7, #2]
 8001aba:	831a      	strh	r2, [r3, #24]
 8001abc:	e002      	b.n	8001ac4 <GPIO_WriteBit+0x24>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	887a      	ldrh	r2, [r7, #2]
 8001ac2:	835a      	strh	r2, [r3, #26]
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <RCC_GetClocksFreq>:
 8001ad0:	b480      	push	{r7}
 8001ad2:	b089      	sub	sp, #36	; 0x24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61bb      	str	r3, [r7, #24]
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61fb      	str	r3, [r7, #28]
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	2302      	movs	r3, #2
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	4b47      	ldr	r3, [pc, #284]	; (8001c10 <RCC_GetClocksFreq+0x140>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	61bb      	str	r3, [r7, #24]
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d007      	beq.n	8001b10 <RCC_GetClocksFreq+0x40>
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d009      	beq.n	8001b18 <RCC_GetClocksFreq+0x48>
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d13d      	bne.n	8001b84 <RCC_GetClocksFreq+0xb4>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a42      	ldr	r2, [pc, #264]	; (8001c14 <RCC_GetClocksFreq+0x144>)
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	e03d      	b.n	8001b8c <RCC_GetClocksFreq+0xbc>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a41      	ldr	r2, [pc, #260]	; (8001c18 <RCC_GetClocksFreq+0x148>)
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	e039      	b.n	8001b8c <RCC_GetClocksFreq+0xbc>
 8001b18:	4b3d      	ldr	r3, [pc, #244]	; (8001c10 <RCC_GetClocksFreq+0x140>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	0d9b      	lsrs	r3, r3, #22
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	4b3a      	ldr	r3, [pc, #232]	; (8001c10 <RCC_GetClocksFreq+0x140>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00c      	beq.n	8001b4e <RCC_GetClocksFreq+0x7e>
 8001b34:	4a38      	ldr	r2, [pc, #224]	; (8001c18 <RCC_GetClocksFreq+0x148>)
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3c:	4a34      	ldr	r2, [pc, #208]	; (8001c10 <RCC_GetClocksFreq+0x140>)
 8001b3e:	6852      	ldr	r2, [r2, #4]
 8001b40:	0992      	lsrs	r2, r2, #6
 8001b42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b46:	fb02 f303 	mul.w	r3, r2, r3
 8001b4a:	61fb      	str	r3, [r7, #28]
 8001b4c:	e00b      	b.n	8001b66 <RCC_GetClocksFreq+0x96>
 8001b4e:	4a31      	ldr	r2, [pc, #196]	; (8001c14 <RCC_GetClocksFreq+0x144>)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b56:	4a2e      	ldr	r2, [pc, #184]	; (8001c10 <RCC_GetClocksFreq+0x140>)
 8001b58:	6852      	ldr	r2, [r2, #4]
 8001b5a:	0992      	lsrs	r2, r2, #6
 8001b5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b60:	fb02 f303 	mul.w	r3, r2, r3
 8001b64:	61fb      	str	r3, [r7, #28]
 8001b66:	4b2a      	ldr	r3, [pc, #168]	; (8001c10 <RCC_GetClocksFreq+0x140>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	0c1b      	lsrs	r3, r3, #16
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	3301      	adds	r3, #1
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	69fa      	ldr	r2, [r7, #28]
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	e003      	b.n	8001b8c <RCC_GetClocksFreq+0xbc>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a23      	ldr	r2, [pc, #140]	; (8001c14 <RCC_GetClocksFreq+0x144>)
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	bf00      	nop
 8001b8c:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <RCC_GetClocksFreq+0x140>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b94:	61bb      	str	r3, [r7, #24]
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	61bb      	str	r3, [r7, #24]
 8001b9c:	4a1f      	ldr	r2, [pc, #124]	; (8001c1c <RCC_GetClocksFreq+0x14c>)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	40da      	lsrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <RCC_GetClocksFreq+0x140>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001bbc:	61bb      	str	r3, [r7, #24]
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	0a9b      	lsrs	r3, r3, #10
 8001bc2:	61bb      	str	r3, [r7, #24]
 8001bc4:	4a15      	ldr	r2, [pc, #84]	; (8001c1c <RCC_GetClocksFreq+0x14c>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	4413      	add	r3, r2
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	40da      	lsrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <RCC_GetClocksFreq+0x140>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001be4:	61bb      	str	r3, [r7, #24]
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	0b5b      	lsrs	r3, r3, #13
 8001bea:	61bb      	str	r3, [r7, #24]
 8001bec:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <RCC_GetClocksFreq+0x14c>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	40da      	lsrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	60da      	str	r2, [r3, #12]
 8001c04:	bf00      	nop
 8001c06:	3724      	adds	r7, #36	; 0x24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	40023800 	.word	0x40023800
 8001c14:	00f42400 	.word	0x00f42400
 8001c18:	017d7840 	.word	0x017d7840
 8001c1c:	20000588 	.word	0x20000588

08001c20 <RCC_AHB1PeriphClockCmd>:
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	70fb      	strb	r3, [r7, #3]
 8001c2c:	78fb      	ldrb	r3, [r7, #3]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d006      	beq.n	8001c40 <RCC_AHB1PeriphClockCmd+0x20>
 8001c32:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001c34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c36:	4909      	ldr	r1, [pc, #36]	; (8001c5c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	630b      	str	r3, [r1, #48]	; 0x30
 8001c3e:	e006      	b.n	8001c4e <RCC_AHB1PeriphClockCmd+0x2e>
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001c42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	4904      	ldr	r1, [pc, #16]	; (8001c5c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	630b      	str	r3, [r1, #48]	; 0x30
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800

08001c60 <RCC_APB2PeriphClockCmd>:
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	70fb      	strb	r3, [r7, #3]
 8001c6c:	78fb      	ldrb	r3, [r7, #3]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d006      	beq.n	8001c80 <RCC_APB2PeriphClockCmd+0x20>
 8001c72:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <RCC_APB2PeriphClockCmd+0x3c>)
 8001c74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c76:	4909      	ldr	r1, [pc, #36]	; (8001c9c <RCC_APB2PeriphClockCmd+0x3c>)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	644b      	str	r3, [r1, #68]	; 0x44
 8001c7e:	e006      	b.n	8001c8e <RCC_APB2PeriphClockCmd+0x2e>
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <RCC_APB2PeriphClockCmd+0x3c>)
 8001c82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	4904      	ldr	r1, [pc, #16]	; (8001c9c <RCC_APB2PeriphClockCmd+0x3c>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	644b      	str	r3, [r1, #68]	; 0x44
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800

08001ca0 <RCC_APB2PeriphResetCmd>:
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	70fb      	strb	r3, [r7, #3]
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d006      	beq.n	8001cc0 <RCC_APB2PeriphResetCmd+0x20>
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <RCC_APB2PeriphResetCmd+0x3c>)
 8001cb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cb6:	4909      	ldr	r1, [pc, #36]	; (8001cdc <RCC_APB2PeriphResetCmd+0x3c>)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	624b      	str	r3, [r1, #36]	; 0x24
 8001cbe:	e006      	b.n	8001cce <RCC_APB2PeriphResetCmd+0x2e>
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <RCC_APB2PeriphResetCmd+0x3c>)
 8001cc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	4904      	ldr	r1, [pc, #16]	; (8001cdc <RCC_APB2PeriphResetCmd+0x3c>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	624b      	str	r3, [r1, #36]	; 0x24
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800

08001ce0 <SYSCFG_EXTILineConfig>:
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	460a      	mov	r2, r1
 8001cea:	71fb      	strb	r3, [r7, #7]
 8001cec:	4613      	mov	r3, r2
 8001cee:	71bb      	strb	r3, [r7, #6]
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	79bb      	ldrb	r3, [r7, #6]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	220f      	movs	r2, #15
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	4a16      	ldr	r2, [pc, #88]	; (8001d60 <SYSCFG_EXTILineConfig+0x80>)
 8001d06:	79bb      	ldrb	r3, [r7, #6]
 8001d08:	089b      	lsrs	r3, r3, #2
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	3302      	adds	r3, #2
 8001d0e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	4812      	ldr	r0, [pc, #72]	; (8001d60 <SYSCFG_EXTILineConfig+0x80>)
 8001d18:	79b9      	ldrb	r1, [r7, #6]
 8001d1a:	0889      	lsrs	r1, r1, #2
 8001d1c:	b2c9      	uxtb	r1, r1
 8001d1e:	401a      	ands	r2, r3
 8001d20:	1c8b      	adds	r3, r1, #2
 8001d22:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8001d26:	4a0e      	ldr	r2, [pc, #56]	; (8001d60 <SYSCFG_EXTILineConfig+0x80>)
 8001d28:	79bb      	ldrb	r3, [r7, #6]
 8001d2a:	089b      	lsrs	r3, r3, #2
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	3302      	adds	r3, #2
 8001d30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d34:	79f9      	ldrb	r1, [r7, #7]
 8001d36:	79bb      	ldrb	r3, [r7, #6]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d42:	4807      	ldr	r0, [pc, #28]	; (8001d60 <SYSCFG_EXTILineConfig+0x80>)
 8001d44:	79b9      	ldrb	r1, [r7, #6]
 8001d46:	0889      	lsrs	r1, r1, #2
 8001d48:	b2c9      	uxtb	r1, r1
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	1c8b      	adds	r3, r1, #2
 8001d4e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8001d52:	bf00      	nop
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40013800 	.word	0x40013800

08001d64 <NVIC_SetPriority>:
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	6039      	str	r1, [r7, #0]
 8001d6e:	71fb      	strb	r3, [r7, #7]
 8001d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	da0b      	bge.n	8001d90 <NVIC_SetPriority+0x2c>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	490c      	ldr	r1, [pc, #48]	; (8001db0 <NVIC_SetPriority+0x4c>)
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	f003 030f 	and.w	r3, r3, #15
 8001d84:	3b04      	subs	r3, #4
 8001d86:	0112      	lsls	r2, r2, #4
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	761a      	strb	r2, [r3, #24]
 8001d8e:	e009      	b.n	8001da4 <NVIC_SetPriority+0x40>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	4907      	ldr	r1, [pc, #28]	; (8001db4 <NVIC_SetPriority+0x50>)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	0112      	lsls	r2, r2, #4
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	440b      	add	r3, r1
 8001da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000ed00 	.word	0xe000ed00
 8001db4:	e000e100 	.word	0xe000e100

08001db8 <SysTick_Config>:
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc8:	d301      	bcc.n	8001dce <SysTick_Config+0x16>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e00f      	b.n	8001dee <SysTick_Config+0x36>
 8001dce:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <SysTick_Config+0x40>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	6053      	str	r3, [r2, #4]
 8001dd6:	210f      	movs	r1, #15
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ddc:	f7ff ffc2 	bl	8001d64 <NVIC_SetPriority>
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <SysTick_Config+0x40>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <SysTick_Config+0x40>)
 8001de8:	2207      	movs	r2, #7
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	2300      	movs	r3, #0
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	e000e010 	.word	0xe000e010

08001dfc <TimerInit>:
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	463b      	mov	r3, r7
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fe63 	bl	8001ad0 <RCC_GetClocksFreq>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	4a0a      	ldr	r2, [pc, #40]	; (8001e38 <TimerInit+0x3c>)
 8001e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e12:	099b      	lsrs	r3, r3, #6
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ffcf 	bl	8001db8 <SysTick_Config>
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e20:	f7ff ffa0 	bl	8001d64 <NVIC_SetPriority>
 8001e24:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001e28:	2100      	movs	r1, #0
 8001e2a:	4804      	ldr	r0, [pc, #16]	; (8001e3c <TimerInit+0x40>)
 8001e2c:	f002 f8b6 	bl	8003f9c <memsetl>
 8001e30:	bf00      	nop
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	10624dd3 	.word	0x10624dd3
 8001e3c:	20000be0 	.word	0x20000be0

08001e40 <TimerStart>:
 8001e40:	b590      	push	{r4, r7, lr}
 8001e42:	b087      	sub	sp, #28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	603b      	str	r3, [r7, #0]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	71fb      	strb	r3, [r7, #7]
 8001e50:	2300      	movs	r3, #0
 8001e52:	75fb      	strb	r3, [r7, #23]
 8001e54:	e04c      	b.n	8001ef0 <TimerStart+0xb0>
 8001e56:	7dfa      	ldrb	r2, [r7, #23]
 8001e58:	4929      	ldr	r1, [pc, #164]	; (8001f00 <TimerStart+0xc0>)
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	4413      	add	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	440b      	add	r3, r1
 8001e64:	3310      	adds	r3, #16
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d13e      	bne.n	8001eea <TimerStart+0xaa>
 8001e6c:	7dfa      	ldrb	r2, [r7, #23]
 8001e6e:	4924      	ldr	r1, [pc, #144]	; (8001f00 <TimerStart+0xc0>)
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	440b      	add	r3, r1
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	7dfa      	ldrb	r2, [r7, #23]
 8001e80:	491f      	ldr	r1, [pc, #124]	; (8001f00 <TimerStart+0xc0>)
 8001e82:	4613      	mov	r3, r2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4413      	add	r3, r2
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	440b      	add	r3, r1
 8001e8c:	3310      	adds	r3, #16
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	7dfa      	ldrb	r2, [r7, #23]
 8001e94:	491a      	ldr	r1, [pc, #104]	; (8001f00 <TimerStart+0xc0>)
 8001e96:	4613      	mov	r3, r2
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	4413      	add	r3, r2
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	440b      	add	r3, r1
 8001ea0:	330c      	adds	r3, #12
 8001ea2:	79fa      	ldrb	r2, [r7, #7]
 8001ea4:	701a      	strb	r2, [r3, #0]
 8001ea6:	7dfa      	ldrb	r2, [r7, #23]
 8001ea8:	4915      	ldr	r1, [pc, #84]	; (8001f00 <TimerStart+0xc0>)
 8001eaa:	4613      	mov	r3, r2
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	4413      	add	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	440b      	add	r3, r1
 8001eb4:	3314      	adds	r3, #20
 8001eb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	7dfc      	ldrb	r4, [r7, #23]
 8001ebc:	f000 f872 	bl	8001fa4 <GetMilSecTick>
 8001ec0:	4601      	mov	r1, r0
 8001ec2:	4a0f      	ldr	r2, [pc, #60]	; (8001f00 <TimerStart+0xc0>)
 8001ec4:	4623      	mov	r3, r4
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	4423      	add	r3, r4
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4413      	add	r3, r2
 8001ece:	3304      	adds	r3, #4
 8001ed0:	6019      	str	r1, [r3, #0]
 8001ed2:	7dfa      	ldrb	r2, [r7, #23]
 8001ed4:	490a      	ldr	r1, [pc, #40]	; (8001f00 <TimerStart+0xc0>)
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4413      	add	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	440b      	add	r3, r1
 8001ee0:	3308      	adds	r3, #8
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	7dfb      	ldrb	r3, [r7, #23]
 8001ee8:	e006      	b.n	8001ef8 <TimerStart+0xb8>
 8001eea:	7dfb      	ldrb	r3, [r7, #23]
 8001eec:	3301      	adds	r3, #1
 8001eee:	75fb      	strb	r3, [r7, #23]
 8001ef0:	7dfb      	ldrb	r3, [r7, #23]
 8001ef2:	2b0f      	cmp	r3, #15
 8001ef4:	d9af      	bls.n	8001e56 <TimerStart+0x16>
 8001ef6:	23ff      	movs	r3, #255	; 0xff
 8001ef8:	4618      	mov	r0, r3
 8001efa:	371c      	adds	r7, #28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd90      	pop	{r4, r7, pc}
 8001f00:	20000be0 	.word	0x20000be0

08001f04 <TimerStop>:
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	2b0f      	cmp	r3, #15
 8001f12:	d80a      	bhi.n	8001f2a <TimerStop+0x26>
 8001f14:	79fa      	ldrb	r2, [r7, #7]
 8001f16:	4922      	ldr	r1, [pc, #136]	; (8001fa0 <TimerStop+0x9c>)
 8001f18:	4613      	mov	r3, r2
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	4413      	add	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	440b      	add	r3, r1
 8001f22:	3310      	adds	r3, #16
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <TimerStop+0x2a>
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e031      	b.n	8001f92 <TimerStop+0x8e>
 8001f2e:	79fa      	ldrb	r2, [r7, #7]
 8001f30:	491b      	ldr	r1, [pc, #108]	; (8001fa0 <TimerStop+0x9c>)
 8001f32:	4613      	mov	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	4413      	add	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	440b      	add	r3, r1
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	79fa      	ldrb	r2, [r7, #7]
 8001f42:	4917      	ldr	r1, [pc, #92]	; (8001fa0 <TimerStop+0x9c>)
 8001f44:	4613      	mov	r3, r2
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	4413      	add	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	440b      	add	r3, r1
 8001f4e:	3310      	adds	r3, #16
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	79fa      	ldrb	r2, [r7, #7]
 8001f56:	4912      	ldr	r1, [pc, #72]	; (8001fa0 <TimerStop+0x9c>)
 8001f58:	4613      	mov	r3, r2
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	4413      	add	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	440b      	add	r3, r1
 8001f62:	330c      	adds	r3, #12
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
 8001f68:	79fa      	ldrb	r2, [r7, #7]
 8001f6a:	490d      	ldr	r1, [pc, #52]	; (8001fa0 <TimerStop+0x9c>)
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	4413      	add	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	440b      	add	r3, r1
 8001f76:	3308      	adds	r3, #8
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	79fa      	ldrb	r2, [r7, #7]
 8001f7e:	4908      	ldr	r1, [pc, #32]	; (8001fa0 <TimerStop+0x9c>)
 8001f80:	4613      	mov	r3, r2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4413      	add	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	440b      	add	r3, r1
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	2301      	movs	r3, #1
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20000be0 	.word	0x20000be0

08001fa4 <GetMilSecTick>:
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	4b03      	ldr	r3, [pc, #12]	; (8001fb8 <GetMilSecTick+0x14>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	20000d60 	.word	0x20000d60

08001fbc <processTimerScheduler>:
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	73fb      	strb	r3, [r7, #15]
 8001fc6:	e068      	b.n	800209a <processTimerScheduler+0xde>
 8001fc8:	7bfa      	ldrb	r2, [r7, #15]
 8001fca:	4937      	ldr	r1, [pc, #220]	; (80020a8 <processTimerScheduler+0xec>)
 8001fcc:	4613      	mov	r3, r2
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	4413      	add	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	440b      	add	r3, r1
 8001fd6:	3310      	adds	r3, #16
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d05a      	beq.n	8002094 <processTimerScheduler+0xd8>
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 f863 	bl	80020ac <TimeExpired>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d053      	beq.n	8002094 <processTimerScheduler+0xd8>
 8001fec:	7bfa      	ldrb	r2, [r7, #15]
 8001fee:	492e      	ldr	r1, [pc, #184]	; (80020a8 <processTimerScheduler+0xec>)
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4413      	add	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	440b      	add	r3, r1
 8001ffa:	3310      	adds	r3, #16
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	7bfa      	ldrb	r2, [r7, #15]
 8002002:	4929      	ldr	r1, [pc, #164]	; (80020a8 <processTimerScheduler+0xec>)
 8002004:	4613      	mov	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4413      	add	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	440b      	add	r3, r1
 800200e:	3314      	adds	r3, #20
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	607b      	str	r3, [r7, #4]
 8002014:	7bfa      	ldrb	r2, [r7, #15]
 8002016:	4924      	ldr	r1, [pc, #144]	; (80020a8 <processTimerScheduler+0xec>)
 8002018:	4613      	mov	r3, r2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	4413      	add	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	440b      	add	r3, r1
 8002022:	330c      	adds	r3, #12
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2bff      	cmp	r3, #255	; 0xff
 800202a:	d020      	beq.n	800206e <processTimerScheduler+0xb2>
 800202c:	7bfa      	ldrb	r2, [r7, #15]
 800202e:	491e      	ldr	r1, [pc, #120]	; (80020a8 <processTimerScheduler+0xec>)
 8002030:	4613      	mov	r3, r2
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	4413      	add	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	440b      	add	r3, r1
 800203a:	330c      	adds	r3, #12
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	d014      	beq.n	800206e <processTimerScheduler+0xb2>
 8002044:	7bfa      	ldrb	r2, [r7, #15]
 8002046:	4918      	ldr	r1, [pc, #96]	; (80020a8 <processTimerScheduler+0xec>)
 8002048:	4613      	mov	r3, r2
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4413      	add	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	440b      	add	r3, r1
 8002052:	330c      	adds	r3, #12
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	3b01      	subs	r3, #1
 800205a:	b2d8      	uxtb	r0, r3
 800205c:	4912      	ldr	r1, [pc, #72]	; (80020a8 <processTimerScheduler+0xec>)
 800205e:	4613      	mov	r3, r2
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	4413      	add	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	440b      	add	r3, r1
 8002068:	330c      	adds	r3, #12
 800206a:	4602      	mov	r2, r0
 800206c:	701a      	strb	r2, [r3, #0]
 800206e:	7bfa      	ldrb	r2, [r7, #15]
 8002070:	490d      	ldr	r1, [pc, #52]	; (80020a8 <processTimerScheduler+0xec>)
 8002072:	4613      	mov	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4413      	add	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	440b      	add	r3, r1
 800207c:	330c      	adds	r3, #12
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d103      	bne.n	800208e <processTimerScheduler+0xd2>
 8002086:	7bfb      	ldrb	r3, [r7, #15]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ff3b 	bl	8001f04 <TimerStop>
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	4798      	blx	r3
 8002094:	7bfb      	ldrb	r3, [r7, #15]
 8002096:	3301      	adds	r3, #1
 8002098:	73fb      	strb	r3, [r7, #15]
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	2b0f      	cmp	r3, #15
 800209e:	d993      	bls.n	8001fc8 <processTimerScheduler+0xc>
 80020a0:	bf00      	nop
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20000be0 	.word	0x20000be0

080020ac <TimeExpired>:
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	b672      	cpsid	i
 80020bc:	f7ff ff72 	bl	8001fa4 <GetMilSecTick>
 80020c0:	60b8      	str	r0, [r7, #8]
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	2b0f      	cmp	r3, #15
 80020c6:	d80a      	bhi.n	80020de <TimeExpired+0x32>
 80020c8:	79fa      	ldrb	r2, [r7, #7]
 80020ca:	492a      	ldr	r1, [pc, #168]	; (8002174 <TimeExpired+0xc8>)
 80020cc:	4613      	mov	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4413      	add	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	440b      	add	r3, r1
 80020d6:	3310      	adds	r3, #16
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d102      	bne.n	80020e4 <TimeExpired+0x38>
 80020de:	b662      	cpsie	i
 80020e0:	2300      	movs	r3, #0
 80020e2:	e042      	b.n	800216a <TimeExpired+0xbe>
 80020e4:	79fa      	ldrb	r2, [r7, #7]
 80020e6:	4923      	ldr	r1, [pc, #140]	; (8002174 <TimeExpired+0xc8>)
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	440b      	add	r3, r1
 80020f2:	3304      	adds	r3, #4
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d30c      	bcc.n	8002116 <TimeExpired+0x6a>
 80020fc:	79fa      	ldrb	r2, [r7, #7]
 80020fe:	491d      	ldr	r1, [pc, #116]	; (8002174 <TimeExpired+0xc8>)
 8002100:	4613      	mov	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	4413      	add	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	440b      	add	r3, r1
 800210a:	3304      	adds	r3, #4
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	e00e      	b.n	8002134 <TimeExpired+0x88>
 8002116:	79fa      	ldrb	r2, [r7, #7]
 8002118:	4916      	ldr	r1, [pc, #88]	; (8002174 <TimeExpired+0xc8>)
 800211a:	4613      	mov	r3, r2
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	4413      	add	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	440b      	add	r3, r1
 8002124:	3304      	adds	r3, #4
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	43db      	mvns	r3, r3
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	79fa      	ldrb	r2, [r7, #7]
 8002136:	490f      	ldr	r1, [pc, #60]	; (8002174 <TimeExpired+0xc8>)
 8002138:	4613      	mov	r3, r2
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	4413      	add	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	440b      	add	r3, r1
 8002142:	3308      	adds	r3, #8
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	429a      	cmp	r2, r3
 800214a:	d202      	bcs.n	8002152 <TimeExpired+0xa6>
 800214c:	b662      	cpsie	i
 800214e:	2300      	movs	r3, #0
 8002150:	e00b      	b.n	800216a <TimeExpired+0xbe>
 8002152:	79fa      	ldrb	r2, [r7, #7]
 8002154:	4907      	ldr	r1, [pc, #28]	; (8002174 <TimeExpired+0xc8>)
 8002156:	4613      	mov	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4413      	add	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	440b      	add	r3, r1
 8002160:	3304      	adds	r3, #4
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	b662      	cpsie	i
 8002168:	2301      	movs	r3, #1
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000be0 	.word	0x20000be0

08002178 <SysTick_Handler>:
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <SysTick_Handler+0x18>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	3301      	adds	r3, #1
 8002182:	4a03      	ldr	r2, [pc, #12]	; (8002190 <SysTick_Handler+0x18>)
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	bf00      	nop
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	20000d60 	.word	0x20000d60

08002194 <LightSensor_Init>:
 8002194:	b580      	push	{r7, lr}
 8002196:	b09e      	sub	sp, #120	; 0x78
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	71fb      	strb	r3, [r7, #7]
 800219e:	2101      	movs	r1, #1
 80021a0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80021a4:	f7ff fd5c 	bl	8001c60 <RCC_APB2PeriphClockCmd>
 80021a8:	2101      	movs	r1, #1
 80021aa:	2004      	movs	r0, #4
 80021ac:	f7ff fd38 	bl	8001c20 <RCC_AHB1PeriphClockCmd>
 80021b0:	2101      	movs	r1, #1
 80021b2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80021b6:	f7ff fd33 	bl	8001c20 <RCC_AHB1PeriphClockCmd>
 80021ba:	2320      	movs	r3, #32
 80021bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80021be:	2303      	movs	r3, #3
 80021c0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 80021c4:	2300      	movs	r3, #0
 80021c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80021ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021ce:	4619      	mov	r1, r3
 80021d0:	4843      	ldr	r0, [pc, #268]	; (80022e0 <LightSensor_Init+0x14c>)
 80021d2:	f7ff fbd7 	bl	8001984 <GPIO_Init>
 80021d6:	f001 fefa 	bl	8003fce <ADC_DeInit>
 80021da:	2300      	movs	r3, #0
 80021dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80021de:	2300      	movs	r3, #0
 80021e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80021e2:	2300      	movs	r3, #0
 80021e4:	673b      	str	r3, [r7, #112]	; 0x70
 80021e6:	2300      	movs	r3, #0
 80021e8:	677b      	str	r3, [r7, #116]	; 0x74
 80021ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80021ee:	4618      	mov	r0, r3
 80021f0:	f001 ff52 	bl	8004098 <ADC_CommonInit>
 80021f4:	2300      	movs	r3, #0
 80021f6:	653b      	str	r3, [r7, #80]	; 0x50
 80021f8:	2300      	movs	r3, #0
 80021fa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 80021fe:	2301      	movs	r3, #1
 8002200:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8002204:	2300      	movs	r3, #0
 8002206:	65bb      	str	r3, [r7, #88]	; 0x58
 8002208:	2300      	movs	r3, #0
 800220a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800220c:	2300      	movs	r3, #0
 800220e:	663b      	str	r3, [r7, #96]	; 0x60
 8002210:	2301      	movs	r3, #1
 8002212:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 8002216:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800221a:	4619      	mov	r1, r3
 800221c:	4831      	ldr	r0, [pc, #196]	; (80022e4 <LightSensor_Init+0x150>)
 800221e:	f001 fee5 	bl	8003fec <ADC_Init>
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d110      	bne.n	800224a <LightSensor_Init+0xb6>
 8002228:	2101      	movs	r1, #1
 800222a:	482e      	ldr	r0, [pc, #184]	; (80022e4 <LightSensor_Init+0x150>)
 800222c:	f002 f852 	bl	80042d4 <ADC_EOCOnEachRegularChannelCmd>
 8002230:	2100      	movs	r1, #0
 8002232:	482c      	ldr	r0, [pc, #176]	; (80022e4 <LightSensor_Init+0x150>)
 8002234:	f002 f86a 	bl	800430c <ADC_ContinuousModeCmd>
 8002238:	2101      	movs	r1, #1
 800223a:	482a      	ldr	r0, [pc, #168]	; (80022e4 <LightSensor_Init+0x150>)
 800223c:	f002 f882 	bl	8004344 <ADC_DiscModeChannelCountConfig>
 8002240:	2101      	movs	r1, #1
 8002242:	4828      	ldr	r0, [pc, #160]	; (80022e4 <LightSensor_Init+0x150>)
 8002244:	f002 f8a0 	bl	8004388 <ADC_DiscModeCmd>
 8002248:	e036      	b.n	80022b8 <LightSensor_Init+0x124>
 800224a:	4827      	ldr	r0, [pc, #156]	; (80022e8 <LightSensor_Init+0x154>)
 800224c:	f002 f8f0 	bl	8004430 <DMA_DeInit>
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	4b25      	ldr	r3, [pc, #148]	; (80022ec <LightSensor_Init+0x158>)
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	4b25      	ldr	r3, [pc, #148]	; (80022f0 <LightSensor_Init+0x15c>)
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	2300      	movs	r3, #0
 800225e:	61bb      	str	r3, [r7, #24]
 8002260:	2301      	movs	r3, #1
 8002262:	61fb      	str	r3, [r7, #28]
 8002264:	2300      	movs	r3, #0
 8002266:	623b      	str	r3, [r7, #32]
 8002268:	2300      	movs	r3, #0
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
 800226c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002270:	62bb      	str	r3, [r7, #40]	; 0x28
 8002272:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002278:	f44f 7380 	mov.w	r3, #256	; 0x100
 800227c:	633b      	str	r3, [r7, #48]	; 0x30
 800227e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002282:	637b      	str	r3, [r7, #52]	; 0x34
 8002284:	2300      	movs	r3, #0
 8002286:	63bb      	str	r3, [r7, #56]	; 0x38
 8002288:	2301      	movs	r3, #1
 800228a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800228c:	2300      	movs	r3, #0
 800228e:	643b      	str	r3, [r7, #64]	; 0x40
 8002290:	2300      	movs	r3, #0
 8002292:	647b      	str	r3, [r7, #68]	; 0x44
 8002294:	f107 030c 	add.w	r3, r7, #12
 8002298:	4619      	mov	r1, r3
 800229a:	4813      	ldr	r0, [pc, #76]	; (80022e8 <LightSensor_Init+0x154>)
 800229c:	f002 f99c 	bl	80045d8 <DMA_Init>
 80022a0:	2101      	movs	r1, #1
 80022a2:	4811      	ldr	r0, [pc, #68]	; (80022e8 <LightSensor_Init+0x154>)
 80022a4:	f002 f9f0 	bl	8004688 <DMA_Cmd>
 80022a8:	2101      	movs	r1, #1
 80022aa:	480e      	ldr	r0, [pc, #56]	; (80022e4 <LightSensor_Init+0x150>)
 80022ac:	f002 f8a4 	bl	80043f8 <ADC_DMARequestAfterLastTransferCmd>
 80022b0:	2101      	movs	r1, #1
 80022b2:	480c      	ldr	r0, [pc, #48]	; (80022e4 <LightSensor_Init+0x150>)
 80022b4:	f002 f884 	bl	80043c0 <ADC_DMACmd>
 80022b8:	2301      	movs	r3, #1
 80022ba:	2201      	movs	r2, #1
 80022bc:	210f      	movs	r1, #15
 80022be:	4809      	ldr	r0, [pc, #36]	; (80022e4 <LightSensor_Init+0x150>)
 80022c0:	f001 ff2e 	bl	8004120 <ADC_RegularChannelConfig>
 80022c4:	2101      	movs	r1, #1
 80022c6:	4807      	ldr	r0, [pc, #28]	; (80022e4 <LightSensor_Init+0x150>)
 80022c8:	f001 ff0e 	bl	80040e8 <ADC_Cmd>
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d102      	bne.n	80022d8 <LightSensor_Init+0x144>
 80022d2:	4804      	ldr	r0, [pc, #16]	; (80022e4 <LightSensor_Init+0x150>)
 80022d4:	f001 ffee 	bl	80042b4 <ADC_SoftwareStartConv>
 80022d8:	bf00      	nop
 80022da:	3778      	adds	r7, #120	; 0x78
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40020800 	.word	0x40020800
 80022e4:	40012000 	.word	0x40012000
 80022e8:	40026410 	.word	0x40026410
 80022ec:	4001204c 	.word	0x4001204c
 80022f0:	20000d64 	.word	0x20000d64

080022f4 <LightSensor_MeasureUseDMAMode>:
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	4b03      	ldr	r3, [pc, #12]	; (8002308 <LightSensor_MeasureUseDMAMode+0x14>)
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	4618      	mov	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	20000d64 	.word	0x20000d64

0800230c <USART2_IRQHandler>:
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	b672      	cpsid	i
 8002314:	f240 5125 	movw	r1, #1317	; 0x525
 8002318:	480e      	ldr	r0, [pc, #56]	; (8002354 <USART2_IRQHandler+0x48>)
 800231a:	f002 f9e1 	bl	80046e0 <USART_GetITStatus>
 800231e:	4603      	mov	r3, r0
 8002320:	2b01      	cmp	r3, #1
 8002322:	d112      	bne.n	800234a <USART2_IRQHandler+0x3e>
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <USART2_IRQHandler+0x4c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	607b      	str	r3, [r7, #4]
 800232a:	480a      	ldr	r0, [pc, #40]	; (8002354 <USART2_IRQHandler+0x48>)
 800232c:	f002 f9c8 	bl	80046c0 <USART_ReceiveData>
 8002330:	4603      	mov	r3, r0
 8002332:	b2db      	uxtb	r3, r3
 8002334:	70fb      	strb	r3, [r7, #3]
 8002336:	1cfb      	adds	r3, r7, #3
 8002338:	4619      	mov	r1, r3
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f001 fd9e 	bl	8003e7c <bufEnDat>
 8002340:	f240 5125 	movw	r1, #1317	; 0x525
 8002344:	4803      	ldr	r0, [pc, #12]	; (8002354 <USART2_IRQHandler+0x48>)
 8002346:	f002 fa26 	bl	8004796 <USART_ClearITPendingBit>
 800234a:	b662      	cpsie	i
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40004400 	.word	0x40004400
 8002358:	20000d68 	.word	0x20000d68

0800235c <delayMicroseconds>:
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <ucg_gpio_init>:
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	2101      	movs	r1, #1
 8002378:	2007      	movs	r0, #7
 800237a:	f7ff fc51 	bl	8001c20 <RCC_AHB1PeriphClockCmd>
 800237e:	2301      	movs	r3, #1
 8002380:	713b      	strb	r3, [r7, #4]
 8002382:	2303      	movs	r3, #3
 8002384:	717b      	strb	r3, [r7, #5]
 8002386:	2300      	movs	r3, #0
 8002388:	71bb      	strb	r3, [r7, #6]
 800238a:	2300      	movs	r3, #0
 800238c:	71fb      	strb	r3, [r7, #7]
 800238e:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 8002392:	603b      	str	r3, [r7, #0]
 8002394:	463b      	mov	r3, r7
 8002396:	4619      	mov	r1, r3
 8002398:	480a      	ldr	r0, [pc, #40]	; (80023c4 <ucg_gpio_init+0x54>)
 800239a:	f7ff faf3 	bl	8001984 <GPIO_Init>
 800239e:	f44f 6388 	mov.w	r3, #1088	; 0x440
 80023a2:	603b      	str	r3, [r7, #0]
 80023a4:	463b      	mov	r3, r7
 80023a6:	4619      	mov	r1, r3
 80023a8:	4807      	ldr	r0, [pc, #28]	; (80023c8 <ucg_gpio_init+0x58>)
 80023aa:	f7ff faeb 	bl	8001984 <GPIO_Init>
 80023ae:	2380      	movs	r3, #128	; 0x80
 80023b0:	603b      	str	r3, [r7, #0]
 80023b2:	463b      	mov	r3, r7
 80023b4:	4619      	mov	r1, r3
 80023b6:	4805      	ldr	r0, [pc, #20]	; (80023cc <ucg_gpio_init+0x5c>)
 80023b8:	f7ff fae4 	bl	8001984 <GPIO_Init>
 80023bc:	bf00      	nop
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40020000 	.word	0x40020000
 80023c8:	40020400 	.word	0x40020400
 80023cc:	40020800 	.word	0x40020800

080023d0 <ucg_com_arduino_send_generic_SW_SPI>:
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	70fb      	strb	r3, [r7, #3]
 80023dc:	2308      	movs	r3, #8
 80023de:	73fb      	strb	r3, [r7, #15]
 80023e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	da05      	bge.n	80023f4 <ucg_com_arduino_send_generic_SW_SPI+0x24>
 80023e8:	2201      	movs	r2, #1
 80023ea:	2180      	movs	r1, #128	; 0x80
 80023ec:	4814      	ldr	r0, [pc, #80]	; (8002440 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 80023ee:	f7ff fb57 	bl	8001aa0 <GPIO_WriteBit>
 80023f2:	e004      	b.n	80023fe <ucg_com_arduino_send_generic_SW_SPI+0x2e>
 80023f4:	2200      	movs	r2, #0
 80023f6:	2180      	movs	r1, #128	; 0x80
 80023f8:	4811      	ldr	r0, [pc, #68]	; (8002440 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 80023fa:	f7ff fb51 	bl	8001aa0 <GPIO_WriteBit>
 80023fe:	2001      	movs	r0, #1
 8002400:	f7ff ffac 	bl	800235c <delayMicroseconds>
 8002404:	2201      	movs	r2, #1
 8002406:	2120      	movs	r1, #32
 8002408:	480d      	ldr	r0, [pc, #52]	; (8002440 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 800240a:	f7ff fb49 	bl	8001aa0 <GPIO_WriteBit>
 800240e:	2001      	movs	r0, #1
 8002410:	f7ff ffa4 	bl	800235c <delayMicroseconds>
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	3b01      	subs	r3, #1
 8002418:	73fb      	strb	r3, [r7, #15]
 800241a:	2200      	movs	r2, #0
 800241c:	2120      	movs	r1, #32
 800241e:	4808      	ldr	r0, [pc, #32]	; (8002440 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8002420:	f7ff fb3e 	bl	8001aa0 <GPIO_WriteBit>
 8002424:	2001      	movs	r0, #1
 8002426:	f7ff ff99 	bl	800235c <delayMicroseconds>
 800242a:	78fb      	ldrb	r3, [r7, #3]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	70fb      	strb	r3, [r7, #3]
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1d4      	bne.n	80023e0 <ucg_com_arduino_send_generic_SW_SPI+0x10>
 8002436:	bf00      	nop
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40020000 	.word	0x40020000

08002444 <ucg_com_arduino_generic_SW_SPI>:
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	607b      	str	r3, [r7, #4]
 800244e:	460b      	mov	r3, r1
 8002450:	817b      	strh	r3, [r7, #10]
 8002452:	4613      	mov	r3, r2
 8002454:	813b      	strh	r3, [r7, #8]
 8002456:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800245a:	3b0a      	subs	r3, #10
 800245c:	2b0b      	cmp	r3, #11
 800245e:	f200 80dc 	bhi.w	800261a <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8002462:	a201      	add	r2, pc, #4	; (adr r2, 8002468 <ucg_com_arduino_generic_SW_SPI+0x24>)
 8002464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002468:	08002499 	.word	0x08002499
 800246c:	0800261b 	.word	0x0800261b
 8002470:	080024eb 	.word	0x080024eb
 8002474:	080024f5 	.word	0x080024f5
 8002478:	08002505 	.word	0x08002505
 800247c:	08002515 	.word	0x08002515
 8002480:	08002527 	.word	0x08002527
 8002484:	08002547 	.word	0x08002547
 8002488:	0800256f 	.word	0x0800256f
 800248c:	080025a5 	.word	0x080025a5
 8002490:	080025c3 	.word	0x080025c3
 8002494:	08002613 	.word	0x08002613
 8002498:	f7ff ff6a 	bl	8002370 <ucg_gpio_init>
 800249c:	2201      	movs	r2, #1
 800249e:	2180      	movs	r1, #128	; 0x80
 80024a0:	4860      	ldr	r0, [pc, #384]	; (8002624 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80024a2:	f7ff fafd 	bl	8001aa0 <GPIO_WriteBit>
 80024a6:	2201      	movs	r2, #1
 80024a8:	2140      	movs	r1, #64	; 0x40
 80024aa:	485f      	ldr	r0, [pc, #380]	; (8002628 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 80024ac:	f7ff faf8 	bl	8001aa0 <GPIO_WriteBit>
 80024b0:	2201      	movs	r2, #1
 80024b2:	2180      	movs	r1, #128	; 0x80
 80024b4:	485d      	ldr	r0, [pc, #372]	; (800262c <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 80024b6:	f7ff faf3 	bl	8001aa0 <GPIO_WriteBit>
 80024ba:	2201      	movs	r2, #1
 80024bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024c0:	4858      	ldr	r0, [pc, #352]	; (8002624 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80024c2:	f7ff faed 	bl	8001aa0 <GPIO_WriteBit>
 80024c6:	2200      	movs	r2, #0
 80024c8:	2120      	movs	r1, #32
 80024ca:	4856      	ldr	r0, [pc, #344]	; (8002624 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80024cc:	f7ff fae8 	bl	8001aa0 <GPIO_WriteBit>
 80024d0:	2201      	movs	r2, #1
 80024d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024d6:	4854      	ldr	r0, [pc, #336]	; (8002628 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 80024d8:	f7ff fae2 	bl	8001aa0 <GPIO_WriteBit>
 80024dc:	2201      	movs	r2, #1
 80024de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024e2:	4850      	ldr	r0, [pc, #320]	; (8002624 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80024e4:	f7ff fadc 	bl	8001aa0 <GPIO_WriteBit>
 80024e8:	e097      	b.n	800261a <ucg_com_arduino_generic_SW_SPI+0x1d6>
 80024ea:	893b      	ldrh	r3, [r7, #8]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff ff35 	bl	800235c <delayMicroseconds>
 80024f2:	e092      	b.n	800261a <ucg_com_arduino_generic_SW_SPI+0x1d6>
 80024f4:	893b      	ldrh	r3, [r7, #8]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	461a      	mov	r2, r3
 80024fa:	2180      	movs	r1, #128	; 0x80
 80024fc:	484b      	ldr	r0, [pc, #300]	; (800262c <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 80024fe:	f7ff facf 	bl	8001aa0 <GPIO_WriteBit>
 8002502:	e08a      	b.n	800261a <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8002504:	893b      	ldrh	r3, [r7, #8]
 8002506:	b2db      	uxtb	r3, r3
 8002508:	461a      	mov	r2, r3
 800250a:	2140      	movs	r1, #64	; 0x40
 800250c:	4846      	ldr	r0, [pc, #280]	; (8002628 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 800250e:	f7ff fac7 	bl	8001aa0 <GPIO_WriteBit>
 8002512:	e082      	b.n	800261a <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8002514:	893b      	ldrh	r3, [r7, #8]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	461a      	mov	r2, r3
 800251a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800251e:	4841      	ldr	r0, [pc, #260]	; (8002624 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8002520:	f7ff fabe 	bl	8001aa0 <GPIO_WriteBit>
 8002524:	e079      	b.n	800261a <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8002526:	893b      	ldrh	r3, [r7, #8]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	4619      	mov	r1, r3
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f7ff ff4f 	bl	80023d0 <ucg_com_arduino_send_generic_SW_SPI>
 8002532:	e072      	b.n	800261a <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	4619      	mov	r1, r3
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f7ff ff48 	bl	80023d0 <ucg_com_arduino_send_generic_SW_SPI>
 8002540:	893b      	ldrh	r3, [r7, #8]
 8002542:	3b01      	subs	r3, #1
 8002544:	813b      	strh	r3, [r7, #8]
 8002546:	893b      	ldrh	r3, [r7, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1f3      	bne.n	8002534 <ucg_com_arduino_generic_SW_SPI+0xf0>
 800254c:	e065      	b.n	800261a <ucg_com_arduino_generic_SW_SPI+0x1d6>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	4619      	mov	r1, r3
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f7ff ff3b 	bl	80023d0 <ucg_com_arduino_send_generic_SW_SPI>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3301      	adds	r3, #1
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	4619      	mov	r1, r3
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f7ff ff34 	bl	80023d0 <ucg_com_arduino_send_generic_SW_SPI>
 8002568:	893b      	ldrh	r3, [r7, #8]
 800256a:	3b01      	subs	r3, #1
 800256c:	813b      	strh	r3, [r7, #8]
 800256e:	893b      	ldrh	r3, [r7, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1ec      	bne.n	800254e <ucg_com_arduino_generic_SW_SPI+0x10a>
 8002574:	e051      	b.n	800261a <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	4619      	mov	r1, r3
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f7ff ff27 	bl	80023d0 <ucg_com_arduino_send_generic_SW_SPI>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3301      	adds	r3, #1
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	4619      	mov	r1, r3
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f7ff ff20 	bl	80023d0 <ucg_com_arduino_send_generic_SW_SPI>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3302      	adds	r3, #2
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	4619      	mov	r1, r3
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f7ff ff19 	bl	80023d0 <ucg_com_arduino_send_generic_SW_SPI>
 800259e:	893b      	ldrh	r3, [r7, #8]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	813b      	strh	r3, [r7, #8]
 80025a4:	893b      	ldrh	r3, [r7, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1e5      	bne.n	8002576 <ucg_com_arduino_generic_SW_SPI+0x132>
 80025aa:	e036      	b.n	800261a <ucg_com_arduino_generic_SW_SPI+0x1d6>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	607a      	str	r2, [r7, #4]
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	4619      	mov	r1, r3
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f7ff ff0a 	bl	80023d0 <ucg_com_arduino_send_generic_SW_SPI>
 80025bc:	893b      	ldrh	r3, [r7, #8]
 80025be:	3b01      	subs	r3, #1
 80025c0:	813b      	strh	r3, [r7, #8]
 80025c2:	893b      	ldrh	r3, [r7, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1f1      	bne.n	80025ac <ucg_com_arduino_generic_SW_SPI+0x168>
 80025c8:	e027      	b.n	800261a <ucg_com_arduino_generic_SW_SPI+0x1d6>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d010      	beq.n	80025f4 <ucg_com_arduino_generic_SW_SPI+0x1b0>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d106      	bne.n	80025e8 <ucg_com_arduino_generic_SW_SPI+0x1a4>
 80025da:	2200      	movs	r2, #0
 80025dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025e0:	4810      	ldr	r0, [pc, #64]	; (8002624 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80025e2:	f7ff fa5d 	bl	8001aa0 <GPIO_WriteBit>
 80025e6:	e005      	b.n	80025f4 <ucg_com_arduino_generic_SW_SPI+0x1b0>
 80025e8:	2201      	movs	r2, #1
 80025ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025ee:	480d      	ldr	r0, [pc, #52]	; (8002624 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80025f0:	f7ff fa56 	bl	8001aa0 <GPIO_WriteBit>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3301      	adds	r3, #1
 80025f8:	607b      	str	r3, [r7, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	4619      	mov	r1, r3
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f7ff fee5 	bl	80023d0 <ucg_com_arduino_send_generic_SW_SPI>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3301      	adds	r3, #1
 800260a:	607b      	str	r3, [r7, #4]
 800260c:	893b      	ldrh	r3, [r7, #8]
 800260e:	3b01      	subs	r3, #1
 8002610:	813b      	strh	r3, [r7, #8]
 8002612:	893b      	ldrh	r3, [r7, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1d8      	bne.n	80025ca <ucg_com_arduino_generic_SW_SPI+0x186>
 8002618:	bf00      	nop
 800261a:	2301      	movs	r3, #1
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40020000 	.word	0x40020000
 8002628:	40020400 	.word	0x40020400
 800262c:	40020800 	.word	0x40020800

08002630 <Ucglib4WireSWSPI_begin>:
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	460b      	mov	r3, r1
 800263a:	70fb      	strb	r3, [r7, #3]
 800263c:	4b07      	ldr	r3, [pc, #28]	; (800265c <Ucglib4WireSWSPI_begin+0x2c>)
 800263e:	4a08      	ldr	r2, [pc, #32]	; (8002660 <Ucglib4WireSWSPI_begin+0x30>)
 8002640:	4908      	ldr	r1, [pc, #32]	; (8002664 <Ucglib4WireSWSPI_begin+0x34>)
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f001 f9f0 	bl	8003a28 <ucg_Init>
 8002648:	78fb      	ldrb	r3, [r7, #3]
 800264a:	4619      	mov	r1, r3
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 ffd4 	bl	80035fa <ucg_SetFontMode>
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	08002445 	.word	0x08002445
 8002660:	08002d39 	.word	0x08002d39
 8002664:	08002e61 	.word	0x08002e61

08002668 <ucg_DrawBox>:
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	4608      	mov	r0, r1
 8002672:	4611      	mov	r1, r2
 8002674:	461a      	mov	r2, r3
 8002676:	4603      	mov	r3, r0
 8002678:	817b      	strh	r3, [r7, #10]
 800267a:	460b      	mov	r3, r1
 800267c:	813b      	strh	r3, [r7, #8]
 800267e:	4613      	mov	r3, r2
 8002680:	80fb      	strh	r3, [r7, #6]
 8002682:	e014      	b.n	80026ae <ucg_DrawBox+0x46>
 8002684:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002688:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800268c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f001 fa3b 	bl	8003b0c <ucg_DrawHLine>
 8002696:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800269a:	b29b      	uxth	r3, r3
 800269c:	3b01      	subs	r3, #1
 800269e:	b29b      	uxth	r3, r3
 80026a0:	833b      	strh	r3, [r7, #24]
 80026a2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	3301      	adds	r3, #1
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	813b      	strh	r3, [r7, #8]
 80026ae:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	dce6      	bgt.n	8002684 <ucg_DrawBox+0x1c>
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <ucg_ClearScreen>:
 80026be:	b580      	push	{r7, lr}
 80026c0:	b084      	sub	sp, #16
 80026c2:	af02      	add	r7, sp, #8
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	2300      	movs	r3, #0
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	2300      	movs	r3, #0
 80026cc:	2200      	movs	r2, #0
 80026ce:	2100      	movs	r1, #0
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f001 fa59 	bl	8003b88 <ucg_SetColor>
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 fb89 	bl	8002dee <ucg_SetMaxClipRange>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	4613      	mov	r3, r2
 80026ec:	2200      	movs	r2, #0
 80026ee:	2100      	movs	r1, #0
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7ff ffb9 	bl	8002668 <ucg_DrawBox>
 80026f6:	23ff      	movs	r3, #255	; 0xff
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	23ff      	movs	r3, #255	; 0xff
 80026fc:	22ff      	movs	r2, #255	; 0xff
 80026fe:	2100      	movs	r1, #0
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f001 fa41 	bl	8003b88 <ucg_SetColor>
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <ucg_DrawFrame>:
 800270e:	b580      	push	{r7, lr}
 8002710:	b086      	sub	sp, #24
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	4608      	mov	r0, r1
 8002718:	4611      	mov	r1, r2
 800271a:	461a      	mov	r2, r3
 800271c:	4603      	mov	r3, r0
 800271e:	817b      	strh	r3, [r7, #10]
 8002720:	460b      	mov	r3, r1
 8002722:	813b      	strh	r3, [r7, #8]
 8002724:	4613      	mov	r3, r2
 8002726:	80fb      	strh	r3, [r7, #6]
 8002728:	897b      	ldrh	r3, [r7, #10]
 800272a:	82fb      	strh	r3, [r7, #22]
 800272c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002730:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002734:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f001 f9e7 	bl	8003b0c <ucg_DrawHLine>
 800273e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002742:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002746:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f001 f9fd 	bl	8003b4a <ucg_DrawVLine>
 8002750:	897a      	ldrh	r2, [r7, #10]
 8002752:	88fb      	ldrh	r3, [r7, #6]
 8002754:	4413      	add	r3, r2
 8002756:	b29b      	uxth	r3, r3
 8002758:	817b      	strh	r3, [r7, #10]
 800275a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800275e:	b29b      	uxth	r3, r3
 8002760:	3b01      	subs	r3, #1
 8002762:	b29b      	uxth	r3, r3
 8002764:	817b      	strh	r3, [r7, #10]
 8002766:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800276a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800276e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f001 f9e9 	bl	8003b4a <ucg_DrawVLine>
 8002778:	893a      	ldrh	r2, [r7, #8]
 800277a:	8c3b      	ldrh	r3, [r7, #32]
 800277c:	4413      	add	r3, r2
 800277e:	b29b      	uxth	r3, r3
 8002780:	813b      	strh	r3, [r7, #8]
 8002782:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002786:	b29b      	uxth	r3, r3
 8002788:	3b01      	subs	r3, #1
 800278a:	b29b      	uxth	r3, r3
 800278c:	813b      	strh	r3, [r7, #8]
 800278e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002792:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002796:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f001 f9b6 	bl	8003b0c <ucg_DrawHLine>
 80027a0:	bf00      	nop
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <ucg_ccs_init>:
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	4608      	mov	r0, r1
 80027b2:	4611      	mov	r1, r2
 80027b4:	461a      	mov	r2, r3
 80027b6:	4603      	mov	r3, r0
 80027b8:	70fb      	strb	r3, [r7, #3]
 80027ba:	460b      	mov	r3, r1
 80027bc:	70bb      	strb	r3, [r7, #2]
 80027be:	4613      	mov	r3, r2
 80027c0:	803b      	strh	r3, [r7, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	78fa      	ldrb	r2, [r7, #3]
 80027c6:	705a      	strb	r2, [r3, #1]
 80027c8:	78bb      	ldrb	r3, [r7, #2]
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	78fb      	ldrb	r3, [r7, #3]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	b21a      	sxth	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	809a      	strh	r2, [r3, #4]
 80027da:	883b      	ldrh	r3, [r7, #0]
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29b      	uxth	r3, r3
 80027e0:	b21a      	sxth	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	811a      	strh	r2, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	805a      	strh	r2, [r3, #2]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027f2:	461a      	mov	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80027fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80027fe:	b21a      	sxth	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	80da      	strh	r2, [r3, #6]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	da0c      	bge.n	8002828 <ucg_ccs_init+0x80>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002814:	b29b      	uxth	r3, r3
 8002816:	425b      	negs	r3, r3
 8002818:	b29b      	uxth	r3, r3
 800281a:	b21a      	sxth	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	809a      	strh	r2, [r3, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002826:	805a      	strh	r2, [r3, #2]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002834:	fb93 f1f2 	sdiv	r1, r3, r2
 8002838:	fb02 f201 	mul.w	r2, r2, r1
 800283c:	1a9b      	subs	r3, r3, r2
 800283e:	b21a      	sxth	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	815a      	strh	r2, [r3, #10]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800284a:	0fda      	lsrs	r2, r3, #31
 800284c:	4413      	add	r3, r2
 800284e:	105b      	asrs	r3, r3, #1
 8002850:	b21a      	sxth	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	819a      	strh	r2, [r3, #12]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	701a      	strb	r2, [r3, #0]
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <ucg_ccs_step>:
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	781a      	ldrb	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800287a:	b2db      	uxtb	r3, r3
 800287c:	4413      	add	r3, r2
 800287e:	b2da      	uxtb	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	701a      	strb	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800288a:	b29a      	uxth	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002892:	b29b      	uxth	r3, r3
 8002894:	4413      	add	r3, r2
 8002896:	b29b      	uxth	r3, r3
 8002898:	b21a      	sxth	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	819a      	strh	r2, [r3, #12]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	db16      	blt.n	80028dc <ucg_ccs_step+0x74>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	781a      	ldrb	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	701a      	strb	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	b21a      	sxth	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	819a      	strh	r2, [r3, #12]
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <ucg_ccs_seek>:
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	807b      	strh	r3, [r7, #2]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	701a      	strb	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	781a      	ldrb	r2, [r3, #0]
 8002904:	887b      	ldrh	r3, [r7, #2]
 8002906:	b2db      	uxtb	r3, r3
 8002908:	fb12 f303 	smulbb	r3, r2, r3
 800290c:	b2da      	uxtb	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	701a      	strb	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002918:	b29a      	uxth	r2, r3
 800291a:	887b      	ldrh	r3, [r7, #2]
 800291c:	fb12 f303 	smulbb	r3, r2, r3
 8002920:	b29a      	uxth	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002928:	0fd9      	lsrs	r1, r3, #31
 800292a:	440b      	add	r3, r1
 800292c:	105b      	asrs	r3, r3, #1
 800292e:	b21b      	sxth	r3, r3
 8002930:	b29b      	uxth	r3, r3
 8002932:	4413      	add	r3, r2
 8002934:	b29b      	uxth	r3, r3
 8002936:	81fb      	strh	r3, [r7, #14]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800293e:	2b00      	cmp	r3, #0
 8002940:	db0e      	blt.n	8002960 <ucg_ccs_seek+0x78>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	781a      	ldrb	r2, [r3, #0]
 8002946:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8002950:	fb93 f3f1 	sdiv	r3, r3, r1
 8002954:	b2db      	uxtb	r3, r3
 8002956:	4413      	add	r3, r2
 8002958:	b2da      	uxtb	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	701a      	strb	r2, [r3, #0]
 800295e:	e00d      	b.n	800297c <ucg_ccs_seek+0x94>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	781a      	ldrb	r2, [r3, #0]
 8002964:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800296e:	fb93 f3f1 	sdiv	r3, r3, r1
 8002972:	b2db      	uxtb	r3, r3
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	b2da      	uxtb	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	701a      	strb	r2, [r3, #0]
 800297c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002986:	fb93 f1f2 	sdiv	r1, r3, r2
 800298a:	fb02 f201 	mul.w	r2, r2, r1
 800298e:	1a9b      	subs	r3, r3, r2
 8002990:	b21a      	sxth	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	819a      	strh	r2, [r3, #12]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	781a      	ldrb	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	785b      	ldrb	r3, [r3, #1]
 800299e:	4413      	add	r3, r2
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	701a      	strb	r2, [r3, #0]
 80029a6:	bf00      	nop
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <ucg_dev_default_cb>:
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	60f8      	str	r0, [r7, #12]
 80029ba:	460b      	mov	r3, r1
 80029bc:	607a      	str	r2, [r7, #4]
 80029be:	817b      	strh	r3, [r7, #10]
 80029c0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80029c4:	2b0c      	cmp	r3, #12
 80029c6:	d00a      	beq.n	80029de <ucg_dev_default_cb+0x2c>
 80029c8:	2b17      	cmp	r3, #23
 80029ca:	d10f      	bne.n	80029ec <ucg_dev_default_cb+0x3a>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	4798      	blx	r3
 80029da:	4603      	mov	r3, r0
 80029dc:	e007      	b.n	80029ee <ucg_dev_default_cb+0x3c>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	3370      	adds	r3, #112	; 0x70
 80029e4:	6810      	ldr	r0, [r2, #0]
 80029e6:	6851      	ldr	r1, [r2, #4]
 80029e8:	c303      	stmia	r3!, {r0, r1}
 80029ea:	bf00      	nop
 80029ec:	2301      	movs	r3, #1
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <ucg_ext_none>:
 80029f6:	b480      	push	{r7}
 80029f8:	b085      	sub	sp, #20
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	60f8      	str	r0, [r7, #12]
 80029fe:	460b      	mov	r3, r1
 8002a00:	607a      	str	r2, [r7, #4]
 8002a02:	817b      	strh	r3, [r7, #10]
 8002a04:	2301      	movs	r3, #1
 8002a06:	4618      	mov	r0, r3
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <ucg_handle_st7735_l90fx>:
 8002a14:	b590      	push	{r4, r7, lr}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f001 ff75 	bl	800490c <ucg_clip_l90fx>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d053      	beq.n	8002ad0 <ucg_handle_st7735_l90fx+0xbc>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d008      	beq.n	8002a44 <ucg_handle_st7735_l90fx+0x30>
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d00b      	beq.n	8002a4e <ucg_handle_st7735_l90fx+0x3a>
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d11b      	bne.n	8002a72 <ucg_handle_st7735_l90fx+0x5e>
 8002a3a:	4928      	ldr	r1, [pc, #160]	; (8002adc <ucg_handle_st7735_l90fx+0xc8>)
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f002 fa93 	bl	8004f68 <ucg_com_SendCmdSeq>
 8002a42:	e028      	b.n	8002a96 <ucg_handle_st7735_l90fx+0x82>
 8002a44:	4926      	ldr	r1, [pc, #152]	; (8002ae0 <ucg_handle_st7735_l90fx+0xcc>)
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f002 fa8e 	bl	8004f68 <ucg_com_SendCmdSeq>
 8002a4c:	e023      	b.n	8002a96 <ucg_handle_st7735_l90fx+0x82>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002a52:	81fb      	strh	r3, [r7, #14]
 8002a54:	89fb      	ldrh	r3, [r7, #14]
 8002a56:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	b21a      	sxth	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	849a      	strh	r2, [r3, #36]	; 0x24
 8002a62:	4920      	ldr	r1, [pc, #128]	; (8002ae4 <ucg_handle_st7735_l90fx+0xd0>)
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f002 fa7f 	bl	8004f68 <ucg_com_SendCmdSeq>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	89fa      	ldrh	r2, [r7, #14]
 8002a6e:	849a      	strh	r2, [r3, #36]	; 0x24
 8002a70:	e011      	b.n	8002a96 <ucg_handle_st7735_l90fx+0x82>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a76:	81fb      	strh	r3, [r7, #14]
 8002a78:	89fb      	ldrh	r3, [r7, #14]
 8002a7a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	b21a      	sxth	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	84da      	strh	r2, [r3, #38]	; 0x26
 8002a86:	4918      	ldr	r1, [pc, #96]	; (8002ae8 <ucg_handle_st7735_l90fx+0xd4>)
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f002 fa6d 	bl	8004f68 <ucg_com_SendCmdSeq>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	89fa      	ldrh	r2, [r7, #14]
 8002a92:	84da      	strh	r2, [r3, #38]	; 0x26
 8002a94:	bf00      	nop
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a9c:	723b      	strb	r3, [r7, #8]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002aa4:	727b      	strb	r3, [r7, #9]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002aac:	72bb      	strb	r3, [r7, #10]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69dc      	ldr	r4, [r3, #28]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	f107 0308 	add.w	r3, r7, #8
 8002abe:	2113      	movs	r1, #19
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	47a0      	blx	r4
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f002 f99a 	bl	8004e00 <ucg_com_SetCSLineStatus>
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <ucg_handle_st7735_l90fx+0xbe>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd90      	pop	{r4, r7, pc}
 8002ada:	bf00      	nop
 8002adc:	08005ba4 	.word	0x08005ba4
 8002ae0:	08005bc4 	.word	0x08005bc4
 8002ae4:	08005be8 	.word	0x08005be8
 8002ae8:	08005c0c 	.word	0x08005c0c

08002aec <ucg_handle_st7735_l90se>:
 8002aec:	b590      	push	{r4, r7, lr}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	2300      	movs	r3, #0
 8002af6:	75fb      	strb	r3, [r7, #23]
 8002af8:	e01a      	b.n	8002b30 <ucg_handle_st7735_l90se+0x44>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8002b00:	7dfa      	ldrb	r2, [r7, #23]
 8002b02:	4613      	mov	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	1a9b      	subs	r3, r3, r2
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	18c8      	adds	r0, r1, r3
 8002b0c:	7dfb      	ldrb	r3, [r7, #23]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	4413      	add	r3, r2
 8002b12:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 8002b16:	7dfb      	ldrb	r3, [r7, #23]
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002b26:	f7ff fe3f 	bl	80027a8 <ucg_ccs_init>
 8002b2a:	7dfb      	ldrb	r3, [r7, #23]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	75fb      	strb	r3, [r7, #23]
 8002b30:	7dfb      	ldrb	r3, [r7, #23]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d9e1      	bls.n	8002afa <ucg_handle_st7735_l90se+0xe>
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f002 f868 	bl	8004c0c <ucg_clip_l90se>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d071      	beq.n	8002c26 <ucg_handle_st7735_l90se+0x13a>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d008      	beq.n	8002b5e <ucg_handle_st7735_l90se+0x72>
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d00b      	beq.n	8002b68 <ucg_handle_st7735_l90se+0x7c>
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d11b      	bne.n	8002b8c <ucg_handle_st7735_l90se+0xa0>
 8002b54:	4936      	ldr	r1, [pc, #216]	; (8002c30 <ucg_handle_st7735_l90se+0x144>)
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f002 fa06 	bl	8004f68 <ucg_com_SendCmdSeq>
 8002b5c:	e028      	b.n	8002bb0 <ucg_handle_st7735_l90se+0xc4>
 8002b5e:	4935      	ldr	r1, [pc, #212]	; (8002c34 <ucg_handle_st7735_l90se+0x148>)
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f002 fa01 	bl	8004f68 <ucg_com_SendCmdSeq>
 8002b66:	e023      	b.n	8002bb0 <ucg_handle_st7735_l90se+0xc4>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002b6c:	827b      	strh	r3, [r7, #18]
 8002b6e:	8a7b      	ldrh	r3, [r7, #18]
 8002b70:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	b21a      	sxth	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	849a      	strh	r2, [r3, #36]	; 0x24
 8002b7c:	492e      	ldr	r1, [pc, #184]	; (8002c38 <ucg_handle_st7735_l90se+0x14c>)
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f002 f9f2 	bl	8004f68 <ucg_com_SendCmdSeq>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	8a7a      	ldrh	r2, [r7, #18]
 8002b88:	849a      	strh	r2, [r3, #36]	; 0x24
 8002b8a:	e011      	b.n	8002bb0 <ucg_handle_st7735_l90se+0xc4>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b90:	827b      	strh	r3, [r7, #18]
 8002b92:	8a7b      	ldrh	r3, [r7, #18]
 8002b94:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	b21a      	sxth	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	84da      	strh	r2, [r3, #38]	; 0x26
 8002ba0:	4926      	ldr	r1, [pc, #152]	; (8002c3c <ucg_handle_st7735_l90se+0x150>)
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f002 f9e0 	bl	8004f68 <ucg_com_SendCmdSeq>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	8a7a      	ldrh	r2, [r7, #18]
 8002bac:	84da      	strh	r2, [r3, #38]	; 0x26
 8002bae:	bf00      	nop
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	82bb      	strh	r3, [r7, #20]
 8002bb4:	e02a      	b.n	8002c0c <ucg_handle_st7735_l90se+0x120>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002bbc:	733b      	strb	r3, [r7, #12]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002bc4:	737b      	strb	r3, [r7, #13]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002bcc:	73bb      	strb	r3, [r7, #14]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69dc      	ldr	r4, [r3, #28]
 8002bd2:	f107 030c 	add.w	r3, r7, #12
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	2113      	movs	r1, #19
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	47a0      	blx	r4
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3346      	adds	r3, #70	; 0x46
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fe40 	bl	8002868 <ucg_ccs_step>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3346      	adds	r3, #70	; 0x46
 8002bec:	330e      	adds	r3, #14
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff fe3a 	bl	8002868 <ucg_ccs_step>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3346      	adds	r3, #70	; 0x46
 8002bf8:	331c      	adds	r3, #28
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff fe34 	bl	8002868 <ucg_ccs_step>
 8002c00:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	3301      	adds	r3, #1
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	82bb      	strh	r3, [r7, #20]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002c12:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	dbcd      	blt.n	8002bb6 <ucg_handle_st7735_l90se+0xca>
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f002 f8ef 	bl	8004e00 <ucg_com_SetCSLineStatus>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <ucg_handle_st7735_l90se+0x13c>
 8002c26:	2300      	movs	r3, #0
 8002c28:	4618      	mov	r0, r3
 8002c2a:	371c      	adds	r7, #28
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd90      	pop	{r4, r7, pc}
 8002c30:	08005ba4 	.word	0x08005ba4
 8002c34:	08005bc4 	.word	0x08005bc4
 8002c38:	08005be8 	.word	0x08005be8
 8002c3c:	08005c0c 	.word	0x08005c0c

08002c40 <ucg_dev_ic_st7735_18>:
 8002c40:	b590      	push	{r4, r7, lr}
 8002c42:	b087      	sub	sp, #28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	607a      	str	r2, [r7, #4]
 8002c4c:	817b      	strh	r3, [r7, #10]
 8002c4e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002c52:	3b0a      	subs	r3, #10
 8002c54:	2b0b      	cmp	r3, #11
 8002c56:	d85f      	bhi.n	8002d18 <ucg_dev_ic_st7735_18+0xd8>
 8002c58:	a201      	add	r2, pc, #4	; (adr r2, 8002c60 <ucg_dev_ic_st7735_18+0x20>)
 8002c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5e:	bf00      	nop
 8002c60:	08002c91 	.word	0x08002c91
 8002c64:	08002cab 	.word	0x08002cab
 8002c68:	08002d19 	.word	0x08002d19
 8002c6c:	08002d19 	.word	0x08002d19
 8002c70:	08002d19 	.word	0x08002d19
 8002c74:	08002cb7 	.word	0x08002cb7
 8002c78:	08002d19 	.word	0x08002d19
 8002c7c:	08002d19 	.word	0x08002d19
 8002c80:	08002d19 	.word	0x08002d19
 8002c84:	08002d19 	.word	0x08002d19
 8002c88:	08002cc7 	.word	0x08002cc7
 8002c8c:	08002d0f 	.word	0x08002d0f
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2202      	movs	r2, #2
 8002c94:	841a      	strh	r2, [r3, #32]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	845a      	strh	r2, [r3, #34]	; 0x22
 8002c9c:	2242      	movs	r2, #66	; 0x42
 8002c9e:	2164      	movs	r1, #100	; 0x64
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f001 fffc 	bl	8004c9e <ucg_com_PowerUp>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	e03e      	b.n	8002d28 <ucg_dev_ic_st7735_18+0xe8>
 8002caa:	4921      	ldr	r1, [pc, #132]	; (8002d30 <ucg_dev_ic_st7735_18+0xf0>)
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f002 f95b 	bl	8004f68 <ucg_com_SendCmdSeq>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e038      	b.n	8002d28 <ucg_dev_ic_st7735_18+0xe8>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2280      	movs	r2, #128	; 0x80
 8002cba:	801a      	strh	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2280      	movs	r2, #128	; 0x80
 8002cc0:	805a      	strh	r2, [r3, #2]
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e030      	b.n	8002d28 <ucg_dev_ic_st7735_18+0xe8>
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f001 fe06 	bl	80048d8 <ucg_clip_is_pixel_visible>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d01b      	beq.n	8002d0a <ucg_dev_ic_st7735_18+0xca>
 8002cd2:	4918      	ldr	r1, [pc, #96]	; (8002d34 <ucg_dev_ic_st7735_18+0xf4>)
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f002 f947 	bl	8004f68 <ucg_com_SendCmdSeq>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ce0:	753b      	strb	r3, [r7, #20]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002ce8:	757b      	strb	r3, [r7, #21]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002cf0:	75bb      	strb	r3, [r7, #22]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	69dc      	ldr	r4, [r3, #28]
 8002cf6:	f107 0314 	add.w	r3, r7, #20
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	2113      	movs	r1, #19
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	47a0      	blx	r4
 8002d02:	2101      	movs	r1, #1
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f002 f87b 	bl	8004e00 <ucg_com_SetCSLineStatus>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e00c      	b.n	8002d28 <ucg_dev_ic_st7735_18+0xe8>
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f7ff fe80 	bl	8002a14 <ucg_handle_st7735_l90fx>
 8002d14:	2301      	movs	r3, #1
 8002d16:	e007      	b.n	8002d28 <ucg_dev_ic_st7735_18+0xe8>
 8002d18:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	4619      	mov	r1, r3
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f7ff fe46 	bl	80029b2 <ucg_dev_default_cb>
 8002d26:	4603      	mov	r3, r0
 8002d28:	4618      	mov	r0, r3
 8002d2a:	371c      	adds	r7, #28
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd90      	pop	{r4, r7, pc}
 8002d30:	08005c30 	.word	0x08005c30
 8002d34:	08005b84 	.word	0x08005b84

08002d38 <ucg_ext_st7735_18>:
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	460b      	mov	r3, r1
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	817b      	strh	r3, [r7, #10]
 8002d46:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d4a:	2b17      	cmp	r3, #23
 8002d4c:	d103      	bne.n	8002d56 <ucg_ext_st7735_18+0x1e>
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f7ff fecc 	bl	8002aec <ucg_handle_st7735_l90se>
 8002d54:	bf00      	nop
 8002d56:	2301      	movs	r3, #1
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <ucg_PowerDown>:
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <ucg_PowerDown+0x2c>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	210b      	movs	r1, #11
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	4798      	blx	r3
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	7813      	ldrb	r3, [r2, #0]
 8002d86:	f36f 0300 	bfc	r3, #0, #1
 8002d8a:	7013      	strb	r3, [r2, #0]
 8002d8c:	bf00      	nop
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <ucg_PowerUp>:
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f7ff ffdf 	bl	8002d60 <ucg_PowerDown>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2200      	movs	r2, #0
 8002da8:	210a      	movs	r1, #10
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	4798      	blx	r3
 8002dae:	4603      	mov	r3, r0
 8002db0:	81fb      	strh	r3, [r7, #14]
 8002db2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d004      	beq.n	8002dc4 <ucg_PowerUp+0x30>
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	7813      	ldrb	r3, [r2, #0]
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	7013      	strb	r3, [r2, #0]
 8002dc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <ucg_SetClipBox>:
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	210c      	movs	r1, #12
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	4798      	blx	r3
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <ucg_SetMaxClipRange>:
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b084      	sub	sp, #16
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	f107 030c 	add.w	r3, r7, #12
 8002dfc:	3202      	adds	r2, #2
 8002dfe:	6810      	ldr	r0, [r2, #0]
 8002e00:	6018      	str	r0, [r3, #0]
 8002e02:	2300      	movs	r3, #0
 8002e04:	813b      	strh	r3, [r7, #8]
 8002e06:	2300      	movs	r3, #0
 8002e08:	817b      	strh	r3, [r7, #10]
 8002e0a:	f107 0308 	add.w	r3, r7, #8
 8002e0e:	4619      	mov	r1, r3
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff ffdd 	bl	8002dd0 <ucg_SetClipBox>
 8002e16:	bf00      	nop
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <ucg_GetDimension>:
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b082      	sub	sp, #8
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	3202      	adds	r2, #2
 8002e2e:	210f      	movs	r1, #15
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	4798      	blx	r3
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7ff ffda 	bl	8002dee <ucg_SetMaxClipRange>
 8002e3a:	bf00      	nop
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <ucg_DrawL90FXWithArg>:
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	3224      	adds	r2, #36	; 0x24
 8002e52:	2115      	movs	r1, #21
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	4798      	blx	r3
 8002e58:	bf00      	nop
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <ucg_dev_st7735_18x128x128>:
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	607a      	str	r2, [r7, #4]
 8002e6c:	817b      	strh	r3, [r7, #10]
 8002e6e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002e72:	2b0b      	cmp	r3, #11
 8002e74:	d015      	beq.n	8002ea2 <ucg_dev_st7735_18x128x128+0x42>
 8002e76:	2b0f      	cmp	r3, #15
 8002e78:	d01c      	beq.n	8002eb4 <ucg_dev_st7735_18x128x128+0x54>
 8002e7a:	2b0a      	cmp	r3, #10
 8002e7c:	d122      	bne.n	8002ec4 <ucg_dev_st7735_18x128x128+0x64>
 8002e7e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	4619      	mov	r1, r3
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f7ff feda 	bl	8002c40 <ucg_dev_ic_st7735_18>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <ucg_dev_st7735_18x128x128+0x36>
 8002e92:	2300      	movs	r3, #0
 8002e94:	e01e      	b.n	8002ed4 <ucg_dev_st7735_18x128x128+0x74>
 8002e96:	4911      	ldr	r1, [pc, #68]	; (8002edc <ucg_dev_st7735_18x128x128+0x7c>)
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f002 f865 	bl	8004f68 <ucg_com_SendCmdSeq>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e018      	b.n	8002ed4 <ucg_dev_st7735_18x128x128+0x74>
 8002ea2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f7ff fec8 	bl	8002c40 <ucg_dev_ic_st7735_18>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	e00f      	b.n	8002ed4 <ucg_dev_st7735_18x128x128+0x74>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2280      	movs	r2, #128	; 0x80
 8002eb8:	801a      	strh	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2280      	movs	r2, #128	; 0x80
 8002ebe:	805a      	strh	r2, [r3, #2]
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e007      	b.n	8002ed4 <ucg_dev_st7735_18x128x128+0x74>
 8002ec4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	4619      	mov	r1, r3
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f7ff feb7 	bl	8002c40 <ucg_dev_ic_st7735_18>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	08005c38 	.word	0x08005c38

08002ee0 <ucg_font_get_byte>:
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	70fb      	strb	r3, [r7, #3]
 8002eec:	78fb      	ldrb	r3, [r7, #3]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	607b      	str	r3, [r7, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <ucg_font_get_word>:
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	70fb      	strb	r3, [r7, #3]
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	4413      	add	r3, r2
 8002f16:	607b      	str	r3, [r7, #4]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	81fb      	strh	r3, [r7, #14]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	3301      	adds	r3, #1
 8002f22:	607b      	str	r3, [r7, #4]
 8002f24:	89fb      	ldrh	r3, [r7, #14]
 8002f26:	021b      	lsls	r3, r3, #8
 8002f28:	81fb      	strh	r3, [r7, #14]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	89fb      	ldrh	r3, [r7, #14]
 8002f32:	4413      	add	r3, r2
 8002f34:	81fb      	strh	r3, [r7, #14]
 8002f36:	89fb      	ldrh	r3, [r7, #14]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <ucg_read_font_info>:
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
 8002f4e:	2100      	movs	r1, #0
 8002f50:	6838      	ldr	r0, [r7, #0]
 8002f52:	f7ff ffc5 	bl	8002ee0 <ucg_font_get_byte>
 8002f56:	4603      	mov	r3, r0
 8002f58:	461a      	mov	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	701a      	strb	r2, [r3, #0]
 8002f5e:	2101      	movs	r1, #1
 8002f60:	6838      	ldr	r0, [r7, #0]
 8002f62:	f7ff ffbd 	bl	8002ee0 <ucg_font_get_byte>
 8002f66:	4603      	mov	r3, r0
 8002f68:	461a      	mov	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	705a      	strb	r2, [r3, #1]
 8002f6e:	2102      	movs	r1, #2
 8002f70:	6838      	ldr	r0, [r7, #0]
 8002f72:	f7ff ffb5 	bl	8002ee0 <ucg_font_get_byte>
 8002f76:	4603      	mov	r3, r0
 8002f78:	461a      	mov	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	709a      	strb	r2, [r3, #2]
 8002f7e:	2103      	movs	r1, #3
 8002f80:	6838      	ldr	r0, [r7, #0]
 8002f82:	f7ff ffad 	bl	8002ee0 <ucg_font_get_byte>
 8002f86:	4603      	mov	r3, r0
 8002f88:	461a      	mov	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	70da      	strb	r2, [r3, #3]
 8002f8e:	2104      	movs	r1, #4
 8002f90:	6838      	ldr	r0, [r7, #0]
 8002f92:	f7ff ffa5 	bl	8002ee0 <ucg_font_get_byte>
 8002f96:	4603      	mov	r3, r0
 8002f98:	461a      	mov	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	711a      	strb	r2, [r3, #4]
 8002f9e:	2105      	movs	r1, #5
 8002fa0:	6838      	ldr	r0, [r7, #0]
 8002fa2:	f7ff ff9d 	bl	8002ee0 <ucg_font_get_byte>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	461a      	mov	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	715a      	strb	r2, [r3, #5]
 8002fae:	2106      	movs	r1, #6
 8002fb0:	6838      	ldr	r0, [r7, #0]
 8002fb2:	f7ff ff95 	bl	8002ee0 <ucg_font_get_byte>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	461a      	mov	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	719a      	strb	r2, [r3, #6]
 8002fbe:	2107      	movs	r1, #7
 8002fc0:	6838      	ldr	r0, [r7, #0]
 8002fc2:	f7ff ff8d 	bl	8002ee0 <ucg_font_get_byte>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	461a      	mov	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	71da      	strb	r2, [r3, #7]
 8002fce:	2108      	movs	r1, #8
 8002fd0:	6838      	ldr	r0, [r7, #0]
 8002fd2:	f7ff ff85 	bl	8002ee0 <ucg_font_get_byte>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	461a      	mov	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	721a      	strb	r2, [r3, #8]
 8002fde:	2109      	movs	r1, #9
 8002fe0:	6838      	ldr	r0, [r7, #0]
 8002fe2:	f7ff ff7d 	bl	8002ee0 <ucg_font_get_byte>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	b25a      	sxtb	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	725a      	strb	r2, [r3, #9]
 8002fee:	210a      	movs	r1, #10
 8002ff0:	6838      	ldr	r0, [r7, #0]
 8002ff2:	f7ff ff75 	bl	8002ee0 <ucg_font_get_byte>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	b25a      	sxtb	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	729a      	strb	r2, [r3, #10]
 8002ffe:	210b      	movs	r1, #11
 8003000:	6838      	ldr	r0, [r7, #0]
 8003002:	f7ff ff6d 	bl	8002ee0 <ucg_font_get_byte>
 8003006:	4603      	mov	r3, r0
 8003008:	b25a      	sxtb	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	72da      	strb	r2, [r3, #11]
 800300e:	210c      	movs	r1, #12
 8003010:	6838      	ldr	r0, [r7, #0]
 8003012:	f7ff ff65 	bl	8002ee0 <ucg_font_get_byte>
 8003016:	4603      	mov	r3, r0
 8003018:	b25a      	sxtb	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	731a      	strb	r2, [r3, #12]
 800301e:	210d      	movs	r1, #13
 8003020:	6838      	ldr	r0, [r7, #0]
 8003022:	f7ff ff5d 	bl	8002ee0 <ucg_font_get_byte>
 8003026:	4603      	mov	r3, r0
 8003028:	b25a      	sxtb	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	735a      	strb	r2, [r3, #13]
 800302e:	210e      	movs	r1, #14
 8003030:	6838      	ldr	r0, [r7, #0]
 8003032:	f7ff ff55 	bl	8002ee0 <ucg_font_get_byte>
 8003036:	4603      	mov	r3, r0
 8003038:	b25a      	sxtb	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	739a      	strb	r2, [r3, #14]
 800303e:	210f      	movs	r1, #15
 8003040:	6838      	ldr	r0, [r7, #0]
 8003042:	f7ff ff4d 	bl	8002ee0 <ucg_font_get_byte>
 8003046:	4603      	mov	r3, r0
 8003048:	b25a      	sxtb	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	73da      	strb	r2, [r3, #15]
 800304e:	2110      	movs	r1, #16
 8003050:	6838      	ldr	r0, [r7, #0]
 8003052:	f7ff ff45 	bl	8002ee0 <ucg_font_get_byte>
 8003056:	4603      	mov	r3, r0
 8003058:	b25a      	sxtb	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	741a      	strb	r2, [r3, #16]
 800305e:	2111      	movs	r1, #17
 8003060:	6838      	ldr	r0, [r7, #0]
 8003062:	f7ff ff4f 	bl	8002f04 <ucg_font_get_word>
 8003066:	4603      	mov	r3, r0
 8003068:	461a      	mov	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	825a      	strh	r2, [r3, #18]
 800306e:	2113      	movs	r1, #19
 8003070:	6838      	ldr	r0, [r7, #0]
 8003072:	f7ff ff47 	bl	8002f04 <ucg_font_get_word>
 8003076:	4603      	mov	r3, r0
 8003078:	461a      	mov	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	829a      	strh	r2, [r3, #20]
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <ucg_font_decode_get_unsigned_bits>:
 8003086:	b480      	push	{r7}
 8003088:	b085      	sub	sp, #20
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	460b      	mov	r3, r1
 8003090:	70fb      	strb	r3, [r7, #3]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	7b1b      	ldrb	r3, [r3, #12]
 8003096:	737b      	strb	r3, [r7, #13]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	73fb      	strb	r3, [r7, #15]
 80030a0:	7bfa      	ldrb	r2, [r7, #15]
 80030a2:	7b7b      	ldrb	r3, [r7, #13]
 80030a4:	fa42 f303 	asr.w	r3, r2, r3
 80030a8:	73fb      	strb	r3, [r7, #15]
 80030aa:	7b7b      	ldrb	r3, [r7, #13]
 80030ac:	73bb      	strb	r3, [r7, #14]
 80030ae:	7bba      	ldrb	r2, [r7, #14]
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	4413      	add	r3, r2
 80030b4:	73bb      	strb	r3, [r7, #14]
 80030b6:	7bbb      	ldrb	r3, [r7, #14]
 80030b8:	2b07      	cmp	r3, #7
 80030ba:	d91a      	bls.n	80030f2 <ucg_font_decode_get_unsigned_bits+0x6c>
 80030bc:	2308      	movs	r3, #8
 80030be:	733b      	strb	r3, [r7, #12]
 80030c0:	7b3a      	ldrb	r2, [r7, #12]
 80030c2:	7b7b      	ldrb	r3, [r7, #13]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	733b      	strb	r3, [r7, #12]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	1c5a      	adds	r2, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	461a      	mov	r2, r3
 80030da:	7b3b      	ldrb	r3, [r7, #12]
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	b25a      	sxtb	r2, r3
 80030e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	b25b      	sxtb	r3, r3
 80030ea:	73fb      	strb	r3, [r7, #15]
 80030ec:	7bbb      	ldrb	r3, [r7, #14]
 80030ee:	3b08      	subs	r3, #8
 80030f0:	73bb      	strb	r3, [r7, #14]
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	f04f 32ff 	mov.w	r2, #4294967295
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	43db      	mvns	r3, r3
 8003100:	b2da      	uxtb	r2, r3
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	4013      	ands	r3, r2
 8003106:	73fb      	strb	r3, [r7, #15]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	7bba      	ldrb	r2, [r7, #14]
 800310c:	731a      	strb	r2, [r3, #12]
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	4618      	mov	r0, r3
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <ucg_font_decode_get_signed_bits>:
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	460b      	mov	r3, r1
 8003126:	70fb      	strb	r3, [r7, #3]
 8003128:	78fb      	ldrb	r3, [r7, #3]
 800312a:	4619      	mov	r1, r3
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff ffaa 	bl	8003086 <ucg_font_decode_get_unsigned_bits>
 8003132:	4603      	mov	r3, r0
 8003134:	73fb      	strb	r3, [r7, #15]
 8003136:	2301      	movs	r3, #1
 8003138:	73bb      	strb	r3, [r7, #14]
 800313a:	78fb      	ldrb	r3, [r7, #3]
 800313c:	3b01      	subs	r3, #1
 800313e:	70fb      	strb	r3, [r7, #3]
 8003140:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8003144:	78fb      	ldrb	r3, [r7, #3]
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	73bb      	strb	r3, [r7, #14]
 800314c:	7bfa      	ldrb	r2, [r7, #15]
 800314e:	7bbb      	ldrb	r3, [r7, #14]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	b2db      	uxtb	r3, r3
 8003154:	73fb      	strb	r3, [r7, #15]
 8003156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <ucg_add_vector_y>:
 8003162:	b490      	push	{r4, r7}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	4604      	mov	r4, r0
 800316a:	4608      	mov	r0, r1
 800316c:	4611      	mov	r1, r2
 800316e:	461a      	mov	r2, r3
 8003170:	4623      	mov	r3, r4
 8003172:	80fb      	strh	r3, [r7, #6]
 8003174:	4603      	mov	r3, r0
 8003176:	717b      	strb	r3, [r7, #5]
 8003178:	460b      	mov	r3, r1
 800317a:	713b      	strb	r3, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	70fb      	strb	r3, [r7, #3]
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d00b      	beq.n	800319e <ucg_add_vector_y+0x3c>
 8003186:	2b02      	cmp	r3, #2
 8003188:	d011      	beq.n	80031ae <ucg_add_vector_y+0x4c>
 800318a:	2b00      	cmp	r3, #0
 800318c:	d117      	bne.n	80031be <ucg_add_vector_y+0x5c>
 800318e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003192:	b29a      	uxth	r2, r3
 8003194:	88fb      	ldrh	r3, [r7, #6]
 8003196:	4413      	add	r3, r2
 8003198:	b29b      	uxth	r3, r3
 800319a:	80fb      	strh	r3, [r7, #6]
 800319c:	e017      	b.n	80031ce <ucg_add_vector_y+0x6c>
 800319e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	88fb      	ldrh	r3, [r7, #6]
 80031a6:	4413      	add	r3, r2
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	80fb      	strh	r3, [r7, #6]
 80031ac:	e00f      	b.n	80031ce <ucg_add_vector_y+0x6c>
 80031ae:	88fa      	ldrh	r2, [r7, #6]
 80031b0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	80fb      	strh	r3, [r7, #6]
 80031bc:	e007      	b.n	80031ce <ucg_add_vector_y+0x6c>
 80031be:	88fa      	ldrh	r2, [r7, #6]
 80031c0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	80fb      	strh	r3, [r7, #6]
 80031cc:	bf00      	nop
 80031ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc90      	pop	{r4, r7}
 80031da:	4770      	bx	lr

080031dc <ucg_add_vector_x>:
 80031dc:	b490      	push	{r4, r7}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4604      	mov	r4, r0
 80031e4:	4608      	mov	r0, r1
 80031e6:	4611      	mov	r1, r2
 80031e8:	461a      	mov	r2, r3
 80031ea:	4623      	mov	r3, r4
 80031ec:	80fb      	strh	r3, [r7, #6]
 80031ee:	4603      	mov	r3, r0
 80031f0:	717b      	strb	r3, [r7, #5]
 80031f2:	460b      	mov	r3, r1
 80031f4:	713b      	strb	r3, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	70fb      	strb	r3, [r7, #3]
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d00b      	beq.n	8003218 <ucg_add_vector_x+0x3c>
 8003200:	2b02      	cmp	r3, #2
 8003202:	d011      	beq.n	8003228 <ucg_add_vector_x+0x4c>
 8003204:	2b00      	cmp	r3, #0
 8003206:	d117      	bne.n	8003238 <ucg_add_vector_x+0x5c>
 8003208:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800320c:	b29a      	uxth	r2, r3
 800320e:	88fb      	ldrh	r3, [r7, #6]
 8003210:	4413      	add	r3, r2
 8003212:	b29b      	uxth	r3, r3
 8003214:	80fb      	strh	r3, [r7, #6]
 8003216:	e017      	b.n	8003248 <ucg_add_vector_x+0x6c>
 8003218:	88fa      	ldrh	r2, [r7, #6]
 800321a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800321e:	b29b      	uxth	r3, r3
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	b29b      	uxth	r3, r3
 8003224:	80fb      	strh	r3, [r7, #6]
 8003226:	e00f      	b.n	8003248 <ucg_add_vector_x+0x6c>
 8003228:	88fa      	ldrh	r2, [r7, #6]
 800322a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800322e:	b29b      	uxth	r3, r3
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	b29b      	uxth	r3, r3
 8003234:	80fb      	strh	r3, [r7, #6]
 8003236:	e007      	b.n	8003248 <ucg_add_vector_x+0x6c>
 8003238:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800323c:	b29a      	uxth	r2, r3
 800323e:	88fb      	ldrh	r3, [r7, #6]
 8003240:	4413      	add	r3, r2
 8003242:	b29b      	uxth	r3, r3
 8003244:	80fb      	strh	r3, [r7, #6]
 8003246:	bf00      	nop
 8003248:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800324c:	4618      	mov	r0, r3
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bc90      	pop	{r4, r7}
 8003254:	4770      	bx	lr

08003256 <ucg_font_decode_len>:
 8003256:	b590      	push	{r4, r7, lr}
 8003258:	b089      	sub	sp, #36	; 0x24
 800325a:	af02      	add	r7, sp, #8
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	460b      	mov	r3, r1
 8003260:	70fb      	strb	r3, [r7, #3]
 8003262:	4613      	mov	r3, r2
 8003264:	70bb      	strb	r3, [r7, #2]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	3380      	adds	r3, #128	; 0x80
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	75fb      	strb	r3, [r7, #23]
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003276:	757b      	strb	r3, [r7, #21]
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800327e:	753b      	strb	r3, [r7, #20]
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003286:	73fb      	strb	r3, [r7, #15]
 8003288:	7bfa      	ldrb	r2, [r7, #15]
 800328a:	7d7b      	ldrb	r3, [r7, #21]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	73fb      	strb	r3, [r7, #15]
 8003290:	7bfb      	ldrb	r3, [r7, #15]
 8003292:	75bb      	strb	r3, [r7, #22]
 8003294:	7dfa      	ldrb	r2, [r7, #23]
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	429a      	cmp	r2, r3
 800329a:	d201      	bcs.n	80032a0 <ucg_font_decode_len+0x4a>
 800329c:	7dfb      	ldrb	r3, [r7, #23]
 800329e:	75bb      	strb	r3, [r7, #22]
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	889b      	ldrh	r3, [r3, #4]
 80032a4:	81bb      	strh	r3, [r7, #12]
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	88db      	ldrh	r3, [r3, #6]
 80032aa:	817b      	strh	r3, [r7, #10]
 80032ac:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80032b0:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	7b9b      	ldrb	r3, [r3, #14]
 80032b8:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 80032bc:	f7ff ff8e 	bl	80031dc <ucg_add_vector_x>
 80032c0:	4603      	mov	r3, r0
 80032c2:	81bb      	strh	r3, [r7, #12]
 80032c4:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80032c8:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	7b9b      	ldrb	r3, [r3, #14]
 80032d0:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 80032d4:	f7ff ff45 	bl	8003162 <ucg_add_vector_y>
 80032d8:	4603      	mov	r3, r0
 80032da:	817b      	strh	r3, [r7, #10]
 80032dc:	78bb      	ldrb	r3, [r7, #2]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d011      	beq.n	8003306 <ucg_font_decode_len+0xb0>
 80032e2:	7dbb      	ldrb	r3, [r7, #22]
 80032e4:	b21c      	sxth	r4, r3
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	7b9b      	ldrb	r3, [r3, #14]
 80032ea:	b21b      	sxth	r3, r3
 80032ec:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 80032f0:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	9201      	str	r2, [sp, #4]
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	4623      	mov	r3, r4
 80032fc:	4602      	mov	r2, r0
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fbc0 	bl	8003a84 <ucg_Draw90Line>
 8003304:	e014      	b.n	8003330 <ucg_font_decode_len+0xda>
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	7b5b      	ldrb	r3, [r3, #13]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d110      	bne.n	8003330 <ucg_font_decode_len+0xda>
 800330e:	7dbb      	ldrb	r3, [r7, #22]
 8003310:	b21c      	sxth	r4, r3
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	7b9b      	ldrb	r3, [r3, #14]
 8003316:	b21b      	sxth	r3, r3
 8003318:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 800331c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8003320:	2201      	movs	r2, #1
 8003322:	9201      	str	r2, [sp, #4]
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	4623      	mov	r3, r4
 8003328:	4602      	mov	r2, r0
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 fbaa 	bl	8003a84 <ucg_Draw90Line>
 8003330:	7dfa      	ldrb	r2, [r7, #23]
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	429a      	cmp	r2, r3
 8003336:	d309      	bcc.n	800334c <ucg_font_decode_len+0xf6>
 8003338:	7dfa      	ldrb	r2, [r7, #23]
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	75fb      	strb	r3, [r7, #23]
 8003340:	2300      	movs	r3, #0
 8003342:	757b      	strb	r3, [r7, #21]
 8003344:	7d3b      	ldrb	r3, [r7, #20]
 8003346:	3301      	adds	r3, #1
 8003348:	753b      	strb	r3, [r7, #20]
 800334a:	e799      	b.n	8003280 <ucg_font_decode_len+0x2a>
 800334c:	bf00      	nop
 800334e:	7d7a      	ldrb	r2, [r7, #21]
 8003350:	7dfb      	ldrb	r3, [r7, #23]
 8003352:	4413      	add	r3, r2
 8003354:	757b      	strb	r3, [r7, #21]
 8003356:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	721a      	strb	r2, [r3, #8]
 800335e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	725a      	strb	r2, [r3, #9]
 8003366:	bf00      	nop
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	bd90      	pop	{r4, r7, pc}

0800336e <ucg_font_setup_decode>:
 800336e:	b580      	push	{r7, lr}
 8003370:	b084      	sub	sp, #16
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	6039      	str	r1, [r7, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3380      	adds	r3, #128	; 0x80
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	731a      	strb	r2, [r3, #12]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80033a4:	4619      	mov	r1, r3
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f7ff fe6d 	bl	8003086 <ucg_font_decode_get_unsigned_bits>
 80033ac:	4603      	mov	r3, r0
 80033ae:	b25a      	sxtb	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	729a      	strb	r2, [r3, #10]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80033ba:	4619      	mov	r1, r3
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f7ff fe62 	bl	8003086 <ucg_font_decode_get_unsigned_bits>
 80033c2:	4603      	mov	r3, r0
 80033c4:	b25a      	sxtb	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	72da      	strb	r2, [r3, #11]
 80033ca:	bf00      	nop
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <ucg_font_decode_glyph>:
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	6039      	str	r1, [r7, #0]
 80033dc:	6839      	ldr	r1, [r7, #0]
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7ff ffc5 	bl	800336e <ucg_font_setup_decode>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 80033ea:	73fb      	strb	r3, [r7, #15]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80033f8:	4619      	mov	r1, r3
 80033fa:	4610      	mov	r0, r2
 80033fc:	f7ff fe8e 	bl	800311c <ucg_font_decode_get_signed_bits>
 8003400:	4603      	mov	r3, r0
 8003402:	73bb      	strb	r3, [r7, #14]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8003410:	4619      	mov	r1, r3
 8003412:	4610      	mov	r0, r2
 8003414:	f7ff fe82 	bl	800311c <ucg_font_decode_get_signed_bits>
 8003418:	4603      	mov	r3, r0
 800341a:	737b      	strb	r3, [r7, #13]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003428:	4619      	mov	r1, r3
 800342a:	4610      	mov	r0, r2
 800342c:	f7ff fe76 	bl	800311c <ucg_font_decode_get_signed_bits>
 8003430:	4603      	mov	r3, r0
 8003432:	733b      	strb	r3, [r7, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f993 308a 	ldrsb.w	r3, [r3, #138]	; 0x8a
 800343a:	2b00      	cmp	r3, #0
 800343c:	dd69      	ble.n	8003512 <ucg_font_decode_glyph+0x140>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f9b3 0084 	ldrsh.w	r0, [r3, #132]	; 0x84
 8003444:	7bfa      	ldrb	r2, [r7, #15]
 8003446:	7b7b      	ldrb	r3, [r7, #13]
 8003448:	4413      	add	r3, r2
 800344a:	b2db      	uxtb	r3, r3
 800344c:	425b      	negs	r3, r3
 800344e:	b2db      	uxtb	r3, r3
 8003450:	b25a      	sxtb	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8003458:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800345c:	f7ff febe 	bl	80031dc <ucg_add_vector_x>
 8003460:	4603      	mov	r3, r0
 8003462:	461a      	mov	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f9b3 0086 	ldrsh.w	r0, [r3, #134]	; 0x86
 8003470:	7bfa      	ldrb	r2, [r7, #15]
 8003472:	7b7b      	ldrb	r3, [r7, #13]
 8003474:	4413      	add	r3, r2
 8003476:	b2db      	uxtb	r3, r3
 8003478:	425b      	negs	r3, r3
 800347a:	b2db      	uxtb	r3, r3
 800347c:	b25a      	sxtb	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8003484:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8003488:	f7ff fe6b 	bl	8003162 <ucg_add_vector_y>
 800348c:	4603      	mov	r3, r0
 800348e:	461a      	mov	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80034b2:	4619      	mov	r1, r3
 80034b4:	4610      	mov	r0, r2
 80034b6:	f7ff fde6 	bl	8003086 <ucg_font_decode_get_unsigned_bits>
 80034ba:	4603      	mov	r3, r0
 80034bc:	72fb      	strb	r3, [r7, #11]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80034ca:	4619      	mov	r1, r3
 80034cc:	4610      	mov	r0, r2
 80034ce:	f7ff fdda 	bl	8003086 <ucg_font_decode_get_unsigned_bits>
 80034d2:	4603      	mov	r3, r0
 80034d4:	72bb      	strb	r3, [r7, #10]
 80034d6:	7afb      	ldrb	r3, [r7, #11]
 80034d8:	2200      	movs	r2, #0
 80034da:	4619      	mov	r1, r3
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7ff feba 	bl	8003256 <ucg_font_decode_len>
 80034e2:	7abb      	ldrb	r3, [r7, #10]
 80034e4:	2201      	movs	r2, #1
 80034e6:	4619      	mov	r1, r3
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7ff feb4 	bl	8003256 <ucg_font_decode_len>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3380      	adds	r3, #128	; 0x80
 80034f2:	2101      	movs	r1, #1
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff fdc6 	bl	8003086 <ucg_font_decode_get_unsigned_bits>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1ea      	bne.n	80034d6 <ucg_font_decode_glyph+0x104>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f993 3089 	ldrsb.w	r3, [r3, #137]	; 0x89
 8003506:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800350a:	429a      	cmp	r2, r3
 800350c:	dd00      	ble.n	8003510 <ucg_font_decode_glyph+0x13e>
 800350e:	e7ca      	b.n	80034a6 <ucg_font_decode_glyph+0xd4>
 8003510:	bf00      	nop
 8003512:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <ucg_font_get_glyph_data>:
 800351e:	b480      	push	{r7}
 8003520:	b085      	sub	sp, #20
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
 8003526:	460b      	mov	r3, r1
 8003528:	70fb      	strb	r3, [r7, #3]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	3315      	adds	r3, #21
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	78fb      	ldrb	r3, [r7, #3]
 8003538:	2b60      	cmp	r3, #96	; 0x60
 800353a:	d907      	bls.n	800354c <ucg_font_get_glyph_data+0x2e>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8003542:	461a      	mov	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4413      	add	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	e009      	b.n	8003560 <ucg_font_get_glyph_data+0x42>
 800354c:	78fb      	ldrb	r3, [r7, #3]
 800354e:	2b40      	cmp	r3, #64	; 0x40
 8003550:	d906      	bls.n	8003560 <ucg_font_get_glyph_data+0x42>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8003558:	461a      	mov	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4413      	add	r3, r2
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	3301      	adds	r3, #1
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00e      	beq.n	8003588 <ucg_font_get_glyph_data+0x6a>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	78fa      	ldrb	r2, [r7, #3]
 8003570:	429a      	cmp	r2, r3
 8003572:	d101      	bne.n	8003578 <ucg_font_get_glyph_data+0x5a>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	e009      	b.n	800358c <ucg_font_get_glyph_data+0x6e>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	3301      	adds	r3, #1
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4413      	add	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	e7eb      	b.n	8003560 <ucg_font_get_glyph_data+0x42>
 8003588:	bf00      	nop
 800358a:	2300      	movs	r3, #0
 800358c:	4618      	mov	r0, r3
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <ucg_font_draw_glyph>:
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	4608      	mov	r0, r1
 80035a2:	4611      	mov	r1, r2
 80035a4:	461a      	mov	r2, r3
 80035a6:	4603      	mov	r3, r0
 80035a8:	817b      	strh	r3, [r7, #10]
 80035aa:	460b      	mov	r3, r1
 80035ac:	813b      	strh	r3, [r7, #8]
 80035ae:	4613      	mov	r3, r2
 80035b0:	71fb      	strb	r3, [r7, #7]
 80035b2:	2300      	movs	r3, #0
 80035b4:	82fb      	strh	r3, [r7, #22]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	897a      	ldrh	r2, [r7, #10]
 80035ba:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	893a      	ldrh	r2, [r7, #8]
 80035c2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	79fa      	ldrb	r2, [r7, #7]
 80035ca:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 80035ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80035d2:	4619      	mov	r1, r3
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f7ff ffa2 	bl	800351e <ucg_font_get_glyph_data>
 80035da:	6138      	str	r0, [r7, #16]
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d005      	beq.n	80035ee <ucg_font_draw_glyph+0x56>
 80035e2:	6939      	ldr	r1, [r7, #16]
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f7ff fef4 	bl	80033d2 <ucg_font_decode_glyph>
 80035ea:	4603      	mov	r3, r0
 80035ec:	82fb      	strh	r3, [r7, #22]
 80035ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80035f2:	4618      	mov	r0, r3
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <ucg_SetFontMode>:
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	460b      	mov	r3, r1
 8003604:	70fb      	strb	r3, [r7, #3]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	78fa      	ldrb	r2, [r7, #3]
 800360a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
	...

0800361c <ucg_DrawGlyph>:
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af02      	add	r7, sp, #8
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	4608      	mov	r0, r1
 8003626:	4611      	mov	r1, r2
 8003628:	461a      	mov	r2, r3
 800362a:	4603      	mov	r3, r0
 800362c:	817b      	strh	r3, [r7, #10]
 800362e:	460b      	mov	r3, r1
 8003630:	813b      	strh	r3, [r7, #8]
 8003632:	4613      	mov	r3, r2
 8003634:	71fb      	strb	r3, [r7, #7]
 8003636:	79fb      	ldrb	r3, [r7, #7]
 8003638:	2b03      	cmp	r3, #3
 800363a:	d837      	bhi.n	80036ac <ucg_DrawGlyph+0x90>
 800363c:	a201      	add	r2, pc, #4	; (adr r2, 8003644 <ucg_DrawGlyph+0x28>)
 800363e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003642:	bf00      	nop
 8003644:	08003655 	.word	0x08003655
 8003648:	0800366b 	.word	0x0800366b
 800364c:	08003681 	.word	0x08003681
 8003650:	08003697 	.word	0x08003697
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	4798      	blx	r3
 800365c:	4603      	mov	r3, r0
 800365e:	b29a      	uxth	r2, r3
 8003660:	893b      	ldrh	r3, [r7, #8]
 8003662:	4413      	add	r3, r2
 8003664:	b29b      	uxth	r3, r3
 8003666:	813b      	strh	r3, [r7, #8]
 8003668:	e020      	b.n	80036ac <ucg_DrawGlyph+0x90>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	4798      	blx	r3
 8003672:	4603      	mov	r3, r0
 8003674:	897a      	ldrh	r2, [r7, #10]
 8003676:	b29b      	uxth	r3, r3
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	b29b      	uxth	r3, r3
 800367c:	817b      	strh	r3, [r7, #10]
 800367e:	e015      	b.n	80036ac <ucg_DrawGlyph+0x90>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	4798      	blx	r3
 8003688:	4603      	mov	r3, r0
 800368a:	893a      	ldrh	r2, [r7, #8]
 800368c:	b29b      	uxth	r3, r3
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	b29b      	uxth	r3, r3
 8003692:	813b      	strh	r3, [r7, #8]
 8003694:	e00a      	b.n	80036ac <ucg_DrawGlyph+0x90>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	4798      	blx	r3
 800369e:	4603      	mov	r3, r0
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	897b      	ldrh	r3, [r7, #10]
 80036a4:	4413      	add	r3, r2
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	817b      	strh	r3, [r7, #10]
 80036aa:	bf00      	nop
 80036ac:	79f8      	ldrb	r0, [r7, #7]
 80036ae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80036b2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80036b6:	7e3b      	ldrb	r3, [r7, #24]
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	4603      	mov	r3, r0
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f7ff ff6b 	bl	8003598 <ucg_font_draw_glyph>
 80036c2:	4603      	mov	r3, r0
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <task_drawString>:
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af02      	add	r7, sp, #8
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	2300      	movs	r3, #0
 80036d6:	81fb      	strh	r3, [r7, #14]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	60bb      	str	r3, [r7, #8]
 80036dc:	4b45      	ldr	r3, [pc, #276]	; (80037f4 <task_drawString+0x128>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <task_drawString+0x1e>
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d01e      	beq.n	8003726 <task_drawString+0x5a>
 80036e8:	e07b      	b.n	80037e2 <task_drawString+0x116>
 80036ea:	4843      	ldr	r0, [pc, #268]	; (80037f8 <task_drawString+0x12c>)
 80036ec:	f000 fb7b 	bl	8003de6 <bufNumItems>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d007      	beq.n	8003706 <task_drawString+0x3a>
 80036f6:	4941      	ldr	r1, [pc, #260]	; (80037fc <task_drawString+0x130>)
 80036f8:	483f      	ldr	r0, [pc, #252]	; (80037f8 <task_drawString+0x12c>)
 80036fa:	f000 fc0d 	bl	8003f18 <bufDeDat>
 80036fe:	4b3d      	ldr	r3, [pc, #244]	; (80037f4 <task_drawString+0x128>)
 8003700:	2201      	movs	r2, #1
 8003702:	701a      	strb	r2, [r3, #0]
 8003704:	e071      	b.n	80037ea <task_drawString+0x11e>
 8003706:	4b3e      	ldr	r3, [pc, #248]	; (8003800 <task_drawString+0x134>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2bff      	cmp	r3, #255	; 0xff
 800370c:	d007      	beq.n	800371e <task_drawString+0x52>
 800370e:	4b3c      	ldr	r3, [pc, #240]	; (8003800 <task_drawString+0x134>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f7fe fbf6 	bl	8001f04 <TimerStop>
 8003718:	4b39      	ldr	r3, [pc, #228]	; (8003800 <task_drawString+0x134>)
 800371a:	22ff      	movs	r2, #255	; 0xff
 800371c:	701a      	strb	r2, [r3, #0]
 800371e:	4b35      	ldr	r3, [pc, #212]	; (80037f4 <task_drawString+0x128>)
 8003720:	2200      	movs	r2, #0
 8003722:	701a      	strb	r2, [r3, #0]
 8003724:	e061      	b.n	80037ea <task_drawString+0x11e>
 8003726:	4b35      	ldr	r3, [pc, #212]	; (80037fc <task_drawString+0x130>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d054      	beq.n	80037da <task_drawString+0x10e>
 8003730:	4b32      	ldr	r3, [pc, #200]	; (80037fc <task_drawString+0x130>)
 8003732:	f9b3 1000 	ldrsh.w	r1, [r3]
 8003736:	4b31      	ldr	r3, [pc, #196]	; (80037fc <task_drawString+0x130>)
 8003738:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800373c:	4b2f      	ldr	r3, [pc, #188]	; (80037fc <task_drawString+0x130>)
 800373e:	7918      	ldrb	r0, [r3, #4]
 8003740:	4b2e      	ldr	r3, [pc, #184]	; (80037fc <task_drawString+0x130>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	4603      	mov	r3, r0
 800374a:	68b8      	ldr	r0, [r7, #8]
 800374c:	f7ff ff66 	bl	800361c <ucg_DrawGlyph>
 8003750:	4603      	mov	r3, r0
 8003752:	81fb      	strh	r3, [r7, #14]
 8003754:	4b29      	ldr	r3, [pc, #164]	; (80037fc <task_drawString+0x130>)
 8003756:	791b      	ldrb	r3, [r3, #4]
 8003758:	2b03      	cmp	r3, #3
 800375a:	d837      	bhi.n	80037cc <task_drawString+0x100>
 800375c:	a201      	add	r2, pc, #4	; (adr r2, 8003764 <task_drawString+0x98>)
 800375e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003762:	bf00      	nop
 8003764:	08003775 	.word	0x08003775
 8003768:	0800378b 	.word	0x0800378b
 800376c:	080037a1 	.word	0x080037a1
 8003770:	080037b7 	.word	0x080037b7
 8003774:	4b21      	ldr	r3, [pc, #132]	; (80037fc <task_drawString+0x130>)
 8003776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800377a:	b29a      	uxth	r2, r3
 800377c:	89fb      	ldrh	r3, [r7, #14]
 800377e:	4413      	add	r3, r2
 8003780:	b29b      	uxth	r3, r3
 8003782:	b21a      	sxth	r2, r3
 8003784:	4b1d      	ldr	r3, [pc, #116]	; (80037fc <task_drawString+0x130>)
 8003786:	801a      	strh	r2, [r3, #0]
 8003788:	e021      	b.n	80037ce <task_drawString+0x102>
 800378a:	4b1c      	ldr	r3, [pc, #112]	; (80037fc <task_drawString+0x130>)
 800378c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003790:	b29a      	uxth	r2, r3
 8003792:	89fb      	ldrh	r3, [r7, #14]
 8003794:	4413      	add	r3, r2
 8003796:	b29b      	uxth	r3, r3
 8003798:	b21a      	sxth	r2, r3
 800379a:	4b18      	ldr	r3, [pc, #96]	; (80037fc <task_drawString+0x130>)
 800379c:	805a      	strh	r2, [r3, #2]
 800379e:	e016      	b.n	80037ce <task_drawString+0x102>
 80037a0:	4b16      	ldr	r3, [pc, #88]	; (80037fc <task_drawString+0x130>)
 80037a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	89fb      	ldrh	r3, [r7, #14]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	b21a      	sxth	r2, r3
 80037b0:	4b12      	ldr	r3, [pc, #72]	; (80037fc <task_drawString+0x130>)
 80037b2:	801a      	strh	r2, [r3, #0]
 80037b4:	e00b      	b.n	80037ce <task_drawString+0x102>
 80037b6:	4b11      	ldr	r3, [pc, #68]	; (80037fc <task_drawString+0x130>)
 80037b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80037bc:	b29a      	uxth	r2, r3
 80037be:	89fb      	ldrh	r3, [r7, #14]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	b21a      	sxth	r2, r3
 80037c6:	4b0d      	ldr	r3, [pc, #52]	; (80037fc <task_drawString+0x130>)
 80037c8:	805a      	strh	r2, [r3, #2]
 80037ca:	e000      	b.n	80037ce <task_drawString+0x102>
 80037cc:	bf00      	nop
 80037ce:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <task_drawString+0x130>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	3301      	adds	r3, #1
 80037d4:	4a09      	ldr	r2, [pc, #36]	; (80037fc <task_drawString+0x130>)
 80037d6:	6093      	str	r3, [r2, #8]
 80037d8:	e007      	b.n	80037ea <task_drawString+0x11e>
 80037da:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <task_drawString+0x128>)
 80037dc:	2200      	movs	r2, #0
 80037de:	701a      	strb	r2, [r3, #0]
 80037e0:	e003      	b.n	80037ea <task_drawString+0x11e>
 80037e2:	4b04      	ldr	r3, [pc, #16]	; (80037f4 <task_drawString+0x128>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	701a      	strb	r2, [r3, #0]
 80037e8:	bf00      	nop
 80037ea:	bf00      	nop
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20001d80 	.word	0x20001d80
 80037f8:	20000d70 	.word	0x20000d70
 80037fc:	20001ecc 	.word	0x20001ecc
 8003800:	20000598 	.word	0x20000598

08003804 <ucg_DrawString>:
 8003804:	b580      	push	{r7, lr}
 8003806:	b08a      	sub	sp, #40	; 0x28
 8003808:	af02      	add	r7, sp, #8
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	4608      	mov	r0, r1
 800380e:	4611      	mov	r1, r2
 8003810:	461a      	mov	r2, r3
 8003812:	4603      	mov	r3, r0
 8003814:	817b      	strh	r3, [r7, #10]
 8003816:	460b      	mov	r3, r1
 8003818:	813b      	strh	r3, [r7, #8]
 800381a:	4613      	mov	r3, r2
 800381c:	71fb      	strb	r3, [r7, #7]
 800381e:	2300      	movs	r3, #0
 8003820:	83fb      	strh	r3, [r7, #30]
 8003822:	897b      	ldrh	r3, [r7, #10]
 8003824:	823b      	strh	r3, [r7, #16]
 8003826:	893b      	ldrh	r3, [r7, #8]
 8003828:	827b      	strh	r3, [r7, #18]
 800382a:	79fb      	ldrb	r3, [r7, #7]
 800382c:	753b      	strb	r3, [r7, #20]
 800382e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003830:	61bb      	str	r3, [r7, #24]
 8003832:	f107 0310 	add.w	r3, r7, #16
 8003836:	4619      	mov	r1, r3
 8003838:	480c      	ldr	r0, [pc, #48]	; (800386c <ucg_DrawString+0x68>)
 800383a:	f000 fb1f 	bl	8003e7c <bufEnDat>
 800383e:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <ucg_DrawString+0x6c>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2bff      	cmp	r3, #255	; 0xff
 8003844:	d10b      	bne.n	800385e <ucg_DrawString+0x5a>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <ucg_DrawString+0x70>)
 800384c:	22ff      	movs	r2, #255	; 0xff
 800384e:	211e      	movs	r1, #30
 8003850:	4809      	ldr	r0, [pc, #36]	; (8003878 <ucg_DrawString+0x74>)
 8003852:	f7fe faf5 	bl	8001e40 <TimerStart>
 8003856:	4603      	mov	r3, r0
 8003858:	461a      	mov	r2, r3
 800385a:	4b05      	ldr	r3, [pc, #20]	; (8003870 <ucg_DrawString+0x6c>)
 800385c:	701a      	strb	r2, [r3, #0]
 800385e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003862:	4618      	mov	r0, r3
 8003864:	3720      	adds	r7, #32
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	20000d70 	.word	0x20000d70
 8003870:	20000598 	.word	0x20000598
 8003874:	080036cd 	.word	0x080036cd
 8003878:	08005b74 	.word	0x08005b74

0800387c <ucg_UpdateRefHeight>:
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003888:	2b00      	cmp	r3, #0
 800388a:	d05d      	beq.n	8003948 <ucg_UpdateRefHeight+0xcc>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f993 209d 	ldrsb.w	r2, [r3, #157]	; 0x9d
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f993 209e 	ldrsb.w	r2, [r3, #158]	; 0x9e
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d04d      	beq.n	800394a <ucg_UpdateRefHeight+0xce>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d11c      	bne.n	80038f2 <ucg_UpdateRefHeight+0x76>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f993 20ac 	ldrsb.w	r2, [r3, #172]	; 0xac
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f993 309f 	ldrsb.w	r3, [r3, #159]	; 0x9f
 80038c4:	429a      	cmp	r2, r3
 80038c6:	da05      	bge.n	80038d4 <ucg_UpdateRefHeight+0x58>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f993 209f 	ldrsb.w	r2, [r3, #159]	; 0x9f
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f993 20ad 	ldrsb.w	r2, [r3, #173]	; 0xad
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 80038e0:	429a      	cmp	r2, r3
 80038e2:	dd32      	ble.n	800394a <ucg_UpdateRefHeight+0xce>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f993 20a0 	ldrsb.w	r2, [r3, #160]	; 0xa0
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 80038f0:	e02b      	b.n	800394a <ucg_UpdateRefHeight+0xce>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f993 30ac 	ldrsb.w	r3, [r3, #172]	; 0xac
 80038f8:	461a      	mov	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f993 309a 	ldrsb.w	r3, [r3, #154]	; 0x9a
 8003900:	4619      	mov	r1, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 8003908:	440b      	add	r3, r1
 800390a:	429a      	cmp	r2, r3
 800390c:	da0d      	bge.n	800392a <ucg_UpdateRefHeight+0xae>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f993 309a 	ldrsb.w	r3, [r3, #154]	; 0x9a
 8003914:	b2da      	uxtb	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 800391c:	b2db      	uxtb	r3, r3
 800391e:	4413      	add	r3, r2
 8003920:	b2db      	uxtb	r3, r3
 8003922:	b25a      	sxtb	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f993 20ad 	ldrsb.w	r2, [r3, #173]	; 0xad
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 8003936:	429a      	cmp	r2, r3
 8003938:	dd07      	ble.n	800394a <ucg_UpdateRefHeight+0xce>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f993 209c 	ldrsb.w	r2, [r3, #156]	; 0x9c
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8003946:	e000      	b.n	800394a <ucg_UpdateRefHeight+0xce>
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <ucg_font_calc_vref_font>:
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	2300      	movs	r3, #0
 800395e:	4618      	mov	r0, r3
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
	...

0800396c <ucg_SetFontPosBaseline>:
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a04      	ldr	r2, [pc, #16]	; (8003988 <ucg_SetFontPosBaseline+0x1c>)
 8003978:	67da      	str	r2, [r3, #124]	; 0x7c
 800397a:	bf00      	nop
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	08003955 	.word	0x08003955

0800398c <ucg_SetFont>:
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d012      	beq.n	80039c6 <ucg_SetFont+0x3a>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	679a      	str	r2, [r3, #120]	; 0x78
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3390      	adds	r3, #144	; 0x90
 80039aa:	6839      	ldr	r1, [r7, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff fac9 	bl	8002f44 <ucg_read_font_info>
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7ff ff62 	bl	800387c <ucg_UpdateRefHeight>
 80039b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039bc:	220c      	movs	r2, #12
 80039be:	4904      	ldr	r1, [pc, #16]	; (80039d0 <ucg_SetFont+0x44>)
 80039c0:	4804      	ldr	r0, [pc, #16]	; (80039d4 <ucg_SetFont+0x48>)
 80039c2:	f000 f9f5 	bl	8003db0 <bufInit>
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000d70 	.word	0x20000d70
 80039d4:	20000d80 	.word	0x20000d80

080039d8 <ucg_init_struct>:
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	7813      	ldrb	r3, [r2, #0]
 80039e4:	f36f 0300 	bfc	r3, #0, #1
 80039e8:	7013      	strb	r3, [r2, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	611a      	str	r2, [r3, #16]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	865a      	strh	r2, [r3, #50]	; 0x32
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	679a      	str	r2, [r3, #120]	; 0x78
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <ucg_Init>:
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
 8003a34:	603b      	str	r3, [r7, #0]
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f7ff ffce 	bl	80039d8 <ucg_init_struct>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d103      	bne.n	8003a4a <ucg_Init+0x22>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4a0e      	ldr	r2, [pc, #56]	; (8003a80 <ucg_Init+0x58>)
 8003a46:	60da      	str	r2, [r3, #12]
 8003a48:	e002      	b.n	8003a50 <ucg_Init+0x28>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	60da      	str	r2, [r3, #12]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	609a      	str	r2, [r3, #8]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	61da      	str	r2, [r3, #28]
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f7ff ff85 	bl	800396c <ucg_SetFontPosBaseline>
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f7ff f996 	bl	8002d94 <ucg_PowerUp>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	82fb      	strh	r3, [r7, #22]
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f7ff f9d6 	bl	8002e1e <ucg_GetDimension>
 8003a72:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003a76:	4618      	mov	r0, r3
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	080029f7 	.word	0x080029f7

08003a84 <ucg_Draw90Line>:
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	4608      	mov	r0, r1
 8003a8e:	4611      	mov	r1, r2
 8003a90:	461a      	mov	r2, r3
 8003a92:	4603      	mov	r3, r0
 8003a94:	817b      	strh	r3, [r7, #10]
 8003a96:	460b      	mov	r3, r1
 8003a98:	813b      	strh	r3, [r7, #8]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	80fb      	strh	r3, [r7, #6]
 8003a9e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003aa2:	68f9      	ldr	r1, [r7, #12]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	4413      	add	r3, r2
 8003aaa:	440b      	add	r3, r1
 8003aac:	333a      	adds	r3, #58	; 0x3a
 8003aae:	781a      	ldrb	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003ab6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003aba:	68f9      	ldr	r1, [r7, #12]
 8003abc:	4613      	mov	r3, r2
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	4413      	add	r3, r2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	333b      	adds	r3, #59	; 0x3b
 8003ac6:	781a      	ldrb	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8003ace:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003ad2:	68f9      	ldr	r1, [r7, #12]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	4413      	add	r3, r2
 8003ada:	440b      	add	r3, r1
 8003adc:	333c      	adds	r3, #60	; 0x3c
 8003ade:	781a      	ldrb	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	897a      	ldrh	r2, [r7, #10]
 8003aea:	849a      	strh	r2, [r3, #36]	; 0x24
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	893a      	ldrh	r2, [r7, #8]
 8003af0:	84da      	strh	r2, [r3, #38]	; 0x26
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	88fa      	ldrh	r2, [r7, #6]
 8003af6:	859a      	strh	r2, [r3, #44]	; 0x2c
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8b3a      	ldrh	r2, [r7, #24]
 8003afc:	85da      	strh	r2, [r3, #46]	; 0x2e
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f7ff f99f 	bl	8002e42 <ucg_DrawL90FXWithArg>
 8003b04:	bf00      	nop
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <ucg_DrawHLine>:
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af02      	add	r7, sp, #8
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	4608      	mov	r0, r1
 8003b16:	4611      	mov	r1, r2
 8003b18:	461a      	mov	r2, r3
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	817b      	strh	r3, [r7, #10]
 8003b1e:	460b      	mov	r3, r1
 8003b20:	813b      	strh	r3, [r7, #8]
 8003b22:	4613      	mov	r3, r2
 8003b24:	80fb      	strh	r3, [r7, #6]
 8003b26:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003b2a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003b2e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003b32:	2300      	movs	r3, #0
 8003b34:	9301      	str	r3, [sp, #4]
 8003b36:	2300      	movs	r3, #0
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f7ff ffa1 	bl	8003a84 <ucg_Draw90Line>
 8003b42:	bf00      	nop
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <ucg_DrawVLine>:
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b086      	sub	sp, #24
 8003b4e:	af02      	add	r7, sp, #8
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	4608      	mov	r0, r1
 8003b54:	4611      	mov	r1, r2
 8003b56:	461a      	mov	r2, r3
 8003b58:	4603      	mov	r3, r0
 8003b5a:	817b      	strh	r3, [r7, #10]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	813b      	strh	r3, [r7, #8]
 8003b60:	4613      	mov	r3, r2
 8003b62:	80fb      	strh	r3, [r7, #6]
 8003b64:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003b68:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003b6c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003b70:	2300      	movs	r3, #0
 8003b72:	9301      	str	r3, [sp, #4]
 8003b74:	2301      	movs	r3, #1
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	4603      	mov	r3, r0
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f7ff ff82 	bl	8003a84 <ucg_Draw90Line>
 8003b80:	bf00      	nop
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <ucg_SetColor>:
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	4608      	mov	r0, r1
 8003b92:	4611      	mov	r1, r2
 8003b94:	461a      	mov	r2, r3
 8003b96:	4603      	mov	r3, r0
 8003b98:	70fb      	strb	r3, [r7, #3]
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	70bb      	strb	r3, [r7, #2]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	707b      	strb	r3, [r7, #1]
 8003ba2:	78fa      	ldrb	r2, [r7, #3]
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	4413      	add	r3, r2
 8003bac:	440b      	add	r3, r1
 8003bae:	333a      	adds	r3, #58	; 0x3a
 8003bb0:	78ba      	ldrb	r2, [r7, #2]
 8003bb2:	701a      	strb	r2, [r3, #0]
 8003bb4:	78fa      	ldrb	r2, [r7, #3]
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	4413      	add	r3, r2
 8003bbe:	440b      	add	r3, r1
 8003bc0:	333b      	adds	r3, #59	; 0x3b
 8003bc2:	787a      	ldrb	r2, [r7, #1]
 8003bc4:	701a      	strb	r2, [r3, #0]
 8003bc6:	78fa      	ldrb	r2, [r7, #3]
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	4413      	add	r3, r2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	333c      	adds	r3, #60	; 0x3c
 8003bd4:	7c3a      	ldrb	r2, [r7, #16]
 8003bd6:	701a      	strb	r2, [r3, #0]
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <ucg_UndoRotate>:
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d006      	beq.n	8003c02 <ucg_UndoRotate+0x1e>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	609a      	str	r2, [r3, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	611a      	str	r2, [r3, #16]
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7ff f90b 	bl	8002e1e <ucg_GetDimension>
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7ff f8f0 	bl	8002dee <ucg_SetMaxClipRange>
 8003c0e:	bf00      	nop
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <ucg_rotate_180_xy>:
 8003c16:	b480      	push	{r7}
 8003c18:	b085      	sub	sp, #20
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	6039      	str	r1, [r7, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	8adb      	ldrh	r3, [r3, #22]
 8003c24:	81fb      	strh	r3, [r7, #14]
 8003c26:	89fa      	ldrh	r2, [r7, #14]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	81fb      	strh	r3, [r7, #14]
 8003c36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	81fb      	strh	r3, [r7, #14]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	89fa      	ldrh	r2, [r7, #14]
 8003c46:	805a      	strh	r2, [r3, #2]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	8a9b      	ldrh	r3, [r3, #20]
 8003c4c:	81bb      	strh	r3, [r7, #12]
 8003c4e:	89ba      	ldrh	r2, [r7, #12]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	81bb      	strh	r3, [r7, #12]
 8003c5e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	81bb      	strh	r3, [r7, #12]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	89ba      	ldrh	r2, [r7, #12]
 8003c6e:	801a      	strh	r2, [r3, #0]
 8003c70:	bf00      	nop
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <ucg_dev_rotate180>:
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	460b      	mov	r3, r1
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	817b      	strh	r3, [r7, #10]
 8003c8a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003c8e:	3b0c      	subs	r3, #12
 8003c90:	2b0b      	cmp	r3, #11
 8003c92:	d866      	bhi.n	8003d62 <ucg_dev_rotate180+0xe6>
 8003c94:	a201      	add	r2, pc, #4	; (adr r2, 8003c9c <ucg_dev_rotate180+0x20>)
 8003c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9a:	bf00      	nop
 8003c9c:	08003ceb 	.word	0x08003ceb
 8003ca0:	08003d63 	.word	0x08003d63
 8003ca4:	08003d63 	.word	0x08003d63
 8003ca8:	08003ccd 	.word	0x08003ccd
 8003cac:	08003d63 	.word	0x08003d63
 8003cb0:	08003d63 	.word	0x08003d63
 8003cb4:	08003d63 	.word	0x08003d63
 8003cb8:	08003d63 	.word	0x08003d63
 8003cbc:	08003d33 	.word	0x08003d33
 8003cc0:	08003d33 	.word	0x08003d33
 8003cc4:	08003d63 	.word	0x08003d63
 8003cc8:	08003d33 	.word	0x08003d33
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	3214      	adds	r2, #20
 8003cd4:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	4798      	blx	r3
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	3314      	adds	r3, #20
 8003ce2:	6818      	ldr	r0, [r3, #0]
 8003ce4:	6010      	str	r0, [r2, #0]
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e043      	b.n	8003d72 <ucg_dev_rotate180+0xf6>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	b21a      	sxth	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	805a      	strh	r2, [r3, #2]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	4413      	add	r3, r2
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	b21a      	sxth	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	801a      	strh	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4619      	mov	r1, r3
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f7ff ff73 	bl	8003c16 <ucg_rotate_180_xy>
 8003d30:	e017      	b.n	8003d62 <ucg_dev_rotate180+0xe6>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	3302      	adds	r3, #2
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	b21a      	sxth	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	85da      	strh	r2, [r3, #46]	; 0x2e
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	b21a      	sxth	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	85da      	strh	r2, [r3, #46]	; 0x2e
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	3324      	adds	r3, #36	; 0x24
 8003d58:	4619      	mov	r1, r3
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f7ff ff5b 	bl	8003c16 <ucg_rotate_180_xy>
 8003d60:	bf00      	nop
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	4798      	blx	r3
 8003d70:	4603      	mov	r3, r0
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop

08003d7c <ucg_SetRotate180>:
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff ff2d 	bl	8003be4 <ucg_UndoRotate>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689a      	ldr	r2, [r3, #8]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	611a      	str	r2, [r3, #16]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a05      	ldr	r2, [pc, #20]	; (8003dac <ucg_SetRotate180+0x30>)
 8003d96:	609a      	str	r2, [r3, #8]
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7ff f840 	bl	8002e1e <ucg_GetDimension>
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7ff f825 	bl	8002dee <ucg_SetMaxClipRange>
 8003da4:	bf00      	nop
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	08003c7d 	.word	0x08003c7d

08003db0 <bufInit>:
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	4611      	mov	r1, r2
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	71fb      	strb	r3, [r7, #7]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	80bb      	strh	r3, [r7, #4]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	88ba      	ldrh	r2, [r7, #4]
 8003dca:	801a      	strh	r2, [r3, #0]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	79fa      	ldrb	r2, [r7, #7]
 8003dd0:	711a      	strb	r2, [r3, #4]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	60da      	str	r2, [r3, #12]
 8003dd8:	68b8      	ldr	r0, [r7, #8]
 8003dda:	f000 f836 	bl	8003e4a <bufFlush>
 8003dde:	bf00      	nop
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <bufNumItems>:
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	885b      	ldrh	r3, [r3, #2]
 8003df2:	4618      	mov	r0, r3
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <bufIsFull>:
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	885a      	ldrh	r2, [r3, #2]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	bf2c      	ite	cs
 8003e12:	2301      	movcs	r3, #1
 8003e14:	2300      	movcc	r3, #0
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	4618      	mov	r0, r3
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <bufIsEmpty>:
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	88da      	ldrh	r2, [r3, #6]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	891b      	ldrh	r3, [r3, #8]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	bf0c      	ite	eq
 8003e38:	2301      	moveq	r3, #1
 8003e3a:	2300      	movne	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	4618      	mov	r0, r3
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <bufFlush>:
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b082      	sub	sp, #8
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	80da      	strh	r2, [r3, #6]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	811a      	strh	r2, [r3, #8]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	805a      	strh	r2, [r3, #2]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68d8      	ldr	r0, [r3, #12]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	2100      	movs	r1, #0
 8003e70:	f000 f894 	bl	8003f9c <memsetl>
 8003e74:	bf00      	nop
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <bufEnDat>:
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
 8003e86:	b672      	cpsid	i
 8003e88:	2300      	movs	r3, #0
 8003e8a:	73fb      	strb	r3, [r7, #15]
 8003e8c:	e021      	b.n	8003ed2 <bufEnDat+0x56>
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	441a      	add	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	6879      	ldr	r1, [r7, #4]
 8003e9a:	88c9      	ldrh	r1, [r1, #6]
 8003e9c:	440b      	add	r3, r1
 8003e9e:	7812      	ldrb	r2, [r2, #0]
 8003ea0:	701a      	strb	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	88db      	ldrh	r3, [r3, #6]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	b21a      	sxth	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	b21b      	sxth	r3, r3
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	b21b      	sxth	r3, r3
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	80da      	strh	r2, [r3, #6]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	885b      	ldrh	r3, [r3, #2]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	805a      	strh	r2, [r3, #2]
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	73fb      	strb	r3, [r7, #15]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	791b      	ldrb	r3, [r3, #4]
 8003ed6:	7bfa      	ldrb	r2, [r7, #15]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d3d8      	bcc.n	8003e8e <bufEnDat+0x12>
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff ff8e 	bl	8003dfe <bufIsFull>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d011      	beq.n	8003f0c <bufEnDat+0x90>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	891a      	ldrh	r2, [r3, #8]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	791b      	ldrb	r3, [r3, #4]
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	4413      	add	r3, r2
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	b21a      	sxth	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	b21b      	sxth	r3, r3
 8003f02:	4013      	ands	r3, r2
 8003f04:	b21b      	sxth	r3, r3
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	811a      	strh	r2, [r3, #8]
 8003f0c:	b662      	cpsie	i
 8003f0e:	2300      	movs	r3, #0
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <bufDeDat>:
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
 8003f22:	b672      	cpsid	i
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7ff ff7d 	bl	8003e24 <bufIsEmpty>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d005      	beq.n	8003f3c <bufDeDat+0x24>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	805a      	strh	r2, [r3, #2]
 8003f36:	b662      	cpsie	i
 8003f38:	2302      	movs	r3, #2
 8003f3a:	e02b      	b.n	8003f94 <bufDeDat+0x7c>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	73fb      	strb	r3, [r7, #15]
 8003f40:	e021      	b.n	8003f86 <bufDeDat+0x6e>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	8912      	ldrh	r2, [r2, #8]
 8003f4a:	441a      	add	r2, r3
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
 8003f4e:	6839      	ldr	r1, [r7, #0]
 8003f50:	440b      	add	r3, r1
 8003f52:	7812      	ldrb	r2, [r2, #0]
 8003f54:	701a      	strb	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	891b      	ldrh	r3, [r3, #8]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	b21a      	sxth	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	881b      	ldrh	r3, [r3, #0]
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	b21b      	sxth	r3, r3
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	b21b      	sxth	r3, r3
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	811a      	strh	r2, [r3, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	885b      	ldrh	r3, [r3, #2]
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	805a      	strh	r2, [r3, #2]
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
 8003f82:	3301      	adds	r3, #1
 8003f84:	73fb      	strb	r3, [r7, #15]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	791b      	ldrb	r3, [r3, #4]
 8003f8a:	7bfa      	ldrb	r2, [r7, #15]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d3d8      	bcc.n	8003f42 <bufDeDat+0x2a>
 8003f90:	b662      	cpsie	i
 8003f92:	2300      	movs	r3, #0
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <memsetl>:
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	70fb      	strb	r3, [r7, #3]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	803b      	strh	r3, [r7, #0]
 8003fac:	e004      	b.n	8003fb8 <memsetl+0x1c>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	78fa      	ldrb	r2, [r7, #3]
 8003fb6:	701a      	strb	r2, [r3, #0]
 8003fb8:	883b      	ldrh	r3, [r7, #0]
 8003fba:	1e5a      	subs	r2, r3, #1
 8003fbc:	803a      	strh	r2, [r7, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f5      	bne.n	8003fae <memsetl+0x12>
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <ADC_DeInit>:
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003fd8:	f7fd fe62 	bl	8001ca0 <RCC_APB2PeriphResetCmd>
 8003fdc:	2100      	movs	r1, #0
 8003fde:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003fe2:	f7fd fe5d 	bl	8001ca0 <RCC_APB2PeriphResetCmd>
 8003fe6:	bf00      	nop
 8003fe8:	bd80      	pop	{r7, pc}
	...

08003fec <ADC_Init>:
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	72fb      	strb	r3, [r7, #11]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800400a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	791b      	ldrb	r3, [r3, #4]
 8004014:	021a      	lsls	r2, r3, #8
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4313      	orrs	r3, r2
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	605a      	str	r2, [r3, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	4b18      	ldr	r3, [pc, #96]	; (8004094 <ADC_Init+0xa8>)
 8004032:	4013      	ands	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	691a      	ldr	r2, [r3, #16]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	431a      	orrs	r2, r3
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	431a      	orrs	r2, r3
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	795b      	ldrb	r3, [r3, #5]
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	4313      	orrs	r3, r2
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	4313      	orrs	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	609a      	str	r2, [r3, #8]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	7d1b      	ldrb	r3, [r3, #20]
 800406c:	3b01      	subs	r3, #1
 800406e:	b2da      	uxtb	r2, r3
 8004070:	7afb      	ldrb	r3, [r7, #11]
 8004072:	4313      	orrs	r3, r2
 8004074:	72fb      	strb	r3, [r7, #11]
 8004076:	7afb      	ldrb	r3, [r7, #11]
 8004078:	051b      	lsls	r3, r3, #20
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	4313      	orrs	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	62da      	str	r2, [r3, #44]	; 0x2c
 8004086:	bf00      	nop
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	c0fff7fd 	.word	0xc0fff7fd

08004098 <ADC_CommonInit>:
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	2300      	movs	r3, #0
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	4b0e      	ldr	r3, [pc, #56]	; (80040e0 <ADC_CommonInit+0x48>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	4b0d      	ldr	r3, [pc, #52]	; (80040e4 <ADC_CommonInit+0x4c>)
 80040ae:	4013      	ands	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	431a      	orrs	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	4a04      	ldr	r2, [pc, #16]	; (80040e0 <ADC_CommonInit+0x48>)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6053      	str	r3, [r2, #4]
 80040d4:	bf00      	nop
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	40012300 	.word	0x40012300
 80040e4:	fffc30e0 	.word	0xfffc30e0

080040e8 <ADC_Cmd>:
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	460b      	mov	r3, r1
 80040f2:	70fb      	strb	r3, [r7, #3]
 80040f4:	78fb      	ldrb	r3, [r7, #3]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d006      	beq.n	8004108 <ADC_Cmd+0x20>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f043 0201 	orr.w	r2, r3, #1
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	609a      	str	r2, [r3, #8]
 8004106:	e005      	b.n	8004114 <ADC_Cmd+0x2c>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f023 0201 	bic.w	r2, r3, #1
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	609a      	str	r2, [r3, #8]
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <ADC_RegularChannelConfig>:
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	4608      	mov	r0, r1
 800412a:	4611      	mov	r1, r2
 800412c:	461a      	mov	r2, r3
 800412e:	4603      	mov	r3, r0
 8004130:	70fb      	strb	r3, [r7, #3]
 8004132:	460b      	mov	r3, r1
 8004134:	70bb      	strb	r3, [r7, #2]
 8004136:	4613      	mov	r3, r2
 8004138:	707b      	strb	r3, [r7, #1]
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	2300      	movs	r3, #0
 8004140:	60bb      	str	r3, [r7, #8]
 8004142:	78fb      	ldrb	r3, [r7, #3]
 8004144:	2b09      	cmp	r3, #9
 8004146:	d923      	bls.n	8004190 <ADC_RegularChannelConfig+0x70>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	78fb      	ldrb	r3, [r7, #3]
 8004150:	f1a3 020a 	sub.w	r2, r3, #10
 8004154:	4613      	mov	r3, r2
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	4413      	add	r3, r2
 800415a:	2207      	movs	r2, #7
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	60bb      	str	r3, [r7, #8]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	43db      	mvns	r3, r3
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4013      	ands	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	7879      	ldrb	r1, [r7, #1]
 800416e:	78fb      	ldrb	r3, [r7, #3]
 8004170:	f1a3 020a 	sub.w	r2, r3, #10
 8004174:	4613      	mov	r3, r2
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	4413      	add	r3, r2
 800417a:	fa01 f303 	lsl.w	r3, r1, r3
 800417e:	60bb      	str	r3, [r7, #8]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	4313      	orrs	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	60da      	str	r2, [r3, #12]
 800418e:	e01e      	b.n	80041ce <ADC_RegularChannelConfig+0xae>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	78fa      	ldrb	r2, [r7, #3]
 8004198:	4613      	mov	r3, r2
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	4413      	add	r3, r2
 800419e:	2207      	movs	r2, #7
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	60bb      	str	r3, [r7, #8]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	43db      	mvns	r3, r3
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	4013      	ands	r3, r2
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	7879      	ldrb	r1, [r7, #1]
 80041b2:	78fa      	ldrb	r2, [r7, #3]
 80041b4:	4613      	mov	r3, r2
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	4413      	add	r3, r2
 80041ba:	fa01 f303 	lsl.w	r3, r1, r3
 80041be:	60bb      	str	r3, [r7, #8]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	611a      	str	r2, [r3, #16]
 80041ce:	78bb      	ldrb	r3, [r7, #2]
 80041d0:	2b06      	cmp	r3, #6
 80041d2:	d821      	bhi.n	8004218 <ADC_RegularChannelConfig+0xf8>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	78bb      	ldrb	r3, [r7, #2]
 80041dc:	1e5a      	subs	r2, r3, #1
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	221f      	movs	r2, #31
 80041e6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ea:	60bb      	str	r3, [r7, #8]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	43db      	mvns	r3, r3
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	4013      	ands	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	78f9      	ldrb	r1, [r7, #3]
 80041f8:	78bb      	ldrb	r3, [r7, #2]
 80041fa:	1e5a      	subs	r2, r3, #1
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	fa01 f303 	lsl.w	r3, r1, r3
 8004206:	60bb      	str	r3, [r7, #8]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	635a      	str	r2, [r3, #52]	; 0x34
 8004216:	e047      	b.n	80042a8 <ADC_RegularChannelConfig+0x188>
 8004218:	78bb      	ldrb	r3, [r7, #2]
 800421a:	2b0c      	cmp	r3, #12
 800421c:	d821      	bhi.n	8004262 <ADC_RegularChannelConfig+0x142>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004222:	60fb      	str	r3, [r7, #12]
 8004224:	78bb      	ldrb	r3, [r7, #2]
 8004226:	1fda      	subs	r2, r3, #7
 8004228:	4613      	mov	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	221f      	movs	r2, #31
 8004230:	fa02 f303 	lsl.w	r3, r2, r3
 8004234:	60bb      	str	r3, [r7, #8]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	43db      	mvns	r3, r3
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	4013      	ands	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	78f9      	ldrb	r1, [r7, #3]
 8004242:	78bb      	ldrb	r3, [r7, #2]
 8004244:	1fda      	subs	r2, r3, #7
 8004246:	4613      	mov	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	fa01 f303 	lsl.w	r3, r1, r3
 8004250:	60bb      	str	r3, [r7, #8]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	631a      	str	r2, [r3, #48]	; 0x30
 8004260:	e022      	b.n	80042a8 <ADC_RegularChannelConfig+0x188>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	78bb      	ldrb	r3, [r7, #2]
 800426a:	f1a3 020d 	sub.w	r2, r3, #13
 800426e:	4613      	mov	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	221f      	movs	r2, #31
 8004276:	fa02 f303 	lsl.w	r3, r2, r3
 800427a:	60bb      	str	r3, [r7, #8]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	43db      	mvns	r3, r3
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	4013      	ands	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	78f9      	ldrb	r1, [r7, #3]
 8004288:	78bb      	ldrb	r3, [r7, #2]
 800428a:	f1a3 020d 	sub.w	r2, r3, #13
 800428e:	4613      	mov	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	fa01 f303 	lsl.w	r3, r1, r3
 8004298:	60bb      	str	r3, [r7, #8]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80042a8:	bf00      	nop
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <ADC_SoftwareStartConv>:
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	609a      	str	r2, [r3, #8]
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <ADC_EOCOnEachRegularChannelCmd>:
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	460b      	mov	r3, r1
 80042de:	70fb      	strb	r3, [r7, #3]
 80042e0:	78fb      	ldrb	r3, [r7, #3]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d006      	beq.n	80042f4 <ADC_EOCOnEachRegularChannelCmd+0x20>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	609a      	str	r2, [r3, #8]
 80042f2:	e005      	b.n	8004300 <ADC_EOCOnEachRegularChannelCmd+0x2c>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	609a      	str	r2, [r3, #8]
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <ADC_ContinuousModeCmd>:
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	460b      	mov	r3, r1
 8004316:	70fb      	strb	r3, [r7, #3]
 8004318:	78fb      	ldrb	r3, [r7, #3]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d006      	beq.n	800432c <ADC_ContinuousModeCmd+0x20>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f043 0202 	orr.w	r2, r3, #2
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	609a      	str	r2, [r3, #8]
 800432a:	e005      	b.n	8004338 <ADC_ContinuousModeCmd+0x2c>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f023 0202 	bic.w	r2, r3, #2
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	609a      	str	r2, [r3, #8]
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <ADC_DiscModeChannelCountConfig>:
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	460b      	mov	r3, r1
 800434e:	70fb      	strb	r3, [r7, #3]
 8004350:	2300      	movs	r3, #0
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	2300      	movs	r3, #0
 8004356:	60bb      	str	r3, [r7, #8]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	60fb      	str	r3, [r7, #12]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	78fb      	ldrb	r3, [r7, #3]
 8004368:	3b01      	subs	r3, #1
 800436a:	60bb      	str	r3, [r7, #8]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	035b      	lsls	r3, r3, #13
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	605a      	str	r2, [r3, #4]
 800437c:	bf00      	nop
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <ADC_DiscModeCmd>:
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	70fb      	strb	r3, [r7, #3]
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d006      	beq.n	80043a8 <ADC_DiscModeCmd+0x20>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	605a      	str	r2, [r3, #4]
 80043a6:	e005      	b.n	80043b4 <ADC_DiscModeCmd+0x2c>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	605a      	str	r2, [r3, #4]
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <ADC_DMACmd>:
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	460b      	mov	r3, r1
 80043ca:	70fb      	strb	r3, [r7, #3]
 80043cc:	78fb      	ldrb	r3, [r7, #3]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d006      	beq.n	80043e0 <ADC_DMACmd+0x20>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	609a      	str	r2, [r3, #8]
 80043de:	e005      	b.n	80043ec <ADC_DMACmd+0x2c>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	609a      	str	r2, [r3, #8]
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <ADC_DMARequestAfterLastTransferCmd>:
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	70fb      	strb	r3, [r7, #3]
 8004404:	78fb      	ldrb	r3, [r7, #3]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d006      	beq.n	8004418 <ADC_DMARequestAfterLastTransferCmd+0x20>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	609a      	str	r2, [r3, #8]
 8004416:	e005      	b.n	8004424 <ADC_DMARequestAfterLastTransferCmd+0x2c>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	609a      	str	r2, [r3, #8]
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <DMA_DeInit>:
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f023 0201 	bic.w	r2, r3, #1
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	605a      	str	r2, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	609a      	str	r2, [r3, #8]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	60da      	str	r2, [r3, #12]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	611a      	str	r2, [r3, #16]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2221      	movs	r2, #33	; 0x21
 8004466:	615a      	str	r2, [r3, #20]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a46      	ldr	r2, [pc, #280]	; (8004584 <DMA_DeInit+0x154>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d103      	bne.n	8004478 <DMA_DeInit+0x48>
 8004470:	4b45      	ldr	r3, [pc, #276]	; (8004588 <DMA_DeInit+0x158>)
 8004472:	223d      	movs	r2, #61	; 0x3d
 8004474:	609a      	str	r2, [r3, #8]
 8004476:	e07e      	b.n	8004576 <DMA_DeInit+0x146>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a44      	ldr	r2, [pc, #272]	; (800458c <DMA_DeInit+0x15c>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d104      	bne.n	800448a <DMA_DeInit+0x5a>
 8004480:	4b41      	ldr	r3, [pc, #260]	; (8004588 <DMA_DeInit+0x158>)
 8004482:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8004486:	609a      	str	r2, [r3, #8]
 8004488:	e075      	b.n	8004576 <DMA_DeInit+0x146>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a40      	ldr	r2, [pc, #256]	; (8004590 <DMA_DeInit+0x160>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d104      	bne.n	800449c <DMA_DeInit+0x6c>
 8004492:	4b3d      	ldr	r3, [pc, #244]	; (8004588 <DMA_DeInit+0x158>)
 8004494:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8004498:	609a      	str	r2, [r3, #8]
 800449a:	e06c      	b.n	8004576 <DMA_DeInit+0x146>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a3d      	ldr	r2, [pc, #244]	; (8004594 <DMA_DeInit+0x164>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d104      	bne.n	80044ae <DMA_DeInit+0x7e>
 80044a4:	4b38      	ldr	r3, [pc, #224]	; (8004588 <DMA_DeInit+0x158>)
 80044a6:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80044aa:	609a      	str	r2, [r3, #8]
 80044ac:	e063      	b.n	8004576 <DMA_DeInit+0x146>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a39      	ldr	r2, [pc, #228]	; (8004598 <DMA_DeInit+0x168>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d103      	bne.n	80044be <DMA_DeInit+0x8e>
 80044b6:	4b34      	ldr	r3, [pc, #208]	; (8004588 <DMA_DeInit+0x158>)
 80044b8:	4a38      	ldr	r2, [pc, #224]	; (800459c <DMA_DeInit+0x16c>)
 80044ba:	60da      	str	r2, [r3, #12]
 80044bc:	e05b      	b.n	8004576 <DMA_DeInit+0x146>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a37      	ldr	r2, [pc, #220]	; (80045a0 <DMA_DeInit+0x170>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d103      	bne.n	80044ce <DMA_DeInit+0x9e>
 80044c6:	4b30      	ldr	r3, [pc, #192]	; (8004588 <DMA_DeInit+0x158>)
 80044c8:	4a36      	ldr	r2, [pc, #216]	; (80045a4 <DMA_DeInit+0x174>)
 80044ca:	60da      	str	r2, [r3, #12]
 80044cc:	e053      	b.n	8004576 <DMA_DeInit+0x146>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a35      	ldr	r2, [pc, #212]	; (80045a8 <DMA_DeInit+0x178>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d103      	bne.n	80044de <DMA_DeInit+0xae>
 80044d6:	4b2c      	ldr	r3, [pc, #176]	; (8004588 <DMA_DeInit+0x158>)
 80044d8:	4a34      	ldr	r2, [pc, #208]	; (80045ac <DMA_DeInit+0x17c>)
 80044da:	60da      	str	r2, [r3, #12]
 80044dc:	e04b      	b.n	8004576 <DMA_DeInit+0x146>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a33      	ldr	r2, [pc, #204]	; (80045b0 <DMA_DeInit+0x180>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d104      	bne.n	80044f0 <DMA_DeInit+0xc0>
 80044e6:	4b28      	ldr	r3, [pc, #160]	; (8004588 <DMA_DeInit+0x158>)
 80044e8:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80044ec:	60da      	str	r2, [r3, #12]
 80044ee:	e042      	b.n	8004576 <DMA_DeInit+0x146>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a30      	ldr	r2, [pc, #192]	; (80045b4 <DMA_DeInit+0x184>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d103      	bne.n	8004500 <DMA_DeInit+0xd0>
 80044f8:	4b2f      	ldr	r3, [pc, #188]	; (80045b8 <DMA_DeInit+0x188>)
 80044fa:	223d      	movs	r2, #61	; 0x3d
 80044fc:	609a      	str	r2, [r3, #8]
 80044fe:	e03a      	b.n	8004576 <DMA_DeInit+0x146>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a2e      	ldr	r2, [pc, #184]	; (80045bc <DMA_DeInit+0x18c>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d104      	bne.n	8004512 <DMA_DeInit+0xe2>
 8004508:	4b2b      	ldr	r3, [pc, #172]	; (80045b8 <DMA_DeInit+0x188>)
 800450a:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800450e:	609a      	str	r2, [r3, #8]
 8004510:	e031      	b.n	8004576 <DMA_DeInit+0x146>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a2a      	ldr	r2, [pc, #168]	; (80045c0 <DMA_DeInit+0x190>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d104      	bne.n	8004524 <DMA_DeInit+0xf4>
 800451a:	4b27      	ldr	r3, [pc, #156]	; (80045b8 <DMA_DeInit+0x188>)
 800451c:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8004520:	609a      	str	r2, [r3, #8]
 8004522:	e028      	b.n	8004576 <DMA_DeInit+0x146>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a27      	ldr	r2, [pc, #156]	; (80045c4 <DMA_DeInit+0x194>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d104      	bne.n	8004536 <DMA_DeInit+0x106>
 800452c:	4b22      	ldr	r3, [pc, #136]	; (80045b8 <DMA_DeInit+0x188>)
 800452e:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8004532:	609a      	str	r2, [r3, #8]
 8004534:	e01f      	b.n	8004576 <DMA_DeInit+0x146>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a23      	ldr	r2, [pc, #140]	; (80045c8 <DMA_DeInit+0x198>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d103      	bne.n	8004546 <DMA_DeInit+0x116>
 800453e:	4b1e      	ldr	r3, [pc, #120]	; (80045b8 <DMA_DeInit+0x188>)
 8004540:	4a16      	ldr	r2, [pc, #88]	; (800459c <DMA_DeInit+0x16c>)
 8004542:	60da      	str	r2, [r3, #12]
 8004544:	e017      	b.n	8004576 <DMA_DeInit+0x146>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a20      	ldr	r2, [pc, #128]	; (80045cc <DMA_DeInit+0x19c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d103      	bne.n	8004556 <DMA_DeInit+0x126>
 800454e:	4b1a      	ldr	r3, [pc, #104]	; (80045b8 <DMA_DeInit+0x188>)
 8004550:	4a14      	ldr	r2, [pc, #80]	; (80045a4 <DMA_DeInit+0x174>)
 8004552:	60da      	str	r2, [r3, #12]
 8004554:	e00f      	b.n	8004576 <DMA_DeInit+0x146>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a1d      	ldr	r2, [pc, #116]	; (80045d0 <DMA_DeInit+0x1a0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d103      	bne.n	8004566 <DMA_DeInit+0x136>
 800455e:	4b16      	ldr	r3, [pc, #88]	; (80045b8 <DMA_DeInit+0x188>)
 8004560:	4a12      	ldr	r2, [pc, #72]	; (80045ac <DMA_DeInit+0x17c>)
 8004562:	60da      	str	r2, [r3, #12]
 8004564:	e007      	b.n	8004576 <DMA_DeInit+0x146>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a1a      	ldr	r2, [pc, #104]	; (80045d4 <DMA_DeInit+0x1a4>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d103      	bne.n	8004576 <DMA_DeInit+0x146>
 800456e:	4b12      	ldr	r3, [pc, #72]	; (80045b8 <DMA_DeInit+0x188>)
 8004570:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8004574:	60da      	str	r2, [r3, #12]
 8004576:	bf00      	nop
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	40026010 	.word	0x40026010
 8004588:	40026000 	.word	0x40026000
 800458c:	40026028 	.word	0x40026028
 8004590:	40026040 	.word	0x40026040
 8004594:	40026058 	.word	0x40026058
 8004598:	40026070 	.word	0x40026070
 800459c:	2000003d 	.word	0x2000003d
 80045a0:	40026088 	.word	0x40026088
 80045a4:	20000f40 	.word	0x20000f40
 80045a8:	400260a0 	.word	0x400260a0
 80045ac:	203d0000 	.word	0x203d0000
 80045b0:	400260b8 	.word	0x400260b8
 80045b4:	40026410 	.word	0x40026410
 80045b8:	40026400 	.word	0x40026400
 80045bc:	40026428 	.word	0x40026428
 80045c0:	40026440 	.word	0x40026440
 80045c4:	40026458 	.word	0x40026458
 80045c8:	40026470 	.word	0x40026470
 80045cc:	40026488 	.word	0x40026488
 80045d0:	400264a0 	.word	0x400264a0
 80045d4:	400264b8 	.word	0x400264b8

080045d8 <DMA_Init>:
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
 80045e2:	2300      	movs	r3, #0
 80045e4:	60fb      	str	r3, [r7, #12]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	4b25      	ldr	r3, [pc, #148]	; (8004684 <DMA_Init+0xac>)
 80045f0:	4013      	ands	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	431a      	orrs	r2, r3
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	431a      	orrs	r2, r3
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	431a      	orrs	r2, r3
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	431a      	orrs	r2, r3
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	431a      	orrs	r2, r3
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	431a      	orrs	r2, r3
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004620:	431a      	orrs	r2, r3
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004626:	431a      	orrs	r2, r3
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462c:	4313      	orrs	r3, r2
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4313      	orrs	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0307 	bic.w	r3, r3, #7
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004650:	4313      	orrs	r3, r2
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	4313      	orrs	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	615a      	str	r2, [r3, #20]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	691a      	ldr	r2, [r3, #16]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	605a      	str	r2, [r3, #4]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	609a      	str	r2, [r3, #8]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	689a      	ldr	r2, [r3, #8]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	60da      	str	r2, [r3, #12]
 8004676:	bf00      	nop
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	f01c803f 	.word	0xf01c803f

08004688 <DMA_Cmd>:
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	460b      	mov	r3, r1
 8004692:	70fb      	strb	r3, [r7, #3]
 8004694:	78fb      	ldrb	r3, [r7, #3]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d006      	beq.n	80046a8 <DMA_Cmd+0x20>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f043 0201 	orr.w	r2, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	e005      	b.n	80046b4 <DMA_Cmd+0x2c>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f023 0201 	bic.w	r2, r3, #1
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <USART_ReceiveData>:
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	889b      	ldrh	r3, [r3, #4]
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	4618      	mov	r0, r3
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <USART_GetITStatus>:
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	460b      	mov	r3, r1
 80046ea:	807b      	strh	r3, [r7, #2]
 80046ec:	2300      	movs	r3, #0
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	2300      	movs	r3, #0
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	2300      	movs	r3, #0
 80046f6:	60bb      	str	r3, [r7, #8]
 80046f8:	2300      	movs	r3, #0
 80046fa:	74fb      	strb	r3, [r7, #19]
 80046fc:	887b      	ldrh	r3, [r7, #2]
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	095b      	lsrs	r3, r3, #5
 8004702:	b2db      	uxtb	r3, r3
 8004704:	60bb      	str	r3, [r7, #8]
 8004706:	887b      	ldrh	r3, [r7, #2]
 8004708:	f003 031f 	and.w	r3, r3, #31
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	2201      	movs	r2, #1
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	fa02 f303 	lsl.w	r3, r2, r3
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d107      	bne.n	800472e <USART_GetITStatus+0x4e>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	899b      	ldrh	r3, [r3, #12]
 8004722:	b29b      	uxth	r3, r3
 8004724:	461a      	mov	r2, r3
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	4013      	ands	r3, r2
 800472a:	617b      	str	r3, [r7, #20]
 800472c:	e011      	b.n	8004752 <USART_GetITStatus+0x72>
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b02      	cmp	r3, #2
 8004732:	d107      	bne.n	8004744 <USART_GetITStatus+0x64>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	8a1b      	ldrh	r3, [r3, #16]
 8004738:	b29b      	uxth	r3, r3
 800473a:	461a      	mov	r2, r3
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	4013      	ands	r3, r2
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	e006      	b.n	8004752 <USART_GetITStatus+0x72>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	8a9b      	ldrh	r3, [r3, #20]
 8004748:	b29b      	uxth	r3, r3
 800474a:	461a      	mov	r2, r3
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	4013      	ands	r3, r2
 8004750:	617b      	str	r3, [r7, #20]
 8004752:	887b      	ldrh	r3, [r7, #2]
 8004754:	0a1b      	lsrs	r3, r3, #8
 8004756:	b29b      	uxth	r3, r3
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	2201      	movs	r2, #1
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	b29b      	uxth	r3, r3
 800476a:	461a      	mov	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4013      	ands	r3, r2
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <USART_GetITStatus+0xa4>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <USART_GetITStatus+0xa4>
 800477e:	2301      	movs	r3, #1
 8004780:	74fb      	strb	r3, [r7, #19]
 8004782:	e001      	b.n	8004788 <USART_GetITStatus+0xa8>
 8004784:	2300      	movs	r3, #0
 8004786:	74fb      	strb	r3, [r7, #19]
 8004788:	7cfb      	ldrb	r3, [r7, #19]
 800478a:	4618      	mov	r0, r3
 800478c:	371c      	adds	r7, #28
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <USART_ClearITPendingBit>:
 8004796:	b480      	push	{r7}
 8004798:	b085      	sub	sp, #20
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
 800479e:	460b      	mov	r3, r1
 80047a0:	807b      	strh	r3, [r7, #2]
 80047a2:	2300      	movs	r3, #0
 80047a4:	81fb      	strh	r3, [r7, #14]
 80047a6:	2300      	movs	r3, #0
 80047a8:	81bb      	strh	r3, [r7, #12]
 80047aa:	887b      	ldrh	r3, [r7, #2]
 80047ac:	0a1b      	lsrs	r3, r3, #8
 80047ae:	81fb      	strh	r3, [r7, #14]
 80047b0:	89fb      	ldrh	r3, [r7, #14]
 80047b2:	2201      	movs	r2, #1
 80047b4:	fa02 f303 	lsl.w	r3, r2, r3
 80047b8:	81bb      	strh	r3, [r7, #12]
 80047ba:	89bb      	ldrh	r3, [r7, #12]
 80047bc:	43db      	mvns	r3, r3
 80047be:	b29a      	uxth	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	801a      	strh	r2, [r3, #0]
 80047c4:	bf00      	nop
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <ucg_clip_is_x_visible>:
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80047dc:	81fb      	strh	r3, [r7, #14]
 80047de:	89fa      	ldrh	r2, [r7, #14]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	81fb      	strh	r3, [r7, #14]
 80047ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	da01      	bge.n	80047fa <ucg_clip_is_x_visible+0x2a>
 80047f6:	2300      	movs	r3, #0
 80047f8:	e009      	b.n	800480e <ucg_clip_is_x_visible+0x3e>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8004800:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004804:	429a      	cmp	r2, r3
 8004806:	db01      	blt.n	800480c <ucg_clip_is_x_visible+0x3c>
 8004808:	2300      	movs	r3, #0
 800480a:	e000      	b.n	800480e <ucg_clip_is_x_visible+0x3e>
 800480c:	2301      	movs	r3, #1
 800480e:	4618      	mov	r0, r3
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <ucg_clip_is_y_visible>:
 800481a:	b480      	push	{r7}
 800481c:	b085      	sub	sp, #20
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004826:	81fb      	strh	r3, [r7, #14]
 8004828:	89fa      	ldrh	r2, [r7, #14]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8004830:	b29b      	uxth	r3, r3
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	b29b      	uxth	r3, r3
 8004836:	81fb      	strh	r3, [r7, #14]
 8004838:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800483c:	2b00      	cmp	r3, #0
 800483e:	da01      	bge.n	8004844 <ucg_clip_is_y_visible+0x2a>
 8004840:	2300      	movs	r3, #0
 8004842:	e009      	b.n	8004858 <ucg_clip_is_y_visible+0x3e>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 800484a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800484e:	429a      	cmp	r2, r3
 8004850:	db01      	blt.n	8004856 <ucg_clip_is_y_visible+0x3c>
 8004852:	2300      	movs	r3, #0
 8004854:	e000      	b.n	8004858 <ucg_clip_is_y_visible+0x3e>
 8004856:	2301      	movs	r3, #1
 8004858:	4618      	mov	r0, r3
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <ucg_clip_intersection>:
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	4611      	mov	r1, r2
 8004870:	461a      	mov	r2, r3
 8004872:	460b      	mov	r3, r1
 8004874:	80fb      	strh	r3, [r7, #6]
 8004876:	4613      	mov	r3, r2
 8004878:	80bb      	strh	r3, [r7, #4]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	82fb      	strh	r3, [r7, #22]
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	82bb      	strh	r3, [r7, #20]
 8004886:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800488a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800488e:	429a      	cmp	r2, r3
 8004890:	db01      	blt.n	8004896 <ucg_clip_intersection+0x32>
 8004892:	2300      	movs	r3, #0
 8004894:	e01a      	b.n	80048cc <ucg_clip_intersection+0x68>
 8004896:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800489a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800489e:	429a      	cmp	r2, r3
 80048a0:	dc01      	bgt.n	80048a6 <ucg_clip_intersection+0x42>
 80048a2:	2300      	movs	r3, #0
 80048a4:	e012      	b.n	80048cc <ucg_clip_intersection+0x68>
 80048a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80048aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	da02      	bge.n	80048b8 <ucg_clip_intersection+0x54>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	88fa      	ldrh	r2, [r7, #6]
 80048b6:	801a      	strh	r2, [r3, #0]
 80048b8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80048bc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	dd02      	ble.n	80048ca <ucg_clip_intersection+0x66>
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	88ba      	ldrh	r2, [r7, #4]
 80048c8:	801a      	strh	r2, [r3, #0]
 80048ca:	2301      	movs	r3, #1
 80048cc:	4618      	mov	r0, r3
 80048ce:	371c      	adds	r7, #28
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <ucg_clip_is_pixel_visible>:
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7ff ff75 	bl	80047d0 <ucg_clip_is_x_visible>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <ucg_clip_is_pixel_visible+0x18>
 80048ec:	2300      	movs	r3, #0
 80048ee:	e008      	b.n	8004902 <ucg_clip_is_pixel_visible+0x2a>
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7ff ff92 	bl	800481a <ucg_clip_is_y_visible>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <ucg_clip_is_pixel_visible+0x28>
 80048fc:	2300      	movs	r3, #0
 80048fe:	e000      	b.n	8004902 <ucg_clip_is_pixel_visible+0x2a>
 8004900:	2301      	movs	r3, #1
 8004902:	4618      	mov	r0, r3
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
	...

0800490c <ucg_clip_l90fx>:
 800490c:	b590      	push	{r4, r7, lr}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	861a      	strh	r2, [r3, #48]	; 0x30
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8004920:	2b03      	cmp	r3, #3
 8004922:	f200 816d 	bhi.w	8004c00 <ucg_clip_l90fx+0x2f4>
 8004926:	a201      	add	r2, pc, #4	; (adr r2, 800492c <ucg_clip_l90fx+0x20>)
 8004928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492c:	0800493d 	.word	0x0800493d
 8004930:	080049e3 	.word	0x080049e3
 8004934:	08004a89 	.word	0x08004a89
 8004938:	08004b45 	.word	0x08004b45
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7ff ff6c 	bl	800481a <ucg_clip_is_y_visible>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <ucg_clip_l90fx+0x40>
 8004948:	2300      	movs	r3, #0
 800494a:	e15a      	b.n	8004c02 <ucg_clip_l90fx+0x2f6>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004952:	81fb      	strh	r3, [r7, #14]
 8004954:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004958:	81bb      	strh	r3, [r7, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004960:	b29a      	uxth	r2, r3
 8004962:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004966:	b29b      	uxth	r3, r3
 8004968:	4413      	add	r3, r2
 800496a:	b29b      	uxth	r3, r3
 800496c:	b21b      	sxth	r3, r3
 800496e:	81bb      	strh	r3, [r7, #12]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	; 0x70
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 800497c:	b29a      	uxth	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8004984:	b29b      	uxth	r3, r3
 8004986:	4413      	add	r3, r2
 8004988:	b29b      	uxth	r3, r3
 800498a:	b21b      	sxth	r3, r3
 800498c:	f107 010c 	add.w	r1, r7, #12
 8004990:	f107 000e 	add.w	r0, r7, #14
 8004994:	4622      	mov	r2, r4
 8004996:	f7ff ff65 	bl	8004864 <ucg_clip_intersection>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <ucg_clip_l90fx+0x98>
 80049a0:	2300      	movs	r3, #0
 80049a2:	e12e      	b.n	8004c02 <ucg_clip_l90fx+0x2f6>
 80049a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	b21a      	sxth	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	861a      	strh	r2, [r3, #48]	; 0x30
 80049bc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	849a      	strh	r2, [r3, #36]	; 0x24
 80049c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	b21b      	sxth	r3, r3
 80049d6:	81bb      	strh	r3, [r7, #12]
 80049d8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	859a      	strh	r2, [r3, #44]	; 0x2c
 80049e0:	e10e      	b.n	8004c00 <ucg_clip_l90fx+0x2f4>
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7ff fef4 	bl	80047d0 <ucg_clip_is_x_visible>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <ucg_clip_l90fx+0xe6>
 80049ee:	2300      	movs	r3, #0
 80049f0:	e107      	b.n	8004c02 <ucg_clip_l90fx+0x2f6>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80049f8:	81fb      	strh	r3, [r7, #14]
 80049fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80049fe:	81bb      	strh	r3, [r7, #12]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	4413      	add	r3, r2
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	b21b      	sxth	r3, r3
 8004a14:	81bb      	strh	r3, [r7, #12]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	; 0x72
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	4413      	add	r3, r2
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	b21b      	sxth	r3, r3
 8004a32:	f107 010c 	add.w	r1, r7, #12
 8004a36:	f107 000e 	add.w	r0, r7, #14
 8004a3a:	4622      	mov	r2, r4
 8004a3c:	f7ff ff12 	bl	8004864 <ucg_clip_intersection>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <ucg_clip_l90fx+0x13e>
 8004a46:	2300      	movs	r3, #0
 8004a48:	e0db      	b.n	8004c02 <ucg_clip_l90fx+0x2f6>
 8004a4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	b21a      	sxth	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	861a      	strh	r2, [r3, #48]	; 0x30
 8004a62:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	84da      	strh	r2, [r3, #38]	; 0x26
 8004a6a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	b21b      	sxth	r3, r3
 8004a7c:	81bb      	strh	r3, [r7, #12]
 8004a7e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	859a      	strh	r2, [r3, #44]	; 0x2c
 8004a86:	e0bb      	b.n	8004c00 <ucg_clip_l90fx+0x2f4>
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7ff fec6 	bl	800481a <ucg_clip_is_y_visible>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <ucg_clip_l90fx+0x18c>
 8004a94:	2300      	movs	r3, #0
 8004a96:	e0b4      	b.n	8004c02 <ucg_clip_l90fx+0x2f6>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004a9e:	81bb      	strh	r3, [r7, #12]
 8004aa0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	b21b      	sxth	r3, r3
 8004aac:	81bb      	strh	r3, [r7, #12]
 8004aae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004ab2:	81fb      	strh	r3, [r7, #14]
 8004ab4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	b21b      	sxth	r3, r3
 8004ac8:	81fb      	strh	r3, [r7, #14]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	; 0x70
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	4413      	add	r3, r2
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	b21b      	sxth	r3, r3
 8004ae6:	f107 010c 	add.w	r1, r7, #12
 8004aea:	f107 000e 	add.w	r0, r7, #14
 8004aee:	4622      	mov	r2, r4
 8004af0:	f7ff feb8 	bl	8004864 <ucg_clip_intersection>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <ucg_clip_l90fx+0x1f2>
 8004afa:	2300      	movs	r3, #0
 8004afc:	e081      	b.n	8004c02 <ucg_clip_l90fx+0x2f6>
 8004afe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	b21a      	sxth	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	859a      	strh	r2, [r3, #44]	; 0x2c
 8004b14:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	b21b      	sxth	r3, r3
 8004b20:	81bb      	strh	r3, [r7, #12]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	b21a      	sxth	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	861a      	strh	r2, [r3, #48]	; 0x30
 8004b3a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	849a      	strh	r2, [r3, #36]	; 0x24
 8004b42:	e05d      	b.n	8004c00 <ucg_clip_l90fx+0x2f4>
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7ff fe43 	bl	80047d0 <ucg_clip_is_x_visible>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <ucg_clip_l90fx+0x248>
 8004b50:	2300      	movs	r3, #0
 8004b52:	e056      	b.n	8004c02 <ucg_clip_l90fx+0x2f6>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004b5a:	81bb      	strh	r3, [r7, #12]
 8004b5c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	3301      	adds	r3, #1
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	b21b      	sxth	r3, r3
 8004b68:	81bb      	strh	r3, [r7, #12]
 8004b6a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004b6e:	81fb      	strh	r3, [r7, #14]
 8004b70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	b21b      	sxth	r3, r3
 8004b84:	81fb      	strh	r3, [r7, #14]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	; 0x72
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	4413      	add	r3, r2
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	b21b      	sxth	r3, r3
 8004ba2:	f107 010c 	add.w	r1, r7, #12
 8004ba6:	f107 000e 	add.w	r0, r7, #14
 8004baa:	4622      	mov	r2, r4
 8004bac:	f7ff fe5a 	bl	8004864 <ucg_clip_intersection>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <ucg_clip_l90fx+0x2ae>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	e023      	b.n	8004c02 <ucg_clip_l90fx+0x2f6>
 8004bba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	b21a      	sxth	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	859a      	strh	r2, [r3, #44]	; 0x2c
 8004bd0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	b21b      	sxth	r3, r3
 8004bdc:	81bb      	strh	r3, [r7, #12]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	b21a      	sxth	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	861a      	strh	r2, [r3, #48]	; 0x30
 8004bf6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	84da      	strh	r2, [r3, #38]	; 0x26
 8004bfe:	bf00      	nop
 8004c00:	2301      	movs	r3, #1
 8004c02:	4618      	mov	r0, r3
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd90      	pop	{r4, r7, pc}
 8004c0a:	bf00      	nop

08004c0c <ucg_clip_l90se>:
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7ff fe79 	bl	800490c <ucg_clip_l90fx>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <ucg_clip_l90se+0x18>
 8004c20:	2300      	movs	r3, #0
 8004c22:	e019      	b.n	8004c58 <ucg_clip_l90se+0x4c>
 8004c24:	2300      	movs	r3, #0
 8004c26:	73fb      	strb	r3, [r7, #15]
 8004c28:	e012      	b.n	8004c50 <ucg_clip_l90se+0x44>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8004c30:	7bfa      	ldrb	r2, [r7, #15]
 8004c32:	4613      	mov	r3, r2
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	1a9b      	subs	r3, r3, r2
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	18ca      	adds	r2, r1, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8004c42:	4619      	mov	r1, r3
 8004c44:	4610      	mov	r0, r2
 8004c46:	f7fd fe4f 	bl	80028e8 <ucg_ccs_seek>
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d9e9      	bls.n	8004c2a <ucg_clip_l90se+0x1e>
 8004c56:	2301      	movs	r3, #1
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <ucg_com_PowerDown>:
 8004c60:	b590      	push	{r4, r7, lr}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8004c6e:	f003 0308 	and.w	r3, r3, #8
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d006      	beq.n	8004c84 <ucg_com_PowerDown+0x24>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	69dc      	ldr	r4, [r3, #28]
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	210b      	movs	r1, #11
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	47a0      	blx	r4
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8004c8a:	f023 0308 	bic.w	r3, r3, #8
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd90      	pop	{r4, r7, pc}

08004c9e <ucg_com_PowerUp>:
 8004c9e:	b590      	push	{r4, r7, lr}
 8004ca0:	b085      	sub	sp, #20
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	807b      	strh	r3, [r7, #2]
 8004caa:	4613      	mov	r3, r2
 8004cac:	803b      	strh	r3, [r7, #0]
 8004cae:	887b      	ldrh	r3, [r7, #2]
 8004cb0:	813b      	strh	r3, [r7, #8]
 8004cb2:	883b      	ldrh	r3, [r7, #0]
 8004cb4:	817b      	strh	r3, [r7, #10]
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7ff ffd2 	bl	8004c60 <ucg_com_PowerDown>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	69dc      	ldr	r4, [r3, #28]
 8004cc8:	f107 0308 	add.w	r3, r7, #8
 8004ccc:	2200      	movs	r2, #0
 8004cce:	210a      	movs	r1, #10
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	47a0      	blx	r4
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	81fb      	strh	r3, [r7, #14]
 8004cd8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d008      	beq.n	8004cf2 <ucg_com_PowerUp+0x54>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8004ce6:	f043 0308 	orr.w	r3, r3, #8
 8004cea:	b2da      	uxtb	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8004cf2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd90      	pop	{r4, r7, pc}

08004cfe <ucg_com_SetLineStatus>:
 8004cfe:	b590      	push	{r4, r7, lr}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	4608      	mov	r0, r1
 8004d08:	4611      	mov	r1, r2
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	70fb      	strb	r3, [r7, #3]
 8004d10:	460b      	mov	r3, r1
 8004d12:	70bb      	strb	r3, [r7, #2]
 8004d14:	4613      	mov	r3, r2
 8004d16:	707b      	strb	r3, [r7, #1]
 8004d18:	78fb      	ldrb	r3, [r7, #3]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d131      	bne.n	8004d82 <ucg_com_SetLineStatus+0x84>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8004d24:	78bb      	ldrb	r3, [r7, #2]
 8004d26:	4013      	ands	r3, r2
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d008      	beq.n	8004d40 <ucg_com_SetLineStatus+0x42>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8004d34:	78bb      	ldrb	r3, [r7, #2]
 8004d36:	4013      	ands	r3, r2
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	78ba      	ldrb	r2, [r7, #2]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d14b      	bne.n	8004dd8 <ucg_com_SetLineStatus+0xda>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	69dc      	ldr	r4, [r3, #28]
 8004d44:	787b      	ldrb	r3, [r7, #1]
 8004d46:	b219      	sxth	r1, r3
 8004d48:	78fb      	ldrb	r3, [r7, #3]
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	47a0      	blx	r4
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8004d58:	b25a      	sxtb	r2, r3
 8004d5a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d5e:	43db      	mvns	r3, r3
 8004d60:	b25b      	sxtb	r3, r3
 8004d62:	4013      	ands	r3, r2
 8004d64:	b25b      	sxtb	r3, r3
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8004d74:	78bb      	ldrb	r3, [r7, #2]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8004d80:	e02a      	b.n	8004dd8 <ucg_com_SetLineStatus+0xda>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8004d88:	78bb      	ldrb	r3, [r7, #2]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d007      	beq.n	8004da2 <ucg_com_SetLineStatus+0xa4>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8004d98:	78bb      	ldrb	r3, [r7, #2]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d11a      	bne.n	8004dd8 <ucg_com_SetLineStatus+0xda>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	69dc      	ldr	r4, [r3, #28]
 8004da6:	787b      	ldrb	r3, [r7, #1]
 8004da8:	b219      	sxth	r1, r3
 8004daa:	78fb      	ldrb	r3, [r7, #3]
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	2300      	movs	r3, #0
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	47a0      	blx	r4
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8004dba:	78bb      	ldrb	r3, [r7, #2]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8004dcc:	78bb      	ldrb	r3, [r7, #2]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd90      	pop	{r4, r7, pc}

08004de0 <ucg_com_SetResetLineStatus>:
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	460b      	mov	r3, r1
 8004dea:	70fb      	strb	r3, [r7, #3]
 8004dec:	78f9      	ldrb	r1, [r7, #3]
 8004dee:	230d      	movs	r3, #13
 8004df0:	2204      	movs	r2, #4
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f7ff ff83 	bl	8004cfe <ucg_com_SetLineStatus>
 8004df8:	bf00      	nop
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <ucg_com_SetCSLineStatus>:
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	70fb      	strb	r3, [r7, #3]
 8004e0c:	78f9      	ldrb	r1, [r7, #3]
 8004e0e:	230e      	movs	r3, #14
 8004e10:	2202      	movs	r2, #2
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7ff ff73 	bl	8004cfe <ucg_com_SetLineStatus>
 8004e18:	bf00      	nop
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <ucg_com_SetCDLineStatus>:
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	460b      	mov	r3, r1
 8004e2a:	70fb      	strb	r3, [r7, #3]
 8004e2c:	78f9      	ldrb	r1, [r7, #3]
 8004e2e:	230f      	movs	r3, #15
 8004e30:	2201      	movs	r2, #1
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7ff ff63 	bl	8004cfe <ucg_com_SetLineStatus>
 8004e38:	bf00      	nop
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <ucg_com_DelayMicroseconds>:
 8004e40:	b590      	push	{r4, r7, lr}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	807b      	strh	r3, [r7, #2]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	69dc      	ldr	r4, [r3, #28]
 8004e50:	887a      	ldrh	r2, [r7, #2]
 8004e52:	2300      	movs	r3, #0
 8004e54:	210c      	movs	r1, #12
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	47a0      	blx	r4
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd90      	pop	{r4, r7, pc}

08004e62 <ucg_com_DelayMilliseconds>:
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b082      	sub	sp, #8
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	807b      	strh	r3, [r7, #2]
 8004e6e:	e007      	b.n	8004e80 <ucg_com_DelayMilliseconds+0x1e>
 8004e70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7ff ffe3 	bl	8004e40 <ucg_com_DelayMicroseconds>
 8004e7a:	887b      	ldrh	r3, [r7, #2]
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	807b      	strh	r3, [r7, #2]
 8004e80:	887b      	ldrh	r3, [r7, #2]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1f4      	bne.n	8004e70 <ucg_com_DelayMilliseconds+0xe>
 8004e86:	bf00      	nop
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <ucg_com_SendByte>:
 8004e8e:	b590      	push	{r4, r7, lr}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	460b      	mov	r3, r1
 8004e98:	70fb      	strb	r3, [r7, #3]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69dc      	ldr	r4, [r3, #28]
 8004e9e:	78fb      	ldrb	r3, [r7, #3]
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	2110      	movs	r1, #16
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	47a0      	blx	r4
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd90      	pop	{r4, r7, pc}

08004eb2 <ucg_com_SendStringP>:
 8004eb2:	b590      	push	{r4, r7, lr}
 8004eb4:	b087      	sub	sp, #28
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	60f8      	str	r0, [r7, #12]
 8004eba:	460b      	mov	r3, r1
 8004ebc:	607a      	str	r2, [r7, #4]
 8004ebe:	817b      	strh	r3, [r7, #10]
 8004ec0:	e010      	b.n	8004ee4 <ucg_com_SendStringP+0x32>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	75fb      	strb	r3, [r7, #23]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	69dc      	ldr	r4, [r3, #28]
 8004ecc:	7dfb      	ldrb	r3, [r7, #23]
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	2110      	movs	r1, #16
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	47a0      	blx	r4
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3301      	adds	r3, #1
 8004edc:	607b      	str	r3, [r7, #4]
 8004ede:	897b      	ldrh	r3, [r7, #10]
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	817b      	strh	r3, [r7, #10]
 8004ee4:	897b      	ldrh	r3, [r7, #10]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1eb      	bne.n	8004ec2 <ucg_com_SendStringP+0x10>
 8004eea:	bf00      	nop
 8004eec:	371c      	adds	r7, #28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd90      	pop	{r4, r7, pc}

08004ef2 <ucg_com_SendCmdArg>:
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b084      	sub	sp, #16
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	60f8      	str	r0, [r7, #12]
 8004efa:	60b9      	str	r1, [r7, #8]
 8004efc:	4611      	mov	r1, r2
 8004efe:	461a      	mov	r2, r3
 8004f00:	460b      	mov	r3, r1
 8004f02:	71fb      	strb	r3, [r7, #7]
 8004f04:	4613      	mov	r3, r2
 8004f06:	71bb      	strb	r3, [r7, #6]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004f0e:	085b      	lsrs	r3, r3, #1
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	4619      	mov	r1, r3
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f7ff ff80 	bl	8004e20 <ucg_com_SetCDLineStatus>
 8004f20:	79fb      	ldrb	r3, [r7, #7]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	4619      	mov	r1, r3
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f7ff ffc2 	bl	8004eb2 <ucg_com_SendStringP>
 8004f2e:	79bb      	ldrb	r3, [r7, #6]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d014      	beq.n	8004f5e <ucg_com_SendCmdArg+0x6c>
 8004f34:	79fb      	ldrb	r3, [r7, #7]
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	4413      	add	r3, r2
 8004f3a:	60bb      	str	r3, [r7, #8]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	4619      	mov	r1, r3
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f7ff ff68 	bl	8004e20 <ucg_com_SetCDLineStatus>
 8004f50:	79bb      	ldrb	r3, [r7, #6]
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	4619      	mov	r1, r3
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f7ff ffaa 	bl	8004eb2 <ucg_com_SendStringP>
 8004f5e:	bf00      	nop
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <ucg_com_SendCmdSeq>:
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	73fb      	strb	r3, [r7, #15]
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	091b      	lsrs	r3, r3, #4
 8004f7c:	73bb      	strb	r3, [r7, #14]
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
 8004f80:	f003 030f 	and.w	r3, r3, #15
 8004f84:	737b      	strb	r3, [r7, #13]
 8004f86:	7bbb      	ldrb	r3, [r7, #14]
 8004f88:	2b0f      	cmp	r3, #15
 8004f8a:	f200 8124 	bhi.w	80051d6 <ucg_com_SendCmdSeq+0x26e>
 8004f8e:	a201      	add	r2, pc, #4	; (adr r2, 8004f94 <ucg_com_SendCmdSeq+0x2c>)
 8004f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f94:	080051d7 	.word	0x080051d7
 8004f98:	08004fd5 	.word	0x08004fd5
 8004f9c:	08004fd5 	.word	0x08004fd5
 8004fa0:	08004fd5 	.word	0x08004fd5
 8004fa4:	080051d7 	.word	0x080051d7
 8004fa8:	080051d7 	.word	0x080051d7
 8004fac:	08004ff5 	.word	0x08004ff5
 8004fb0:	08005027 	.word	0x08005027
 8004fb4:	0800506b 	.word	0x0800506b
 8004fb8:	08005097 	.word	0x08005097
 8004fbc:	080050c3 	.word	0x080050c3
 8004fc0:	08005123 	.word	0x08005123
 8004fc4:	080051d7 	.word	0x080051d7
 8004fc8:	080051d7 	.word	0x080051d7
 8004fcc:	080051d7 	.word	0x080051d7
 8004fd0:	08005183 	.word	0x08005183
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	1c59      	adds	r1, r3, #1
 8004fd8:	7b7b      	ldrb	r3, [r7, #13]
 8004fda:	7bba      	ldrb	r2, [r7, #14]
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7ff ff88 	bl	8004ef2 <ucg_com_SendCmdArg>
 8004fe2:	7bbb      	ldrb	r3, [r7, #14]
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	7b7b      	ldrb	r3, [r7, #13]
 8004fe8:	4413      	add	r3, r2
 8004fea:	461a      	mov	r2, r3
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	4413      	add	r3, r2
 8004ff0:	603b      	str	r3, [r7, #0]
 8004ff2:	e0ef      	b.n	80051d4 <ucg_com_SendCmdSeq+0x26c>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	4619      	mov	r1, r3
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7ff ff0c 	bl	8004e20 <ucg_com_SetCDLineStatus>
 8005008:	7b7b      	ldrb	r3, [r7, #13]
 800500a:	b299      	uxth	r1, r3
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	3301      	adds	r3, #1
 8005010:	461a      	mov	r2, r3
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7ff ff4d 	bl	8004eb2 <ucg_com_SendStringP>
 8005018:	7b7b      	ldrb	r3, [r7, #13]
 800501a:	3301      	adds	r3, #1
 800501c:	461a      	mov	r2, r3
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	4413      	add	r3, r2
 8005022:	603b      	str	r3, [r7, #0]
 8005024:	e0d6      	b.n	80051d4 <ucg_com_SendCmdSeq+0x26c>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800502c:	085b      	lsrs	r3, r3, #1
 800502e:	b2db      	uxtb	r3, r3
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	bf0c      	ite	eq
 8005038:	2301      	moveq	r3, #1
 800503a:	2300      	movne	r3, #0
 800503c:	b2db      	uxtb	r3, r3
 800503e:	4619      	mov	r1, r3
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7ff feed 	bl	8004e20 <ucg_com_SetCDLineStatus>
 8005046:	7b7b      	ldrb	r3, [r7, #13]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d007      	beq.n	800505c <ucg_com_SendCmdSeq+0xf4>
 800504c:	7b7b      	ldrb	r3, [r7, #13]
 800504e:	b299      	uxth	r1, r3
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	3301      	adds	r3, #1
 8005054:	461a      	mov	r2, r3
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7ff ff2b 	bl	8004eb2 <ucg_com_SendStringP>
 800505c:	7b7b      	ldrb	r3, [r7, #13]
 800505e:	3301      	adds	r3, #1
 8005060:	461a      	mov	r2, r3
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	4413      	add	r3, r2
 8005066:	603b      	str	r3, [r7, #0]
 8005068:	e0b4      	b.n	80051d4 <ucg_com_SendCmdSeq+0x26c>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	3301      	adds	r3, #1
 800506e:	603b      	str	r3, [r7, #0]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	73fb      	strb	r3, [r7, #15]
 8005076:	7b7b      	ldrb	r3, [r7, #13]
 8005078:	b29b      	uxth	r3, r3
 800507a:	021b      	lsls	r3, r3, #8
 800507c:	b29a      	uxth	r2, r3
 800507e:	7bfb      	ldrb	r3, [r7, #15]
 8005080:	b29b      	uxth	r3, r3
 8005082:	4413      	add	r3, r2
 8005084:	b29b      	uxth	r3, r3
 8005086:	4619      	mov	r1, r3
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7ff feea 	bl	8004e62 <ucg_com_DelayMilliseconds>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	3301      	adds	r3, #1
 8005092:	603b      	str	r3, [r7, #0]
 8005094:	e09e      	b.n	80051d4 <ucg_com_SendCmdSeq+0x26c>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	3301      	adds	r3, #1
 800509a:	603b      	str	r3, [r7, #0]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	73fb      	strb	r3, [r7, #15]
 80050a2:	7b7b      	ldrb	r3, [r7, #13]
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	021b      	lsls	r3, r3, #8
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	7bfb      	ldrb	r3, [r7, #15]
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	4413      	add	r3, r2
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	4619      	mov	r1, r3
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f7ff fec3 	bl	8004e40 <ucg_com_DelayMicroseconds>
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	3301      	adds	r3, #1
 80050be:	603b      	str	r3, [r7, #0]
 80050c0:	e088      	b.n	80051d4 <ucg_com_SendCmdSeq+0x26c>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	3301      	adds	r3, #1
 80050c6:	603b      	str	r3, [r7, #0]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	73fb      	strb	r3, [r7, #15]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	3301      	adds	r3, #1
 80050d2:	603b      	str	r3, [r7, #0]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	733b      	strb	r3, [r7, #12]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	3301      	adds	r3, #1
 80050de:	603b      	str	r3, [r7, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	4619      	mov	r1, r3
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7ff fe96 	bl	8004e20 <ucg_com_SetCDLineStatus>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80050fa:	461a      	mov	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8005102:	441a      	add	r2, r3
 8005104:	7b7b      	ldrb	r3, [r7, #13]
 8005106:	fa42 f303 	asr.w	r3, r2, r3
 800510a:	b2da      	uxtb	r2, r3
 800510c:	7bfb      	ldrb	r3, [r7, #15]
 800510e:	4013      	ands	r3, r2
 8005110:	b2da      	uxtb	r2, r3
 8005112:	7b3b      	ldrb	r3, [r7, #12]
 8005114:	4313      	orrs	r3, r2
 8005116:	b2db      	uxtb	r3, r3
 8005118:	4619      	mov	r1, r3
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7ff feb7 	bl	8004e8e <ucg_com_SendByte>
 8005120:	e058      	b.n	80051d4 <ucg_com_SendCmdSeq+0x26c>
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	3301      	adds	r3, #1
 8005126:	603b      	str	r3, [r7, #0]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	73fb      	strb	r3, [r7, #15]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	3301      	adds	r3, #1
 8005132:	603b      	str	r3, [r7, #0]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	733b      	strb	r3, [r7, #12]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	3301      	adds	r3, #1
 800513e:	603b      	str	r3, [r7, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	b2db      	uxtb	r3, r3
 800514c:	4619      	mov	r1, r3
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7ff fe66 	bl	8004e20 <ucg_com_SetCDLineStatus>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800515a:	461a      	mov	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8005162:	441a      	add	r2, r3
 8005164:	7b7b      	ldrb	r3, [r7, #13]
 8005166:	fa42 f303 	asr.w	r3, r2, r3
 800516a:	b2da      	uxtb	r2, r3
 800516c:	7bfb      	ldrb	r3, [r7, #15]
 800516e:	4013      	ands	r3, r2
 8005170:	b2da      	uxtb	r2, r3
 8005172:	7b3b      	ldrb	r3, [r7, #12]
 8005174:	4313      	orrs	r3, r2
 8005176:	b2db      	uxtb	r3, r3
 8005178:	4619      	mov	r1, r3
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7ff fe87 	bl	8004e8e <ucg_com_SendByte>
 8005180:	e028      	b.n	80051d4 <ucg_com_SendCmdSeq+0x26c>
 8005182:	7b7b      	ldrb	r3, [r7, #13]
 8005184:	089b      	lsrs	r3, r3, #2
 8005186:	73bb      	strb	r3, [r7, #14]
 8005188:	7b7b      	ldrb	r3, [r7, #13]
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	737b      	strb	r3, [r7, #13]
 8005190:	7bbb      	ldrb	r3, [r7, #14]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d00c      	beq.n	80051b0 <ucg_com_SendCmdSeq+0x248>
 8005196:	2b03      	cmp	r3, #3
 8005198:	d013      	beq.n	80051c2 <ucg_com_SendCmdSeq+0x25a>
 800519a:	2b00      	cmp	r3, #0
 800519c:	d116      	bne.n	80051cc <ucg_com_SendCmdSeq+0x264>
 800519e:	7b7b      	ldrb	r3, [r7, #13]
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	4619      	mov	r1, r3
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7ff fe19 	bl	8004de0 <ucg_com_SetResetLineStatus>
 80051ae:	e00d      	b.n	80051cc <ucg_com_SendCmdSeq+0x264>
 80051b0:	7b7b      	ldrb	r3, [r7, #13]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	4619      	mov	r1, r3
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7ff fe20 	bl	8004e00 <ucg_com_SetCSLineStatus>
 80051c0:	e004      	b.n	80051cc <ucg_com_SendCmdSeq+0x264>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	7b7a      	ldrb	r2, [r7, #13]
 80051c6:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 80051ca:	bf00      	nop
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	3301      	adds	r3, #1
 80051d0:	603b      	str	r3, [r7, #0]
 80051d2:	bf00      	nop
 80051d4:	e6cd      	b.n	8004f72 <ucg_com_SendCmdSeq+0xa>
 80051d6:	bf00      	nop
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop

080051e0 <siprintf>:
 80051e0:	b40e      	push	{r1, r2, r3}
 80051e2:	b500      	push	{lr}
 80051e4:	b09c      	sub	sp, #112	; 0x70
 80051e6:	ab1d      	add	r3, sp, #116	; 0x74
 80051e8:	9002      	str	r0, [sp, #8]
 80051ea:	9006      	str	r0, [sp, #24]
 80051ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051f0:	4809      	ldr	r0, [pc, #36]	; (8005218 <siprintf+0x38>)
 80051f2:	9107      	str	r1, [sp, #28]
 80051f4:	9104      	str	r1, [sp, #16]
 80051f6:	4909      	ldr	r1, [pc, #36]	; (800521c <siprintf+0x3c>)
 80051f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80051fc:	9105      	str	r1, [sp, #20]
 80051fe:	6800      	ldr	r0, [r0, #0]
 8005200:	9301      	str	r3, [sp, #4]
 8005202:	a902      	add	r1, sp, #8
 8005204:	f000 f9a0 	bl	8005548 <_svfiprintf_r>
 8005208:	9b02      	ldr	r3, [sp, #8]
 800520a:	2200      	movs	r2, #0
 800520c:	701a      	strb	r2, [r3, #0]
 800520e:	b01c      	add	sp, #112	; 0x70
 8005210:	f85d eb04 	ldr.w	lr, [sp], #4
 8005214:	b003      	add	sp, #12
 8005216:	4770      	bx	lr
 8005218:	200005e8 	.word	0x200005e8
 800521c:	ffff0208 	.word	0xffff0208

08005220 <memset>:
 8005220:	4402      	add	r2, r0
 8005222:	4603      	mov	r3, r0
 8005224:	4293      	cmp	r3, r2
 8005226:	d100      	bne.n	800522a <memset+0xa>
 8005228:	4770      	bx	lr
 800522a:	f803 1b01 	strb.w	r1, [r3], #1
 800522e:	e7f9      	b.n	8005224 <memset+0x4>

08005230 <__errno>:
 8005230:	4b01      	ldr	r3, [pc, #4]	; (8005238 <__errno+0x8>)
 8005232:	6818      	ldr	r0, [r3, #0]
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	200005e8 	.word	0x200005e8

0800523c <__libc_init_array>:
 800523c:	b570      	push	{r4, r5, r6, lr}
 800523e:	4d0d      	ldr	r5, [pc, #52]	; (8005274 <__libc_init_array+0x38>)
 8005240:	4c0d      	ldr	r4, [pc, #52]	; (8005278 <__libc_init_array+0x3c>)
 8005242:	1b64      	subs	r4, r4, r5
 8005244:	10a4      	asrs	r4, r4, #2
 8005246:	2600      	movs	r6, #0
 8005248:	42a6      	cmp	r6, r4
 800524a:	d109      	bne.n	8005260 <__libc_init_array+0x24>
 800524c:	4d0b      	ldr	r5, [pc, #44]	; (800527c <__libc_init_array+0x40>)
 800524e:	4c0c      	ldr	r4, [pc, #48]	; (8005280 <__libc_init_array+0x44>)
 8005250:	f000 fc6a 	bl	8005b28 <_init>
 8005254:	1b64      	subs	r4, r4, r5
 8005256:	10a4      	asrs	r4, r4, #2
 8005258:	2600      	movs	r6, #0
 800525a:	42a6      	cmp	r6, r4
 800525c:	d105      	bne.n	800526a <__libc_init_array+0x2e>
 800525e:	bd70      	pop	{r4, r5, r6, pc}
 8005260:	f855 3b04 	ldr.w	r3, [r5], #4
 8005264:	4798      	blx	r3
 8005266:	3601      	adds	r6, #1
 8005268:	e7ee      	b.n	8005248 <__libc_init_array+0xc>
 800526a:	f855 3b04 	ldr.w	r3, [r5], #4
 800526e:	4798      	blx	r3
 8005270:	3601      	adds	r6, #1
 8005272:	e7f2      	b.n	800525a <__libc_init_array+0x1e>
 8005274:	08006194 	.word	0x08006194
 8005278:	08006194 	.word	0x08006194
 800527c:	08006194 	.word	0x08006194
 8005280:	08006198 	.word	0x08006198

08005284 <__retarget_lock_acquire_recursive>:
 8005284:	4770      	bx	lr

08005286 <__retarget_lock_release_recursive>:
 8005286:	4770      	bx	lr

08005288 <memcpy>:
 8005288:	440a      	add	r2, r1
 800528a:	4291      	cmp	r1, r2
 800528c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005290:	d100      	bne.n	8005294 <memcpy+0xc>
 8005292:	4770      	bx	lr
 8005294:	b510      	push	{r4, lr}
 8005296:	f811 4b01 	ldrb.w	r4, [r1], #1
 800529a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800529e:	4291      	cmp	r1, r2
 80052a0:	d1f9      	bne.n	8005296 <memcpy+0xe>
 80052a2:	bd10      	pop	{r4, pc}

080052a4 <_free_r>:
 80052a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052a6:	2900      	cmp	r1, #0
 80052a8:	d044      	beq.n	8005334 <_free_r+0x90>
 80052aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052ae:	9001      	str	r0, [sp, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f1a1 0404 	sub.w	r4, r1, #4
 80052b6:	bfb8      	it	lt
 80052b8:	18e4      	addlt	r4, r4, r3
 80052ba:	f000 f8df 	bl	800547c <__malloc_lock>
 80052be:	4a1e      	ldr	r2, [pc, #120]	; (8005338 <_free_r+0x94>)
 80052c0:	9801      	ldr	r0, [sp, #4]
 80052c2:	6813      	ldr	r3, [r2, #0]
 80052c4:	b933      	cbnz	r3, 80052d4 <_free_r+0x30>
 80052c6:	6063      	str	r3, [r4, #4]
 80052c8:	6014      	str	r4, [r2, #0]
 80052ca:	b003      	add	sp, #12
 80052cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052d0:	f000 b8da 	b.w	8005488 <__malloc_unlock>
 80052d4:	42a3      	cmp	r3, r4
 80052d6:	d908      	bls.n	80052ea <_free_r+0x46>
 80052d8:	6825      	ldr	r5, [r4, #0]
 80052da:	1961      	adds	r1, r4, r5
 80052dc:	428b      	cmp	r3, r1
 80052de:	bf01      	itttt	eq
 80052e0:	6819      	ldreq	r1, [r3, #0]
 80052e2:	685b      	ldreq	r3, [r3, #4]
 80052e4:	1949      	addeq	r1, r1, r5
 80052e6:	6021      	streq	r1, [r4, #0]
 80052e8:	e7ed      	b.n	80052c6 <_free_r+0x22>
 80052ea:	461a      	mov	r2, r3
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	b10b      	cbz	r3, 80052f4 <_free_r+0x50>
 80052f0:	42a3      	cmp	r3, r4
 80052f2:	d9fa      	bls.n	80052ea <_free_r+0x46>
 80052f4:	6811      	ldr	r1, [r2, #0]
 80052f6:	1855      	adds	r5, r2, r1
 80052f8:	42a5      	cmp	r5, r4
 80052fa:	d10b      	bne.n	8005314 <_free_r+0x70>
 80052fc:	6824      	ldr	r4, [r4, #0]
 80052fe:	4421      	add	r1, r4
 8005300:	1854      	adds	r4, r2, r1
 8005302:	42a3      	cmp	r3, r4
 8005304:	6011      	str	r1, [r2, #0]
 8005306:	d1e0      	bne.n	80052ca <_free_r+0x26>
 8005308:	681c      	ldr	r4, [r3, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	6053      	str	r3, [r2, #4]
 800530e:	440c      	add	r4, r1
 8005310:	6014      	str	r4, [r2, #0]
 8005312:	e7da      	b.n	80052ca <_free_r+0x26>
 8005314:	d902      	bls.n	800531c <_free_r+0x78>
 8005316:	230c      	movs	r3, #12
 8005318:	6003      	str	r3, [r0, #0]
 800531a:	e7d6      	b.n	80052ca <_free_r+0x26>
 800531c:	6825      	ldr	r5, [r4, #0]
 800531e:	1961      	adds	r1, r4, r5
 8005320:	428b      	cmp	r3, r1
 8005322:	bf04      	itt	eq
 8005324:	6819      	ldreq	r1, [r3, #0]
 8005326:	685b      	ldreq	r3, [r3, #4]
 8005328:	6063      	str	r3, [r4, #4]
 800532a:	bf04      	itt	eq
 800532c:	1949      	addeq	r1, r1, r5
 800532e:	6021      	streq	r1, [r4, #0]
 8005330:	6054      	str	r4, [r2, #4]
 8005332:	e7ca      	b.n	80052ca <_free_r+0x26>
 8005334:	b003      	add	sp, #12
 8005336:	bd30      	pop	{r4, r5, pc}
 8005338:	20001ec4 	.word	0x20001ec4

0800533c <sbrk_aligned>:
 800533c:	b570      	push	{r4, r5, r6, lr}
 800533e:	4e0e      	ldr	r6, [pc, #56]	; (8005378 <sbrk_aligned+0x3c>)
 8005340:	460c      	mov	r4, r1
 8005342:	6831      	ldr	r1, [r6, #0]
 8005344:	4605      	mov	r5, r0
 8005346:	b911      	cbnz	r1, 800534e <sbrk_aligned+0x12>
 8005348:	f000 fba6 	bl	8005a98 <_sbrk_r>
 800534c:	6030      	str	r0, [r6, #0]
 800534e:	4621      	mov	r1, r4
 8005350:	4628      	mov	r0, r5
 8005352:	f000 fba1 	bl	8005a98 <_sbrk_r>
 8005356:	1c43      	adds	r3, r0, #1
 8005358:	d00a      	beq.n	8005370 <sbrk_aligned+0x34>
 800535a:	1cc4      	adds	r4, r0, #3
 800535c:	f024 0403 	bic.w	r4, r4, #3
 8005360:	42a0      	cmp	r0, r4
 8005362:	d007      	beq.n	8005374 <sbrk_aligned+0x38>
 8005364:	1a21      	subs	r1, r4, r0
 8005366:	4628      	mov	r0, r5
 8005368:	f000 fb96 	bl	8005a98 <_sbrk_r>
 800536c:	3001      	adds	r0, #1
 800536e:	d101      	bne.n	8005374 <sbrk_aligned+0x38>
 8005370:	f04f 34ff 	mov.w	r4, #4294967295
 8005374:	4620      	mov	r0, r4
 8005376:	bd70      	pop	{r4, r5, r6, pc}
 8005378:	20001ec8 	.word	0x20001ec8

0800537c <_malloc_r>:
 800537c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005380:	1ccd      	adds	r5, r1, #3
 8005382:	f025 0503 	bic.w	r5, r5, #3
 8005386:	3508      	adds	r5, #8
 8005388:	2d0c      	cmp	r5, #12
 800538a:	bf38      	it	cc
 800538c:	250c      	movcc	r5, #12
 800538e:	2d00      	cmp	r5, #0
 8005390:	4607      	mov	r7, r0
 8005392:	db01      	blt.n	8005398 <_malloc_r+0x1c>
 8005394:	42a9      	cmp	r1, r5
 8005396:	d905      	bls.n	80053a4 <_malloc_r+0x28>
 8005398:	230c      	movs	r3, #12
 800539a:	603b      	str	r3, [r7, #0]
 800539c:	2600      	movs	r6, #0
 800539e:	4630      	mov	r0, r6
 80053a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005478 <_malloc_r+0xfc>
 80053a8:	f000 f868 	bl	800547c <__malloc_lock>
 80053ac:	f8d8 3000 	ldr.w	r3, [r8]
 80053b0:	461c      	mov	r4, r3
 80053b2:	bb5c      	cbnz	r4, 800540c <_malloc_r+0x90>
 80053b4:	4629      	mov	r1, r5
 80053b6:	4638      	mov	r0, r7
 80053b8:	f7ff ffc0 	bl	800533c <sbrk_aligned>
 80053bc:	1c43      	adds	r3, r0, #1
 80053be:	4604      	mov	r4, r0
 80053c0:	d155      	bne.n	800546e <_malloc_r+0xf2>
 80053c2:	f8d8 4000 	ldr.w	r4, [r8]
 80053c6:	4626      	mov	r6, r4
 80053c8:	2e00      	cmp	r6, #0
 80053ca:	d145      	bne.n	8005458 <_malloc_r+0xdc>
 80053cc:	2c00      	cmp	r4, #0
 80053ce:	d048      	beq.n	8005462 <_malloc_r+0xe6>
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	4631      	mov	r1, r6
 80053d4:	4638      	mov	r0, r7
 80053d6:	eb04 0903 	add.w	r9, r4, r3
 80053da:	f000 fb5d 	bl	8005a98 <_sbrk_r>
 80053de:	4581      	cmp	r9, r0
 80053e0:	d13f      	bne.n	8005462 <_malloc_r+0xe6>
 80053e2:	6821      	ldr	r1, [r4, #0]
 80053e4:	1a6d      	subs	r5, r5, r1
 80053e6:	4629      	mov	r1, r5
 80053e8:	4638      	mov	r0, r7
 80053ea:	f7ff ffa7 	bl	800533c <sbrk_aligned>
 80053ee:	3001      	adds	r0, #1
 80053f0:	d037      	beq.n	8005462 <_malloc_r+0xe6>
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	442b      	add	r3, r5
 80053f6:	6023      	str	r3, [r4, #0]
 80053f8:	f8d8 3000 	ldr.w	r3, [r8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d038      	beq.n	8005472 <_malloc_r+0xf6>
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	42a2      	cmp	r2, r4
 8005404:	d12b      	bne.n	800545e <_malloc_r+0xe2>
 8005406:	2200      	movs	r2, #0
 8005408:	605a      	str	r2, [r3, #4]
 800540a:	e00f      	b.n	800542c <_malloc_r+0xb0>
 800540c:	6822      	ldr	r2, [r4, #0]
 800540e:	1b52      	subs	r2, r2, r5
 8005410:	d41f      	bmi.n	8005452 <_malloc_r+0xd6>
 8005412:	2a0b      	cmp	r2, #11
 8005414:	d917      	bls.n	8005446 <_malloc_r+0xca>
 8005416:	1961      	adds	r1, r4, r5
 8005418:	42a3      	cmp	r3, r4
 800541a:	6025      	str	r5, [r4, #0]
 800541c:	bf18      	it	ne
 800541e:	6059      	strne	r1, [r3, #4]
 8005420:	6863      	ldr	r3, [r4, #4]
 8005422:	bf08      	it	eq
 8005424:	f8c8 1000 	streq.w	r1, [r8]
 8005428:	5162      	str	r2, [r4, r5]
 800542a:	604b      	str	r3, [r1, #4]
 800542c:	4638      	mov	r0, r7
 800542e:	f104 060b 	add.w	r6, r4, #11
 8005432:	f000 f829 	bl	8005488 <__malloc_unlock>
 8005436:	f026 0607 	bic.w	r6, r6, #7
 800543a:	1d23      	adds	r3, r4, #4
 800543c:	1af2      	subs	r2, r6, r3
 800543e:	d0ae      	beq.n	800539e <_malloc_r+0x22>
 8005440:	1b9b      	subs	r3, r3, r6
 8005442:	50a3      	str	r3, [r4, r2]
 8005444:	e7ab      	b.n	800539e <_malloc_r+0x22>
 8005446:	42a3      	cmp	r3, r4
 8005448:	6862      	ldr	r2, [r4, #4]
 800544a:	d1dd      	bne.n	8005408 <_malloc_r+0x8c>
 800544c:	f8c8 2000 	str.w	r2, [r8]
 8005450:	e7ec      	b.n	800542c <_malloc_r+0xb0>
 8005452:	4623      	mov	r3, r4
 8005454:	6864      	ldr	r4, [r4, #4]
 8005456:	e7ac      	b.n	80053b2 <_malloc_r+0x36>
 8005458:	4634      	mov	r4, r6
 800545a:	6876      	ldr	r6, [r6, #4]
 800545c:	e7b4      	b.n	80053c8 <_malloc_r+0x4c>
 800545e:	4613      	mov	r3, r2
 8005460:	e7cc      	b.n	80053fc <_malloc_r+0x80>
 8005462:	230c      	movs	r3, #12
 8005464:	603b      	str	r3, [r7, #0]
 8005466:	4638      	mov	r0, r7
 8005468:	f000 f80e 	bl	8005488 <__malloc_unlock>
 800546c:	e797      	b.n	800539e <_malloc_r+0x22>
 800546e:	6025      	str	r5, [r4, #0]
 8005470:	e7dc      	b.n	800542c <_malloc_r+0xb0>
 8005472:	605b      	str	r3, [r3, #4]
 8005474:	deff      	udf	#255	; 0xff
 8005476:	bf00      	nop
 8005478:	20001ec4 	.word	0x20001ec4

0800547c <__malloc_lock>:
 800547c:	4801      	ldr	r0, [pc, #4]	; (8005484 <__malloc_lock+0x8>)
 800547e:	f7ff bf01 	b.w	8005284 <__retarget_lock_acquire_recursive>
 8005482:	bf00      	nop
 8005484:	20001ec0 	.word	0x20001ec0

08005488 <__malloc_unlock>:
 8005488:	4801      	ldr	r0, [pc, #4]	; (8005490 <__malloc_unlock+0x8>)
 800548a:	f7ff befc 	b.w	8005286 <__retarget_lock_release_recursive>
 800548e:	bf00      	nop
 8005490:	20001ec0 	.word	0x20001ec0

08005494 <__ssputs_r>:
 8005494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005498:	688e      	ldr	r6, [r1, #8]
 800549a:	461f      	mov	r7, r3
 800549c:	42be      	cmp	r6, r7
 800549e:	680b      	ldr	r3, [r1, #0]
 80054a0:	4682      	mov	sl, r0
 80054a2:	460c      	mov	r4, r1
 80054a4:	4690      	mov	r8, r2
 80054a6:	d82c      	bhi.n	8005502 <__ssputs_r+0x6e>
 80054a8:	898a      	ldrh	r2, [r1, #12]
 80054aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80054ae:	d026      	beq.n	80054fe <__ssputs_r+0x6a>
 80054b0:	6965      	ldr	r5, [r4, #20]
 80054b2:	6909      	ldr	r1, [r1, #16]
 80054b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054b8:	eba3 0901 	sub.w	r9, r3, r1
 80054bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054c0:	1c7b      	adds	r3, r7, #1
 80054c2:	444b      	add	r3, r9
 80054c4:	106d      	asrs	r5, r5, #1
 80054c6:	429d      	cmp	r5, r3
 80054c8:	bf38      	it	cc
 80054ca:	461d      	movcc	r5, r3
 80054cc:	0553      	lsls	r3, r2, #21
 80054ce:	d527      	bpl.n	8005520 <__ssputs_r+0x8c>
 80054d0:	4629      	mov	r1, r5
 80054d2:	f7ff ff53 	bl	800537c <_malloc_r>
 80054d6:	4606      	mov	r6, r0
 80054d8:	b360      	cbz	r0, 8005534 <__ssputs_r+0xa0>
 80054da:	6921      	ldr	r1, [r4, #16]
 80054dc:	464a      	mov	r2, r9
 80054de:	f7ff fed3 	bl	8005288 <memcpy>
 80054e2:	89a3      	ldrh	r3, [r4, #12]
 80054e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80054e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ec:	81a3      	strh	r3, [r4, #12]
 80054ee:	6126      	str	r6, [r4, #16]
 80054f0:	6165      	str	r5, [r4, #20]
 80054f2:	444e      	add	r6, r9
 80054f4:	eba5 0509 	sub.w	r5, r5, r9
 80054f8:	6026      	str	r6, [r4, #0]
 80054fa:	60a5      	str	r5, [r4, #8]
 80054fc:	463e      	mov	r6, r7
 80054fe:	42be      	cmp	r6, r7
 8005500:	d900      	bls.n	8005504 <__ssputs_r+0x70>
 8005502:	463e      	mov	r6, r7
 8005504:	6820      	ldr	r0, [r4, #0]
 8005506:	4632      	mov	r2, r6
 8005508:	4641      	mov	r1, r8
 800550a:	f000 faab 	bl	8005a64 <memmove>
 800550e:	68a3      	ldr	r3, [r4, #8]
 8005510:	1b9b      	subs	r3, r3, r6
 8005512:	60a3      	str	r3, [r4, #8]
 8005514:	6823      	ldr	r3, [r4, #0]
 8005516:	4433      	add	r3, r6
 8005518:	6023      	str	r3, [r4, #0]
 800551a:	2000      	movs	r0, #0
 800551c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005520:	462a      	mov	r2, r5
 8005522:	f000 fac9 	bl	8005ab8 <_realloc_r>
 8005526:	4606      	mov	r6, r0
 8005528:	2800      	cmp	r0, #0
 800552a:	d1e0      	bne.n	80054ee <__ssputs_r+0x5a>
 800552c:	6921      	ldr	r1, [r4, #16]
 800552e:	4650      	mov	r0, sl
 8005530:	f7ff feb8 	bl	80052a4 <_free_r>
 8005534:	230c      	movs	r3, #12
 8005536:	f8ca 3000 	str.w	r3, [sl]
 800553a:	89a3      	ldrh	r3, [r4, #12]
 800553c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005540:	81a3      	strh	r3, [r4, #12]
 8005542:	f04f 30ff 	mov.w	r0, #4294967295
 8005546:	e7e9      	b.n	800551c <__ssputs_r+0x88>

08005548 <_svfiprintf_r>:
 8005548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800554c:	4698      	mov	r8, r3
 800554e:	898b      	ldrh	r3, [r1, #12]
 8005550:	061b      	lsls	r3, r3, #24
 8005552:	b09d      	sub	sp, #116	; 0x74
 8005554:	4607      	mov	r7, r0
 8005556:	460d      	mov	r5, r1
 8005558:	4614      	mov	r4, r2
 800555a:	d50e      	bpl.n	800557a <_svfiprintf_r+0x32>
 800555c:	690b      	ldr	r3, [r1, #16]
 800555e:	b963      	cbnz	r3, 800557a <_svfiprintf_r+0x32>
 8005560:	2140      	movs	r1, #64	; 0x40
 8005562:	f7ff ff0b 	bl	800537c <_malloc_r>
 8005566:	6028      	str	r0, [r5, #0]
 8005568:	6128      	str	r0, [r5, #16]
 800556a:	b920      	cbnz	r0, 8005576 <_svfiprintf_r+0x2e>
 800556c:	230c      	movs	r3, #12
 800556e:	603b      	str	r3, [r7, #0]
 8005570:	f04f 30ff 	mov.w	r0, #4294967295
 8005574:	e0d0      	b.n	8005718 <_svfiprintf_r+0x1d0>
 8005576:	2340      	movs	r3, #64	; 0x40
 8005578:	616b      	str	r3, [r5, #20]
 800557a:	2300      	movs	r3, #0
 800557c:	9309      	str	r3, [sp, #36]	; 0x24
 800557e:	2320      	movs	r3, #32
 8005580:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005584:	f8cd 800c 	str.w	r8, [sp, #12]
 8005588:	2330      	movs	r3, #48	; 0x30
 800558a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005730 <_svfiprintf_r+0x1e8>
 800558e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005592:	f04f 0901 	mov.w	r9, #1
 8005596:	4623      	mov	r3, r4
 8005598:	469a      	mov	sl, r3
 800559a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800559e:	b10a      	cbz	r2, 80055a4 <_svfiprintf_r+0x5c>
 80055a0:	2a25      	cmp	r2, #37	; 0x25
 80055a2:	d1f9      	bne.n	8005598 <_svfiprintf_r+0x50>
 80055a4:	ebba 0b04 	subs.w	fp, sl, r4
 80055a8:	d00b      	beq.n	80055c2 <_svfiprintf_r+0x7a>
 80055aa:	465b      	mov	r3, fp
 80055ac:	4622      	mov	r2, r4
 80055ae:	4629      	mov	r1, r5
 80055b0:	4638      	mov	r0, r7
 80055b2:	f7ff ff6f 	bl	8005494 <__ssputs_r>
 80055b6:	3001      	adds	r0, #1
 80055b8:	f000 80a9 	beq.w	800570e <_svfiprintf_r+0x1c6>
 80055bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055be:	445a      	add	r2, fp
 80055c0:	9209      	str	r2, [sp, #36]	; 0x24
 80055c2:	f89a 3000 	ldrb.w	r3, [sl]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 80a1 	beq.w	800570e <_svfiprintf_r+0x1c6>
 80055cc:	2300      	movs	r3, #0
 80055ce:	f04f 32ff 	mov.w	r2, #4294967295
 80055d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055d6:	f10a 0a01 	add.w	sl, sl, #1
 80055da:	9304      	str	r3, [sp, #16]
 80055dc:	9307      	str	r3, [sp, #28]
 80055de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055e2:	931a      	str	r3, [sp, #104]	; 0x68
 80055e4:	4654      	mov	r4, sl
 80055e6:	2205      	movs	r2, #5
 80055e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ec:	4850      	ldr	r0, [pc, #320]	; (8005730 <_svfiprintf_r+0x1e8>)
 80055ee:	f7fa fdf7 	bl	80001e0 <memchr>
 80055f2:	9a04      	ldr	r2, [sp, #16]
 80055f4:	b9d8      	cbnz	r0, 800562e <_svfiprintf_r+0xe6>
 80055f6:	06d0      	lsls	r0, r2, #27
 80055f8:	bf44      	itt	mi
 80055fa:	2320      	movmi	r3, #32
 80055fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005600:	0711      	lsls	r1, r2, #28
 8005602:	bf44      	itt	mi
 8005604:	232b      	movmi	r3, #43	; 0x2b
 8005606:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800560a:	f89a 3000 	ldrb.w	r3, [sl]
 800560e:	2b2a      	cmp	r3, #42	; 0x2a
 8005610:	d015      	beq.n	800563e <_svfiprintf_r+0xf6>
 8005612:	9a07      	ldr	r2, [sp, #28]
 8005614:	4654      	mov	r4, sl
 8005616:	2000      	movs	r0, #0
 8005618:	f04f 0c0a 	mov.w	ip, #10
 800561c:	4621      	mov	r1, r4
 800561e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005622:	3b30      	subs	r3, #48	; 0x30
 8005624:	2b09      	cmp	r3, #9
 8005626:	d94d      	bls.n	80056c4 <_svfiprintf_r+0x17c>
 8005628:	b1b0      	cbz	r0, 8005658 <_svfiprintf_r+0x110>
 800562a:	9207      	str	r2, [sp, #28]
 800562c:	e014      	b.n	8005658 <_svfiprintf_r+0x110>
 800562e:	eba0 0308 	sub.w	r3, r0, r8
 8005632:	fa09 f303 	lsl.w	r3, r9, r3
 8005636:	4313      	orrs	r3, r2
 8005638:	9304      	str	r3, [sp, #16]
 800563a:	46a2      	mov	sl, r4
 800563c:	e7d2      	b.n	80055e4 <_svfiprintf_r+0x9c>
 800563e:	9b03      	ldr	r3, [sp, #12]
 8005640:	1d19      	adds	r1, r3, #4
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	9103      	str	r1, [sp, #12]
 8005646:	2b00      	cmp	r3, #0
 8005648:	bfbb      	ittet	lt
 800564a:	425b      	neglt	r3, r3
 800564c:	f042 0202 	orrlt.w	r2, r2, #2
 8005650:	9307      	strge	r3, [sp, #28]
 8005652:	9307      	strlt	r3, [sp, #28]
 8005654:	bfb8      	it	lt
 8005656:	9204      	strlt	r2, [sp, #16]
 8005658:	7823      	ldrb	r3, [r4, #0]
 800565a:	2b2e      	cmp	r3, #46	; 0x2e
 800565c:	d10c      	bne.n	8005678 <_svfiprintf_r+0x130>
 800565e:	7863      	ldrb	r3, [r4, #1]
 8005660:	2b2a      	cmp	r3, #42	; 0x2a
 8005662:	d134      	bne.n	80056ce <_svfiprintf_r+0x186>
 8005664:	9b03      	ldr	r3, [sp, #12]
 8005666:	1d1a      	adds	r2, r3, #4
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	9203      	str	r2, [sp, #12]
 800566c:	2b00      	cmp	r3, #0
 800566e:	bfb8      	it	lt
 8005670:	f04f 33ff 	movlt.w	r3, #4294967295
 8005674:	3402      	adds	r4, #2
 8005676:	9305      	str	r3, [sp, #20]
 8005678:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005740 <_svfiprintf_r+0x1f8>
 800567c:	7821      	ldrb	r1, [r4, #0]
 800567e:	2203      	movs	r2, #3
 8005680:	4650      	mov	r0, sl
 8005682:	f7fa fdad 	bl	80001e0 <memchr>
 8005686:	b138      	cbz	r0, 8005698 <_svfiprintf_r+0x150>
 8005688:	9b04      	ldr	r3, [sp, #16]
 800568a:	eba0 000a 	sub.w	r0, r0, sl
 800568e:	2240      	movs	r2, #64	; 0x40
 8005690:	4082      	lsls	r2, r0
 8005692:	4313      	orrs	r3, r2
 8005694:	3401      	adds	r4, #1
 8005696:	9304      	str	r3, [sp, #16]
 8005698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800569c:	4825      	ldr	r0, [pc, #148]	; (8005734 <_svfiprintf_r+0x1ec>)
 800569e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056a2:	2206      	movs	r2, #6
 80056a4:	f7fa fd9c 	bl	80001e0 <memchr>
 80056a8:	2800      	cmp	r0, #0
 80056aa:	d038      	beq.n	800571e <_svfiprintf_r+0x1d6>
 80056ac:	4b22      	ldr	r3, [pc, #136]	; (8005738 <_svfiprintf_r+0x1f0>)
 80056ae:	bb1b      	cbnz	r3, 80056f8 <_svfiprintf_r+0x1b0>
 80056b0:	9b03      	ldr	r3, [sp, #12]
 80056b2:	3307      	adds	r3, #7
 80056b4:	f023 0307 	bic.w	r3, r3, #7
 80056b8:	3308      	adds	r3, #8
 80056ba:	9303      	str	r3, [sp, #12]
 80056bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056be:	4433      	add	r3, r6
 80056c0:	9309      	str	r3, [sp, #36]	; 0x24
 80056c2:	e768      	b.n	8005596 <_svfiprintf_r+0x4e>
 80056c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80056c8:	460c      	mov	r4, r1
 80056ca:	2001      	movs	r0, #1
 80056cc:	e7a6      	b.n	800561c <_svfiprintf_r+0xd4>
 80056ce:	2300      	movs	r3, #0
 80056d0:	3401      	adds	r4, #1
 80056d2:	9305      	str	r3, [sp, #20]
 80056d4:	4619      	mov	r1, r3
 80056d6:	f04f 0c0a 	mov.w	ip, #10
 80056da:	4620      	mov	r0, r4
 80056dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056e0:	3a30      	subs	r2, #48	; 0x30
 80056e2:	2a09      	cmp	r2, #9
 80056e4:	d903      	bls.n	80056ee <_svfiprintf_r+0x1a6>
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0c6      	beq.n	8005678 <_svfiprintf_r+0x130>
 80056ea:	9105      	str	r1, [sp, #20]
 80056ec:	e7c4      	b.n	8005678 <_svfiprintf_r+0x130>
 80056ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80056f2:	4604      	mov	r4, r0
 80056f4:	2301      	movs	r3, #1
 80056f6:	e7f0      	b.n	80056da <_svfiprintf_r+0x192>
 80056f8:	ab03      	add	r3, sp, #12
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	462a      	mov	r2, r5
 80056fe:	4b0f      	ldr	r3, [pc, #60]	; (800573c <_svfiprintf_r+0x1f4>)
 8005700:	a904      	add	r1, sp, #16
 8005702:	4638      	mov	r0, r7
 8005704:	f3af 8000 	nop.w
 8005708:	1c42      	adds	r2, r0, #1
 800570a:	4606      	mov	r6, r0
 800570c:	d1d6      	bne.n	80056bc <_svfiprintf_r+0x174>
 800570e:	89ab      	ldrh	r3, [r5, #12]
 8005710:	065b      	lsls	r3, r3, #25
 8005712:	f53f af2d 	bmi.w	8005570 <_svfiprintf_r+0x28>
 8005716:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005718:	b01d      	add	sp, #116	; 0x74
 800571a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800571e:	ab03      	add	r3, sp, #12
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	462a      	mov	r2, r5
 8005724:	4b05      	ldr	r3, [pc, #20]	; (800573c <_svfiprintf_r+0x1f4>)
 8005726:	a904      	add	r1, sp, #16
 8005728:	4638      	mov	r0, r7
 800572a:	f000 f879 	bl	8005820 <_printf_i>
 800572e:	e7eb      	b.n	8005708 <_svfiprintf_r+0x1c0>
 8005730:	08006161 	.word	0x08006161
 8005734:	0800616b 	.word	0x0800616b
 8005738:	00000000 	.word	0x00000000
 800573c:	08005495 	.word	0x08005495
 8005740:	08006167 	.word	0x08006167

08005744 <_printf_common>:
 8005744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005748:	4616      	mov	r6, r2
 800574a:	4699      	mov	r9, r3
 800574c:	688a      	ldr	r2, [r1, #8]
 800574e:	690b      	ldr	r3, [r1, #16]
 8005750:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005754:	4293      	cmp	r3, r2
 8005756:	bfb8      	it	lt
 8005758:	4613      	movlt	r3, r2
 800575a:	6033      	str	r3, [r6, #0]
 800575c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005760:	4607      	mov	r7, r0
 8005762:	460c      	mov	r4, r1
 8005764:	b10a      	cbz	r2, 800576a <_printf_common+0x26>
 8005766:	3301      	adds	r3, #1
 8005768:	6033      	str	r3, [r6, #0]
 800576a:	6823      	ldr	r3, [r4, #0]
 800576c:	0699      	lsls	r1, r3, #26
 800576e:	bf42      	ittt	mi
 8005770:	6833      	ldrmi	r3, [r6, #0]
 8005772:	3302      	addmi	r3, #2
 8005774:	6033      	strmi	r3, [r6, #0]
 8005776:	6825      	ldr	r5, [r4, #0]
 8005778:	f015 0506 	ands.w	r5, r5, #6
 800577c:	d106      	bne.n	800578c <_printf_common+0x48>
 800577e:	f104 0a19 	add.w	sl, r4, #25
 8005782:	68e3      	ldr	r3, [r4, #12]
 8005784:	6832      	ldr	r2, [r6, #0]
 8005786:	1a9b      	subs	r3, r3, r2
 8005788:	42ab      	cmp	r3, r5
 800578a:	dc26      	bgt.n	80057da <_printf_common+0x96>
 800578c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005790:	1e13      	subs	r3, r2, #0
 8005792:	6822      	ldr	r2, [r4, #0]
 8005794:	bf18      	it	ne
 8005796:	2301      	movne	r3, #1
 8005798:	0692      	lsls	r2, r2, #26
 800579a:	d42b      	bmi.n	80057f4 <_printf_common+0xb0>
 800579c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057a0:	4649      	mov	r1, r9
 80057a2:	4638      	mov	r0, r7
 80057a4:	47c0      	blx	r8
 80057a6:	3001      	adds	r0, #1
 80057a8:	d01e      	beq.n	80057e8 <_printf_common+0xa4>
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	6922      	ldr	r2, [r4, #16]
 80057ae:	f003 0306 	and.w	r3, r3, #6
 80057b2:	2b04      	cmp	r3, #4
 80057b4:	bf02      	ittt	eq
 80057b6:	68e5      	ldreq	r5, [r4, #12]
 80057b8:	6833      	ldreq	r3, [r6, #0]
 80057ba:	1aed      	subeq	r5, r5, r3
 80057bc:	68a3      	ldr	r3, [r4, #8]
 80057be:	bf0c      	ite	eq
 80057c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057c4:	2500      	movne	r5, #0
 80057c6:	4293      	cmp	r3, r2
 80057c8:	bfc4      	itt	gt
 80057ca:	1a9b      	subgt	r3, r3, r2
 80057cc:	18ed      	addgt	r5, r5, r3
 80057ce:	2600      	movs	r6, #0
 80057d0:	341a      	adds	r4, #26
 80057d2:	42b5      	cmp	r5, r6
 80057d4:	d11a      	bne.n	800580c <_printf_common+0xc8>
 80057d6:	2000      	movs	r0, #0
 80057d8:	e008      	b.n	80057ec <_printf_common+0xa8>
 80057da:	2301      	movs	r3, #1
 80057dc:	4652      	mov	r2, sl
 80057de:	4649      	mov	r1, r9
 80057e0:	4638      	mov	r0, r7
 80057e2:	47c0      	blx	r8
 80057e4:	3001      	adds	r0, #1
 80057e6:	d103      	bne.n	80057f0 <_printf_common+0xac>
 80057e8:	f04f 30ff 	mov.w	r0, #4294967295
 80057ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057f0:	3501      	adds	r5, #1
 80057f2:	e7c6      	b.n	8005782 <_printf_common+0x3e>
 80057f4:	18e1      	adds	r1, r4, r3
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	2030      	movs	r0, #48	; 0x30
 80057fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057fe:	4422      	add	r2, r4
 8005800:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005804:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005808:	3302      	adds	r3, #2
 800580a:	e7c7      	b.n	800579c <_printf_common+0x58>
 800580c:	2301      	movs	r3, #1
 800580e:	4622      	mov	r2, r4
 8005810:	4649      	mov	r1, r9
 8005812:	4638      	mov	r0, r7
 8005814:	47c0      	blx	r8
 8005816:	3001      	adds	r0, #1
 8005818:	d0e6      	beq.n	80057e8 <_printf_common+0xa4>
 800581a:	3601      	adds	r6, #1
 800581c:	e7d9      	b.n	80057d2 <_printf_common+0x8e>
	...

08005820 <_printf_i>:
 8005820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005824:	7e0f      	ldrb	r7, [r1, #24]
 8005826:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005828:	2f78      	cmp	r7, #120	; 0x78
 800582a:	4691      	mov	r9, r2
 800582c:	4680      	mov	r8, r0
 800582e:	460c      	mov	r4, r1
 8005830:	469a      	mov	sl, r3
 8005832:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005836:	d807      	bhi.n	8005848 <_printf_i+0x28>
 8005838:	2f62      	cmp	r7, #98	; 0x62
 800583a:	d80a      	bhi.n	8005852 <_printf_i+0x32>
 800583c:	2f00      	cmp	r7, #0
 800583e:	f000 80d4 	beq.w	80059ea <_printf_i+0x1ca>
 8005842:	2f58      	cmp	r7, #88	; 0x58
 8005844:	f000 80c0 	beq.w	80059c8 <_printf_i+0x1a8>
 8005848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800584c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005850:	e03a      	b.n	80058c8 <_printf_i+0xa8>
 8005852:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005856:	2b15      	cmp	r3, #21
 8005858:	d8f6      	bhi.n	8005848 <_printf_i+0x28>
 800585a:	a101      	add	r1, pc, #4	; (adr r1, 8005860 <_printf_i+0x40>)
 800585c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005860:	080058b9 	.word	0x080058b9
 8005864:	080058cd 	.word	0x080058cd
 8005868:	08005849 	.word	0x08005849
 800586c:	08005849 	.word	0x08005849
 8005870:	08005849 	.word	0x08005849
 8005874:	08005849 	.word	0x08005849
 8005878:	080058cd 	.word	0x080058cd
 800587c:	08005849 	.word	0x08005849
 8005880:	08005849 	.word	0x08005849
 8005884:	08005849 	.word	0x08005849
 8005888:	08005849 	.word	0x08005849
 800588c:	080059d1 	.word	0x080059d1
 8005890:	080058f9 	.word	0x080058f9
 8005894:	0800598b 	.word	0x0800598b
 8005898:	08005849 	.word	0x08005849
 800589c:	08005849 	.word	0x08005849
 80058a0:	080059f3 	.word	0x080059f3
 80058a4:	08005849 	.word	0x08005849
 80058a8:	080058f9 	.word	0x080058f9
 80058ac:	08005849 	.word	0x08005849
 80058b0:	08005849 	.word	0x08005849
 80058b4:	08005993 	.word	0x08005993
 80058b8:	682b      	ldr	r3, [r5, #0]
 80058ba:	1d1a      	adds	r2, r3, #4
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	602a      	str	r2, [r5, #0]
 80058c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058c8:	2301      	movs	r3, #1
 80058ca:	e09f      	b.n	8005a0c <_printf_i+0x1ec>
 80058cc:	6820      	ldr	r0, [r4, #0]
 80058ce:	682b      	ldr	r3, [r5, #0]
 80058d0:	0607      	lsls	r7, r0, #24
 80058d2:	f103 0104 	add.w	r1, r3, #4
 80058d6:	6029      	str	r1, [r5, #0]
 80058d8:	d501      	bpl.n	80058de <_printf_i+0xbe>
 80058da:	681e      	ldr	r6, [r3, #0]
 80058dc:	e003      	b.n	80058e6 <_printf_i+0xc6>
 80058de:	0646      	lsls	r6, r0, #25
 80058e0:	d5fb      	bpl.n	80058da <_printf_i+0xba>
 80058e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80058e6:	2e00      	cmp	r6, #0
 80058e8:	da03      	bge.n	80058f2 <_printf_i+0xd2>
 80058ea:	232d      	movs	r3, #45	; 0x2d
 80058ec:	4276      	negs	r6, r6
 80058ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058f2:	485a      	ldr	r0, [pc, #360]	; (8005a5c <_printf_i+0x23c>)
 80058f4:	230a      	movs	r3, #10
 80058f6:	e012      	b.n	800591e <_printf_i+0xfe>
 80058f8:	682b      	ldr	r3, [r5, #0]
 80058fa:	6820      	ldr	r0, [r4, #0]
 80058fc:	1d19      	adds	r1, r3, #4
 80058fe:	6029      	str	r1, [r5, #0]
 8005900:	0605      	lsls	r5, r0, #24
 8005902:	d501      	bpl.n	8005908 <_printf_i+0xe8>
 8005904:	681e      	ldr	r6, [r3, #0]
 8005906:	e002      	b.n	800590e <_printf_i+0xee>
 8005908:	0641      	lsls	r1, r0, #25
 800590a:	d5fb      	bpl.n	8005904 <_printf_i+0xe4>
 800590c:	881e      	ldrh	r6, [r3, #0]
 800590e:	4853      	ldr	r0, [pc, #332]	; (8005a5c <_printf_i+0x23c>)
 8005910:	2f6f      	cmp	r7, #111	; 0x6f
 8005912:	bf0c      	ite	eq
 8005914:	2308      	moveq	r3, #8
 8005916:	230a      	movne	r3, #10
 8005918:	2100      	movs	r1, #0
 800591a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800591e:	6865      	ldr	r5, [r4, #4]
 8005920:	60a5      	str	r5, [r4, #8]
 8005922:	2d00      	cmp	r5, #0
 8005924:	bfa2      	ittt	ge
 8005926:	6821      	ldrge	r1, [r4, #0]
 8005928:	f021 0104 	bicge.w	r1, r1, #4
 800592c:	6021      	strge	r1, [r4, #0]
 800592e:	b90e      	cbnz	r6, 8005934 <_printf_i+0x114>
 8005930:	2d00      	cmp	r5, #0
 8005932:	d04b      	beq.n	80059cc <_printf_i+0x1ac>
 8005934:	4615      	mov	r5, r2
 8005936:	fbb6 f1f3 	udiv	r1, r6, r3
 800593a:	fb03 6711 	mls	r7, r3, r1, r6
 800593e:	5dc7      	ldrb	r7, [r0, r7]
 8005940:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005944:	4637      	mov	r7, r6
 8005946:	42bb      	cmp	r3, r7
 8005948:	460e      	mov	r6, r1
 800594a:	d9f4      	bls.n	8005936 <_printf_i+0x116>
 800594c:	2b08      	cmp	r3, #8
 800594e:	d10b      	bne.n	8005968 <_printf_i+0x148>
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	07de      	lsls	r6, r3, #31
 8005954:	d508      	bpl.n	8005968 <_printf_i+0x148>
 8005956:	6923      	ldr	r3, [r4, #16]
 8005958:	6861      	ldr	r1, [r4, #4]
 800595a:	4299      	cmp	r1, r3
 800595c:	bfde      	ittt	le
 800595e:	2330      	movle	r3, #48	; 0x30
 8005960:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005964:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005968:	1b52      	subs	r2, r2, r5
 800596a:	6122      	str	r2, [r4, #16]
 800596c:	f8cd a000 	str.w	sl, [sp]
 8005970:	464b      	mov	r3, r9
 8005972:	aa03      	add	r2, sp, #12
 8005974:	4621      	mov	r1, r4
 8005976:	4640      	mov	r0, r8
 8005978:	f7ff fee4 	bl	8005744 <_printf_common>
 800597c:	3001      	adds	r0, #1
 800597e:	d14a      	bne.n	8005a16 <_printf_i+0x1f6>
 8005980:	f04f 30ff 	mov.w	r0, #4294967295
 8005984:	b004      	add	sp, #16
 8005986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	f043 0320 	orr.w	r3, r3, #32
 8005990:	6023      	str	r3, [r4, #0]
 8005992:	4833      	ldr	r0, [pc, #204]	; (8005a60 <_printf_i+0x240>)
 8005994:	2778      	movs	r7, #120	; 0x78
 8005996:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800599a:	6823      	ldr	r3, [r4, #0]
 800599c:	6829      	ldr	r1, [r5, #0]
 800599e:	061f      	lsls	r7, r3, #24
 80059a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80059a4:	d402      	bmi.n	80059ac <_printf_i+0x18c>
 80059a6:	065f      	lsls	r7, r3, #25
 80059a8:	bf48      	it	mi
 80059aa:	b2b6      	uxthmi	r6, r6
 80059ac:	07df      	lsls	r7, r3, #31
 80059ae:	bf48      	it	mi
 80059b0:	f043 0320 	orrmi.w	r3, r3, #32
 80059b4:	6029      	str	r1, [r5, #0]
 80059b6:	bf48      	it	mi
 80059b8:	6023      	strmi	r3, [r4, #0]
 80059ba:	b91e      	cbnz	r6, 80059c4 <_printf_i+0x1a4>
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	f023 0320 	bic.w	r3, r3, #32
 80059c2:	6023      	str	r3, [r4, #0]
 80059c4:	2310      	movs	r3, #16
 80059c6:	e7a7      	b.n	8005918 <_printf_i+0xf8>
 80059c8:	4824      	ldr	r0, [pc, #144]	; (8005a5c <_printf_i+0x23c>)
 80059ca:	e7e4      	b.n	8005996 <_printf_i+0x176>
 80059cc:	4615      	mov	r5, r2
 80059ce:	e7bd      	b.n	800594c <_printf_i+0x12c>
 80059d0:	682b      	ldr	r3, [r5, #0]
 80059d2:	6826      	ldr	r6, [r4, #0]
 80059d4:	6961      	ldr	r1, [r4, #20]
 80059d6:	1d18      	adds	r0, r3, #4
 80059d8:	6028      	str	r0, [r5, #0]
 80059da:	0635      	lsls	r5, r6, #24
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	d501      	bpl.n	80059e4 <_printf_i+0x1c4>
 80059e0:	6019      	str	r1, [r3, #0]
 80059e2:	e002      	b.n	80059ea <_printf_i+0x1ca>
 80059e4:	0670      	lsls	r0, r6, #25
 80059e6:	d5fb      	bpl.n	80059e0 <_printf_i+0x1c0>
 80059e8:	8019      	strh	r1, [r3, #0]
 80059ea:	2300      	movs	r3, #0
 80059ec:	6123      	str	r3, [r4, #16]
 80059ee:	4615      	mov	r5, r2
 80059f0:	e7bc      	b.n	800596c <_printf_i+0x14c>
 80059f2:	682b      	ldr	r3, [r5, #0]
 80059f4:	1d1a      	adds	r2, r3, #4
 80059f6:	602a      	str	r2, [r5, #0]
 80059f8:	681d      	ldr	r5, [r3, #0]
 80059fa:	6862      	ldr	r2, [r4, #4]
 80059fc:	2100      	movs	r1, #0
 80059fe:	4628      	mov	r0, r5
 8005a00:	f7fa fbee 	bl	80001e0 <memchr>
 8005a04:	b108      	cbz	r0, 8005a0a <_printf_i+0x1ea>
 8005a06:	1b40      	subs	r0, r0, r5
 8005a08:	6060      	str	r0, [r4, #4]
 8005a0a:	6863      	ldr	r3, [r4, #4]
 8005a0c:	6123      	str	r3, [r4, #16]
 8005a0e:	2300      	movs	r3, #0
 8005a10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a14:	e7aa      	b.n	800596c <_printf_i+0x14c>
 8005a16:	6923      	ldr	r3, [r4, #16]
 8005a18:	462a      	mov	r2, r5
 8005a1a:	4649      	mov	r1, r9
 8005a1c:	4640      	mov	r0, r8
 8005a1e:	47d0      	blx	sl
 8005a20:	3001      	adds	r0, #1
 8005a22:	d0ad      	beq.n	8005980 <_printf_i+0x160>
 8005a24:	6823      	ldr	r3, [r4, #0]
 8005a26:	079b      	lsls	r3, r3, #30
 8005a28:	d413      	bmi.n	8005a52 <_printf_i+0x232>
 8005a2a:	68e0      	ldr	r0, [r4, #12]
 8005a2c:	9b03      	ldr	r3, [sp, #12]
 8005a2e:	4298      	cmp	r0, r3
 8005a30:	bfb8      	it	lt
 8005a32:	4618      	movlt	r0, r3
 8005a34:	e7a6      	b.n	8005984 <_printf_i+0x164>
 8005a36:	2301      	movs	r3, #1
 8005a38:	4632      	mov	r2, r6
 8005a3a:	4649      	mov	r1, r9
 8005a3c:	4640      	mov	r0, r8
 8005a3e:	47d0      	blx	sl
 8005a40:	3001      	adds	r0, #1
 8005a42:	d09d      	beq.n	8005980 <_printf_i+0x160>
 8005a44:	3501      	adds	r5, #1
 8005a46:	68e3      	ldr	r3, [r4, #12]
 8005a48:	9903      	ldr	r1, [sp, #12]
 8005a4a:	1a5b      	subs	r3, r3, r1
 8005a4c:	42ab      	cmp	r3, r5
 8005a4e:	dcf2      	bgt.n	8005a36 <_printf_i+0x216>
 8005a50:	e7eb      	b.n	8005a2a <_printf_i+0x20a>
 8005a52:	2500      	movs	r5, #0
 8005a54:	f104 0619 	add.w	r6, r4, #25
 8005a58:	e7f5      	b.n	8005a46 <_printf_i+0x226>
 8005a5a:	bf00      	nop
 8005a5c:	08006172 	.word	0x08006172
 8005a60:	08006183 	.word	0x08006183

08005a64 <memmove>:
 8005a64:	4288      	cmp	r0, r1
 8005a66:	b510      	push	{r4, lr}
 8005a68:	eb01 0402 	add.w	r4, r1, r2
 8005a6c:	d902      	bls.n	8005a74 <memmove+0x10>
 8005a6e:	4284      	cmp	r4, r0
 8005a70:	4623      	mov	r3, r4
 8005a72:	d807      	bhi.n	8005a84 <memmove+0x20>
 8005a74:	1e43      	subs	r3, r0, #1
 8005a76:	42a1      	cmp	r1, r4
 8005a78:	d008      	beq.n	8005a8c <memmove+0x28>
 8005a7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a82:	e7f8      	b.n	8005a76 <memmove+0x12>
 8005a84:	4402      	add	r2, r0
 8005a86:	4601      	mov	r1, r0
 8005a88:	428a      	cmp	r2, r1
 8005a8a:	d100      	bne.n	8005a8e <memmove+0x2a>
 8005a8c:	bd10      	pop	{r4, pc}
 8005a8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a96:	e7f7      	b.n	8005a88 <memmove+0x24>

08005a98 <_sbrk_r>:
 8005a98:	b538      	push	{r3, r4, r5, lr}
 8005a9a:	4d06      	ldr	r5, [pc, #24]	; (8005ab4 <_sbrk_r+0x1c>)
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	4604      	mov	r4, r0
 8005aa0:	4608      	mov	r0, r1
 8005aa2:	602b      	str	r3, [r5, #0]
 8005aa4:	f7fb fd0e 	bl	80014c4 <_sbrk>
 8005aa8:	1c43      	adds	r3, r0, #1
 8005aaa:	d102      	bne.n	8005ab2 <_sbrk_r+0x1a>
 8005aac:	682b      	ldr	r3, [r5, #0]
 8005aae:	b103      	cbz	r3, 8005ab2 <_sbrk_r+0x1a>
 8005ab0:	6023      	str	r3, [r4, #0]
 8005ab2:	bd38      	pop	{r3, r4, r5, pc}
 8005ab4:	20001ebc 	.word	0x20001ebc

08005ab8 <_realloc_r>:
 8005ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005abc:	4680      	mov	r8, r0
 8005abe:	4614      	mov	r4, r2
 8005ac0:	460e      	mov	r6, r1
 8005ac2:	b921      	cbnz	r1, 8005ace <_realloc_r+0x16>
 8005ac4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ac8:	4611      	mov	r1, r2
 8005aca:	f7ff bc57 	b.w	800537c <_malloc_r>
 8005ace:	b92a      	cbnz	r2, 8005adc <_realloc_r+0x24>
 8005ad0:	f7ff fbe8 	bl	80052a4 <_free_r>
 8005ad4:	4625      	mov	r5, r4
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005adc:	f000 f81b 	bl	8005b16 <_malloc_usable_size_r>
 8005ae0:	4284      	cmp	r4, r0
 8005ae2:	4607      	mov	r7, r0
 8005ae4:	d802      	bhi.n	8005aec <_realloc_r+0x34>
 8005ae6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005aea:	d812      	bhi.n	8005b12 <_realloc_r+0x5a>
 8005aec:	4621      	mov	r1, r4
 8005aee:	4640      	mov	r0, r8
 8005af0:	f7ff fc44 	bl	800537c <_malloc_r>
 8005af4:	4605      	mov	r5, r0
 8005af6:	2800      	cmp	r0, #0
 8005af8:	d0ed      	beq.n	8005ad6 <_realloc_r+0x1e>
 8005afa:	42bc      	cmp	r4, r7
 8005afc:	4622      	mov	r2, r4
 8005afe:	4631      	mov	r1, r6
 8005b00:	bf28      	it	cs
 8005b02:	463a      	movcs	r2, r7
 8005b04:	f7ff fbc0 	bl	8005288 <memcpy>
 8005b08:	4631      	mov	r1, r6
 8005b0a:	4640      	mov	r0, r8
 8005b0c:	f7ff fbca 	bl	80052a4 <_free_r>
 8005b10:	e7e1      	b.n	8005ad6 <_realloc_r+0x1e>
 8005b12:	4635      	mov	r5, r6
 8005b14:	e7df      	b.n	8005ad6 <_realloc_r+0x1e>

08005b16 <_malloc_usable_size_r>:
 8005b16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b1a:	1f18      	subs	r0, r3, #4
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	bfbc      	itt	lt
 8005b20:	580b      	ldrlt	r3, [r1, r0]
 8005b22:	18c0      	addlt	r0, r0, r3
 8005b24:	4770      	bx	lr
	...

08005b28 <_init>:
 8005b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2a:	bf00      	nop
 8005b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b2e:	bc08      	pop	{r3}
 8005b30:	469e      	mov	lr, r3
 8005b32:	4770      	bx	lr

08005b34 <_fini>:
 8005b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b36:	bf00      	nop
 8005b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b3a:	bc08      	pop	{r3}
 8005b3c:	469e      	mov	lr, r3
 8005b3e:	4770      	bx	lr
