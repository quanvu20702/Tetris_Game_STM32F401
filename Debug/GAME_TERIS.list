
GAME_TERIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005934  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000654  08005ad4  08005ad4  00015ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006128  08006128  000205e8  2**0
                  CONTENTS
  4 .ARM          00000000  08006128  08006128  000205e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006128  08006128  000205e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006128  08006128  00016128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800612c  0800612c  0001612c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005e8  20000000  08006130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018ec  200005e8  08006718  000205e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ed4  08006718  00021ed4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205e8  2**0
                  CONTENTS, READONLY
 12 .comment      000000be  00000000  00000000  00020618  2**0
                  CONTENTS, READONLY
 13 .debug_info   000392a9  00000000  00000000  000206d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000330d  00000000  00000000  0005997f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e58  00000000  00000000  0005cc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000dc  00000000  00000000  0005dae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000111d8  00000000  00000000  0005dbc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bcd7  00000000  00000000  0006ed9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00052782  00000000  00000000  0007aa73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d78  00000000  00000000  000cd1f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000d0f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000b50  00000000  00000000  000d0fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200005e8 	.word	0x200005e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005abc 	.word	0x08005abc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200005ec 	.word	0x200005ec
 80001dc:	08005abc 	.word	0x08005abc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <initB1ButtonInterrupt>:
 * @func   initB1ButtonInterrupt
 * @brief  Initialize Interrupt for Button B1
 * @param  None
 * @retval None
 */
static void initB1ButtonInterrupt(void){
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef	GPIO_InitStructure;
	EXTI_InitTypeDef	EXTI_InitStructure;
	NVIC_InitTypeDef	NVIC_InitStructure;

	// Enable Clock Port B;
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000286:	2101      	movs	r1, #1
 8000288:	2002      	movs	r0, #2
 800028a:	f001 fc93 	bl	8001bb4 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800028e:	2300      	movs	r3, #0
 8000290:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Pin = BUTTON_UP_B1_PIN;
 8000292:	2320      	movs	r3, #32
 8000294:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000296:	2301      	movs	r3, #1
 8000298:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800029a:	2302      	movs	r3, #2
 800029c:	757b      	strb	r3, [r7, #21]

	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800029e:	f107 0310 	add.w	r3, r7, #16
 80002a2:	4619      	mov	r1, r3
 80002a4:	4814      	ldr	r0, [pc, #80]	; (80002f8 <initB1ButtonInterrupt+0x78>)
 80002a6:	f001 fb37 	bl	8001918 <GPIO_Init>

	//  Enable Clock Syscfg, Connect EXTI Line 5 to PB5 pin
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80002aa:	2101      	movs	r1, #1
 80002ac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80002b0:	f001 fca0 	bl	8001bf4 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource5);
 80002b4:	2105      	movs	r1, #5
 80002b6:	2001      	movs	r0, #1
 80002b8:	f001 fcdc 	bl	8001c74 <SYSCFG_EXTILineConfig>

	//	Configuration Interrupt
	EXTI_InitStructure.EXTI_Line =  EXTI_Line5;
 80002bc:	2320      	movs	r3, #32
 80002be:	60bb      	str	r3, [r7, #8]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80002c0:	2301      	movs	r3, #1
 80002c2:	73bb      	strb	r3, [r7, #14]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 80002c4:	2300      	movs	r3, #0
 80002c6:	733b      	strb	r3, [r7, #12]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 80002c8:	230c      	movs	r3, #12
 80002ca:	737b      	strb	r3, [r7, #13]
	EXTI_Init(&EXTI_InitStructure);
 80002cc:	f107 0308 	add.w	r3, r7, #8
 80002d0:	4618      	mov	r0, r3
 80002d2:	f001 fa85 	bl	80017e0 <EXTI_Init>

	// Configuration NVIC
	NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn;
 80002d6:	2317      	movs	r3, #23
 80002d8:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80002da:	2301      	movs	r3, #1
 80002dc:	71fb      	strb	r3, [r7, #7]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80002de:	2300      	movs	r3, #0
 80002e0:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVIC_InitStructure);
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	4618      	mov	r0, r3
 80002ea:	f001 fa17 	bl	800171c <NVIC_Init>
}
 80002ee:	bf00      	nop
 80002f0:	3718      	adds	r7, #24
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40020400 	.word	0x40020400

080002fc <initB2ButtonInterrupt>:
 * @func   initB2ButtonInterrupt
 * @brief  Initialize Interrupt for Button B2
 * @param  None
 * @retval None
 */
static void initB2ButtonInterrupt(void) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b086      	sub	sp, #24
 8000300:	af00      	add	r7, sp, #0
    // Enable Clock Port B
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000302:	2101      	movs	r1, #1
 8000304:	2002      	movs	r0, #2
 8000306:	f001 fc55 	bl	8001bb4 <RCC_AHB1PeriphClockCmd>

    // Configure GPIO for Button B2
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800030a:	2300      	movs	r3, #0
 800030c:	753b      	strb	r3, [r7, #20]
    GPIO_InitStructure.GPIO_Pin = BUTTON_LEFT_B2_PIN;
 800030e:	2308      	movs	r3, #8
 8000310:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000312:	2301      	movs	r3, #1
 8000314:	75fb      	strb	r3, [r7, #23]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000316:	2302      	movs	r3, #2
 8000318:	757b      	strb	r3, [r7, #21]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 800031a:	f107 0310 	add.w	r3, r7, #16
 800031e:	4619      	mov	r1, r3
 8000320:	4814      	ldr	r0, [pc, #80]	; (8000374 <initB2ButtonInterrupt+0x78>)
 8000322:	f001 faf9 	bl	8001918 <GPIO_Init>

    // Enable Clock for Syscfg, Connect EXTI Line 3 to PB3 pin
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8000326:	2101      	movs	r1, #1
 8000328:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800032c:	f001 fc62 	bl	8001bf4 <RCC_APB2PeriphClockCmd>
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource3);
 8000330:	2103      	movs	r1, #3
 8000332:	2001      	movs	r0, #1
 8000334:	f001 fc9e 	bl	8001c74 <SYSCFG_EXTILineConfig>

    // Configure EXTI for Button B2
    EXTI_InitTypeDef EXTI_InitStructure;
    EXTI_InitStructure.EXTI_Line = EXTI_Line3;
 8000338:	2308      	movs	r3, #8
 800033a:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800033c:	2301      	movs	r3, #1
 800033e:	73bb      	strb	r3, [r7, #14]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000340:	2300      	movs	r3, #0
 8000342:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 8000344:	230c      	movs	r3, #12
 8000346:	737b      	strb	r3, [r7, #13]
    EXTI_Init(&EXTI_InitStructure);
 8000348:	f107 0308 	add.w	r3, r7, #8
 800034c:	4618      	mov	r0, r3
 800034e:	f001 fa47 	bl	80017e0 <EXTI_Init>

    // Configure NVIC for Button B2
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = EXTI3_IRQn;
 8000352:	2309      	movs	r3, #9
 8000354:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000356:	2301      	movs	r3, #1
 8000358:	71fb      	strb	r3, [r7, #7]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800035a:	2300      	movs	r3, #0
 800035c:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800035e:	2300      	movs	r3, #0
 8000360:	71bb      	strb	r3, [r7, #6]
    NVIC_Init(&NVIC_InitStructure);
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	4618      	mov	r0, r3
 8000366:	f001 f9d9 	bl	800171c <NVIC_Init>
}
 800036a:	bf00      	nop
 800036c:	3718      	adds	r7, #24
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40020400 	.word	0x40020400

08000378 <initB3ButtonInterrupt>:
 * @func   initB3ButtonInterrupt
 * @brief  Initialize Interrupt for Button B3
 * @param  None
 * @retval None
 */
static void initB3ButtonInterrupt(void) {
 8000378:	b580      	push	{r7, lr}
 800037a:	b086      	sub	sp, #24
 800037c:	af00      	add	r7, sp, #0
    // Enable Clock Port A
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800037e:	2101      	movs	r1, #1
 8000380:	2001      	movs	r0, #1
 8000382:	f001 fc17 	bl	8001bb4 <RCC_AHB1PeriphClockCmd>

    // Configure GPIO for Button B3
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000386:	2300      	movs	r3, #0
 8000388:	753b      	strb	r3, [r7, #20]
    GPIO_InitStructure.GPIO_Pin = BUTTON_PLAY_B3_PIN;
 800038a:	2310      	movs	r3, #16
 800038c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800038e:	2301      	movs	r3, #1
 8000390:	75fb      	strb	r3, [r7, #23]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000392:	2302      	movs	r3, #2
 8000394:	757b      	strb	r3, [r7, #21]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000396:	f107 0310 	add.w	r3, r7, #16
 800039a:	4619      	mov	r1, r3
 800039c:	4814      	ldr	r0, [pc, #80]	; (80003f0 <initB3ButtonInterrupt+0x78>)
 800039e:	f001 fabb 	bl	8001918 <GPIO_Init>

    // Enable Clock for Syscfg, Connect EXTI Line 4 to PA4 pin
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80003a2:	2101      	movs	r1, #1
 80003a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80003a8:	f001 fc24 	bl	8001bf4 <RCC_APB2PeriphClockCmd>
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource4);
 80003ac:	2104      	movs	r1, #4
 80003ae:	2000      	movs	r0, #0
 80003b0:	f001 fc60 	bl	8001c74 <SYSCFG_EXTILineConfig>

    // Configure EXTI for Button B3
    EXTI_InitTypeDef EXTI_InitStructure;
    EXTI_InitStructure.EXTI_Line = EXTI_Line4;
 80003b4:	2310      	movs	r3, #16
 80003b6:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80003b8:	2301      	movs	r3, #1
 80003ba:	73bb      	strb	r3, [r7, #14]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 80003bc:	2300      	movs	r3, #0
 80003be:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 80003c0:	230c      	movs	r3, #12
 80003c2:	737b      	strb	r3, [r7, #13]
    EXTI_Init(&EXTI_InitStructure);
 80003c4:	f107 0308 	add.w	r3, r7, #8
 80003c8:	4618      	mov	r0, r3
 80003ca:	f001 fa09 	bl	80017e0 <EXTI_Init>

    // Configure NVIC for Button B3
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = EXTI4_IRQn;
 80003ce:	230a      	movs	r3, #10
 80003d0:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80003d2:	2301      	movs	r3, #1
 80003d4:	71fb      	strb	r3, [r7, #7]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80003d6:	2300      	movs	r3, #0
 80003d8:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80003da:	2300      	movs	r3, #0
 80003dc:	71bb      	strb	r3, [r7, #6]
    NVIC_Init(&NVIC_InitStructure);
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	4618      	mov	r0, r3
 80003e2:	f001 f99b 	bl	800171c <NVIC_Init>
}
 80003e6:	bf00      	nop
 80003e8:	3718      	adds	r7, #24
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40020000 	.word	0x40020000

080003f4 <initB4ButtonInterrupt>:
 * @func   initB4ButtonInterrupt
 * @brief  Initialize Interrupt for Button B4
 * @param  None
 * @retval None
 */
static void initB4ButtonInterrupt(void) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b086      	sub	sp, #24
 80003f8:	af00      	add	r7, sp, #0
    // Enable Clock Port B
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80003fa:	2101      	movs	r1, #1
 80003fc:	2002      	movs	r0, #2
 80003fe:	f001 fbd9 	bl	8001bb4 <RCC_AHB1PeriphClockCmd>

    // Configure GPIO for Button B4
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000402:	2300      	movs	r3, #0
 8000404:	753b      	strb	r3, [r7, #20]
    GPIO_InitStructure.GPIO_Pin = BUTTON_RIGHT_B4_PIN;
 8000406:	2301      	movs	r3, #1
 8000408:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800040a:	2301      	movs	r3, #1
 800040c:	75fb      	strb	r3, [r7, #23]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800040e:	2302      	movs	r3, #2
 8000410:	757b      	strb	r3, [r7, #21]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000412:	f107 0310 	add.w	r3, r7, #16
 8000416:	4619      	mov	r1, r3
 8000418:	4814      	ldr	r0, [pc, #80]	; (800046c <initB4ButtonInterrupt+0x78>)
 800041a:	f001 fa7d 	bl	8001918 <GPIO_Init>

    // Enable Clock for Syscfg, Connect EXTI Line 0 to PB0 pin
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800041e:	2101      	movs	r1, #1
 8000420:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000424:	f001 fbe6 	bl	8001bf4 <RCC_APB2PeriphClockCmd>
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource0);
 8000428:	2100      	movs	r1, #0
 800042a:	2001      	movs	r0, #1
 800042c:	f001 fc22 	bl	8001c74 <SYSCFG_EXTILineConfig>

    // Configure EXTI for Button B4
    EXTI_InitTypeDef EXTI_InitStructure;
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
 8000430:	2301      	movs	r3, #1
 8000432:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000434:	2301      	movs	r3, #1
 8000436:	73bb      	strb	r3, [r7, #14]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000438:	2300      	movs	r3, #0
 800043a:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 800043c:	230c      	movs	r3, #12
 800043e:	737b      	strb	r3, [r7, #13]
    EXTI_Init(&EXTI_InitStructure);
 8000440:	f107 0308 	add.w	r3, r7, #8
 8000444:	4618      	mov	r0, r3
 8000446:	f001 f9cb 	bl	80017e0 <EXTI_Init>

    // Configure NVIC for Button B4
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
 800044a:	2306      	movs	r3, #6
 800044c:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800044e:	2301      	movs	r3, #1
 8000450:	71fb      	strb	r3, [r7, #7]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000452:	2300      	movs	r3, #0
 8000454:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000456:	2300      	movs	r3, #0
 8000458:	71bb      	strb	r3, [r7, #6]
    NVIC_Init(&NVIC_InitStructure);
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	4618      	mov	r0, r3
 800045e:	f001 f95d 	bl	800171c <NVIC_Init>
}
 8000462:	bf00      	nop
 8000464:	3718      	adds	r7, #24
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	40020400 	.word	0x40020400

08000470 <loadConfiguration>:
 * @func   loadConfiguration
 * @brief  Initializes the configuration for the Tetris game.
 * @param  None
 * @retval None
 */
void loadConfiguration(void) {
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af02      	add	r7, sp, #8
	ucg_DrawFrame(&ucg, 0, 0, 62, 122);					// Draw a frame for the game area
 8000476:	237a      	movs	r3, #122	; 0x7a
 8000478:	9300      	str	r3, [sp, #0]
 800047a:	233e      	movs	r3, #62	; 0x3e
 800047c:	2200      	movs	r2, #0
 800047e:	2100      	movs	r1, #0
 8000480:	480a      	ldr	r0, [pc, #40]	; (80004ac <loadConfiguration+0x3c>)
 8000482:	f002 f90e 	bl	80026a2 <ucg_DrawFrame>
	ucg_DrawString(&ucg, 65, 12, 0, "Tetris Game");		// Display the Tetris Game title
 8000486:	4b0a      	ldr	r3, [pc, #40]	; (80004b0 <loadConfiguration+0x40>)
 8000488:	9300      	str	r3, [sp, #0]
 800048a:	2300      	movs	r3, #0
 800048c:	220c      	movs	r2, #12
 800048e:	2141      	movs	r1, #65	; 0x41
 8000490:	4806      	ldr	r0, [pc, #24]	; (80004ac <loadConfiguration+0x3c>)
 8000492:	f003 f981 	bl	8003798 <ucg_DrawString>
	ucg_DrawString(&ucg, 65, 48, 0, "Score: ");			// Display the initial score
 8000496:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <loadConfiguration+0x44>)
 8000498:	9300      	str	r3, [sp, #0]
 800049a:	2300      	movs	r3, #0
 800049c:	2230      	movs	r2, #48	; 0x30
 800049e:	2141      	movs	r1, #65	; 0x41
 80004a0:	4802      	ldr	r0, [pc, #8]	; (80004ac <loadConfiguration+0x3c>)
 80004a2:	f003 f979 	bl	8003798 <ucg_DrawString>
}
 80004a6:	bf00      	nop
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	20000604 	.word	0x20000604
 80004b0:	08005ad4 	.word	0x08005ad4
 80004b4:	08005ae0 	.word	0x08005ae0

080004b8 <chooseBlock>:
 * @func   chooseBlock
 * @brief  Random Block Selection
 * @param  None
 * @retval None
 */
void chooseBlock(void) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
    int randomBlockIndex = LightSensor_MeasureUseDMAMode() % 19;
 80004be:	f001 fee3 	bl	8002288 <LightSensor_MeasureUseDMAMode>
 80004c2:	4603      	mov	r3, r0
 80004c4:	461a      	mov	r2, r3
 80004c6:	4b10      	ldr	r3, [pc, #64]	; (8000508 <chooseBlock+0x50>)
 80004c8:	fba3 1302 	umull	r1, r3, r3, r2
 80004cc:	1ad1      	subs	r1, r2, r3
 80004ce:	0849      	lsrs	r1, r1, #1
 80004d0:	440b      	add	r3, r1
 80004d2:	0919      	lsrs	r1, r3, #4
 80004d4:	460b      	mov	r3, r1
 80004d6:	00db      	lsls	r3, r3, #3
 80004d8:	440b      	add	r3, r1
 80004da:	005b      	lsls	r3, r3, #1
 80004dc:	440b      	add	r3, r1
 80004de:	1ad3      	subs	r3, r2, r3
 80004e0:	b29b      	uxth	r3, r3
 80004e2:	607b      	str	r3, [r7, #4]
    int (*randomBlock)[4] = blockTypes[randomBlockIndex];
 80004e4:	4a09      	ldr	r2, [pc, #36]	; (800050c <chooseBlock+0x54>)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ec:	603b      	str	r3, [r7, #0]
    blockIndex = randomBlockIndex;
 80004ee:	4a08      	ldr	r2, [pc, #32]	; (8000510 <chooseBlock+0x58>)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	6013      	str	r3, [r2, #0]
	// Copy the selected block to the nextBlock array
    memcpy(nextBlock, randomBlock, sizeof(nextBlock));
 80004f4:	2240      	movs	r2, #64	; 0x40
 80004f6:	6839      	ldr	r1, [r7, #0]
 80004f8:	4806      	ldr	r0, [pc, #24]	; (8000514 <chooseBlock+0x5c>)
 80004fa:	f004 fe8f 	bl	800521c <memcpy>
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	af286bcb 	.word	0xaf286bcb
 800050c:	200004dc 	.word	0x200004dc
 8000510:	20000bc8 	.word	0x20000bc8
 8000514:	20000b88 	.word	0x20000b88

08000518 <initializeCurrentBlock>:
 * @func   initializeCurrentBlock
 * @brief  Initializes the current block by choosing a new block.
 * @param  None
 * @retval None
 */
void initializeCurrentBlock(void) {
 8000518:	b5b0      	push	{r4, r5, r7, lr}
 800051a:	af00      	add	r7, sp, #0
	chooseBlock();
 800051c:	f7ff ffcc 	bl	80004b8 <chooseBlock>
	// Copy values from nextBlock to currentBlock
    memcpy(currentBlock, nextBlock, sizeof(currentBlock));
 8000520:	4a07      	ldr	r2, [pc, #28]	; (8000540 <initializeCurrentBlock+0x28>)
 8000522:	4b08      	ldr	r3, [pc, #32]	; (8000544 <initializeCurrentBlock+0x2c>)
 8000524:	4614      	mov	r4, r2
 8000526:	461d      	mov	r5, r3
 8000528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800052a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800052e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000534:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800053c:	bf00      	nop
 800053e:	bdb0      	pop	{r4, r5, r7, pc}
 8000540:	20000b48 	.word	0x20000b48
 8000544:	20000b88 	.word	0x20000b88

08000548 <drawBlockOnScreen>:
  * @param  x: X-coordinate of the block's top-left corner
 *         	y: Y-coordinate of the block's top-left corner
 *         	block: 2D array representing the block to be drawn
 * @retval None
 */
void drawBlockOnScreen(int x, int y,  int block[4][4]) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b08a      	sub	sp, #40	; 0x28
 800054c:	af02      	add	r7, sp, #8
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
	ucg_SetColor(&ucg, 0, 0, 255, 255);
 8000554:	23ff      	movs	r3, #255	; 0xff
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	23ff      	movs	r3, #255	; 0xff
 800055a:	2200      	movs	r2, #0
 800055c:	2100      	movs	r1, #0
 800055e:	4821      	ldr	r0, [pc, #132]	; (80005e4 <drawBlockOnScreen+0x9c>)
 8000560:	f003 fadc 	bl	8003b1c <ucg_SetColor>
	for(int i = 0; i < 4; i++){
 8000564:	2300      	movs	r3, #0
 8000566:	61fb      	str	r3, [r7, #28]
 8000568:	e034      	b.n	80005d4 <drawBlockOnScreen+0x8c>
		for(int j = 0; j < 4; j++) {
 800056a:	2300      	movs	r3, #0
 800056c:	61bb      	str	r3, [r7, #24]
 800056e:	e02b      	b.n	80005c8 <drawBlockOnScreen+0x80>
			if(block[i][j] == 1) {
 8000570:	69fb      	ldr	r3, [r7, #28]
 8000572:	011b      	lsls	r3, r3, #4
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	4413      	add	r3, r2
 8000578:	69ba      	ldr	r2, [r7, #24]
 800057a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d11f      	bne.n	80005c2 <drawBlockOnScreen+0x7a>
				int px = x + j*size+1;
 8000582:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <drawBlockOnScreen+0xa0>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	69ba      	ldr	r2, [r7, #24]
 8000588:	fb03 f202 	mul.w	r2, r3, r2
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4413      	add	r3, r2
 8000590:	3301      	adds	r3, #1
 8000592:	617b      	str	r3, [r7, #20]
				int py = y + i*size;
 8000594:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <drawBlockOnScreen+0xa0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	69fa      	ldr	r2, [r7, #28]
 800059a:	fb02 f303 	mul.w	r3, r2, r3
 800059e:	68ba      	ldr	r2, [r7, #8]
 80005a0:	4413      	add	r3, r2
 80005a2:	613b      	str	r3, [r7, #16]
				ucg_DrawBox(&ucg, px, py, size, size);
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	b219      	sxth	r1, r3
 80005a8:	693b      	ldr	r3, [r7, #16]
 80005aa:	b21a      	sxth	r2, r3
 80005ac:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <drawBlockOnScreen+0xa0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	b218      	sxth	r0, r3
 80005b2:	4b0d      	ldr	r3, [pc, #52]	; (80005e8 <drawBlockOnScreen+0xa0>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	b21b      	sxth	r3, r3
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	4603      	mov	r3, r0
 80005bc:	4809      	ldr	r0, [pc, #36]	; (80005e4 <drawBlockOnScreen+0x9c>)
 80005be:	f002 f81d 	bl	80025fc <ucg_DrawBox>
		for(int j = 0; j < 4; j++) {
 80005c2:	69bb      	ldr	r3, [r7, #24]
 80005c4:	3301      	adds	r3, #1
 80005c6:	61bb      	str	r3, [r7, #24]
 80005c8:	69bb      	ldr	r3, [r7, #24]
 80005ca:	2b03      	cmp	r3, #3
 80005cc:	ddd0      	ble.n	8000570 <drawBlockOnScreen+0x28>
	for(int i = 0; i < 4; i++){
 80005ce:	69fb      	ldr	r3, [r7, #28]
 80005d0:	3301      	adds	r3, #1
 80005d2:	61fb      	str	r3, [r7, #28]
 80005d4:	69fb      	ldr	r3, [r7, #28]
 80005d6:	2b03      	cmp	r3, #3
 80005d8:	ddc7      	ble.n	800056a <drawBlockOnScreen+0x22>
			}
		}
	}
}
 80005da:	bf00      	nop
 80005dc:	bf00      	nop
 80005de:	3720      	adds	r7, #32
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20000604 	.word	0x20000604
 80005e8:	20000008 	.word	0x20000008

080005ec <eraseBlockOnScreen>:
 * @param  x: X-coordinate of the block's top-left corner
 *         y: Y-coordinate of the block's top-left corner
 *         block: 2D array representing the block to be erased
 * @retval None
 */
void eraseBlockOnScreen(int x, int y, int block[4][4]) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	; 0x28
 80005f0:	af02      	add	r7, sp, #8
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
	ucg_SetColor(&ucg, 0, 0, 0, 0);
 80005f8:	2300      	movs	r3, #0
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2300      	movs	r3, #0
 80005fe:	2200      	movs	r2, #0
 8000600:	2100      	movs	r1, #0
 8000602:	4821      	ldr	r0, [pc, #132]	; (8000688 <eraseBlockOnScreen+0x9c>)
 8000604:	f003 fa8a 	bl	8003b1c <ucg_SetColor>
	for(int i = 0; i < 4; i++){
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
 800060c:	e034      	b.n	8000678 <eraseBlockOnScreen+0x8c>
		for(int j = 0; j < 4; j++) {
 800060e:	2300      	movs	r3, #0
 8000610:	61bb      	str	r3, [r7, #24]
 8000612:	e02b      	b.n	800066c <eraseBlockOnScreen+0x80>
			if(block[i][j] == 1) {
 8000614:	69fb      	ldr	r3, [r7, #28]
 8000616:	011b      	lsls	r3, r3, #4
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	4413      	add	r3, r2
 800061c:	69ba      	ldr	r2, [r7, #24]
 800061e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d11f      	bne.n	8000666 <eraseBlockOnScreen+0x7a>
				int px = x + j*size+1;
 8000626:	4b19      	ldr	r3, [pc, #100]	; (800068c <eraseBlockOnScreen+0xa0>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	69ba      	ldr	r2, [r7, #24]
 800062c:	fb03 f202 	mul.w	r2, r3, r2
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	4413      	add	r3, r2
 8000634:	3301      	adds	r3, #1
 8000636:	617b      	str	r3, [r7, #20]
				int py = y + i*size;
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <eraseBlockOnScreen+0xa0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	69fa      	ldr	r2, [r7, #28]
 800063e:	fb02 f303 	mul.w	r3, r2, r3
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	4413      	add	r3, r2
 8000646:	613b      	str	r3, [r7, #16]
				ucg_DrawBox(&ucg, px, py, size, size);
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	b219      	sxth	r1, r3
 800064c:	693b      	ldr	r3, [r7, #16]
 800064e:	b21a      	sxth	r2, r3
 8000650:	4b0e      	ldr	r3, [pc, #56]	; (800068c <eraseBlockOnScreen+0xa0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	b218      	sxth	r0, r3
 8000656:	4b0d      	ldr	r3, [pc, #52]	; (800068c <eraseBlockOnScreen+0xa0>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	b21b      	sxth	r3, r3
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	4603      	mov	r3, r0
 8000660:	4809      	ldr	r0, [pc, #36]	; (8000688 <eraseBlockOnScreen+0x9c>)
 8000662:	f001 ffcb 	bl	80025fc <ucg_DrawBox>
		for(int j = 0; j < 4; j++) {
 8000666:	69bb      	ldr	r3, [r7, #24]
 8000668:	3301      	adds	r3, #1
 800066a:	61bb      	str	r3, [r7, #24]
 800066c:	69bb      	ldr	r3, [r7, #24]
 800066e:	2b03      	cmp	r3, #3
 8000670:	ddd0      	ble.n	8000614 <eraseBlockOnScreen+0x28>
	for(int i = 0; i < 4; i++){
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	3301      	adds	r3, #1
 8000676:	61fb      	str	r3, [r7, #28]
 8000678:	69fb      	ldr	r3, [r7, #28]
 800067a:	2b03      	cmp	r3, #3
 800067c:	ddc7      	ble.n	800060e <eraseBlockOnScreen+0x22>
			}
		}
	}
}
 800067e:	bf00      	nop
 8000680:	bf00      	nop
 8000682:	3720      	adds	r7, #32
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000604 	.word	0x20000604
 800068c:	20000008 	.word	0x20000008

08000690 <checkForCollisions>:
 * @param  x: X-coordinate of the block's top-left corner
 *         y: Y-coordinate of the block's top-left corner
 *         block: 2D array representing the block
 * @retval 1 if there is a collision, 0 otherwise
 */
int checkForCollisions(int x, int y, int block[4][4]) {
 8000690:	b480      	push	{r7}
 8000692:	b089      	sub	sp, #36	; 0x24
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < 4; i++) {
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
 80006a0:	e04a      	b.n	8000738 <checkForCollisions+0xa8>
		for(int j = 0; j < 4; j++) {
 80006a2:	2300      	movs	r3, #0
 80006a4:	61bb      	str	r3, [r7, #24]
 80006a6:	e041      	b.n	800072c <checkForCollisions+0x9c>
			if(block[i][j] == 1){
 80006a8:	69fb      	ldr	r3, [r7, #28]
 80006aa:	011b      	lsls	r3, r3, #4
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	4413      	add	r3, r2
 80006b0:	69ba      	ldr	r2, [r7, #24]
 80006b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d135      	bne.n	8000726 <checkForCollisions+0x96>
				int px = x + j*size;
 80006ba:	4b24      	ldr	r3, [pc, #144]	; (800074c <checkForCollisions+0xbc>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	69ba      	ldr	r2, [r7, #24]
 80006c0:	fb02 f303 	mul.w	r3, r2, r3
 80006c4:	68fa      	ldr	r2, [r7, #12]
 80006c6:	4413      	add	r3, r2
 80006c8:	617b      	str	r3, [r7, #20]
				int py = y + i*size;
 80006ca:	4b20      	ldr	r3, [pc, #128]	; (800074c <checkForCollisions+0xbc>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	69fa      	ldr	r2, [r7, #28]
 80006d0:	fb02 f303 	mul.w	r3, r2, r3
 80006d4:	68ba      	ldr	r2, [r7, #8]
 80006d6:	4413      	add	r3, r2
 80006d8:	613b      	str	r3, [r7, #16]
				// Check for collision with screen boundaries
                if (py >= SCREEN_HEIGHT * size) return 1;
 80006da:	4b1c      	ldr	r3, [pc, #112]	; (800074c <checkForCollisions+0xbc>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	4613      	mov	r3, r2
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	4413      	add	r3, r2
 80006e4:	00db      	lsls	r3, r3, #3
 80006e6:	461a      	mov	r2, r3
 80006e8:	693b      	ldr	r3, [r7, #16]
 80006ea:	4293      	cmp	r3, r2
 80006ec:	db01      	blt.n	80006f2 <checkForCollisions+0x62>
 80006ee:	2301      	movs	r3, #1
 80006f0:	e026      	b.n	8000740 <checkForCollisions+0xb0>

                // Check for collision with existing elements on the screen
                if (screen[py / 5][px / 5] == 1) return 1;
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	4a16      	ldr	r2, [pc, #88]	; (8000750 <checkForCollisions+0xc0>)
 80006f6:	fb82 1203 	smull	r1, r2, r2, r3
 80006fa:	1052      	asrs	r2, r2, #1
 80006fc:	17db      	asrs	r3, r3, #31
 80006fe:	1ad2      	subs	r2, r2, r3
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	4913      	ldr	r1, [pc, #76]	; (8000750 <checkForCollisions+0xc0>)
 8000704:	fb81 0103 	smull	r0, r1, r1, r3
 8000708:	1049      	asrs	r1, r1, #1
 800070a:	17db      	asrs	r3, r3, #31
 800070c:	1ac9      	subs	r1, r1, r3
 800070e:	4811      	ldr	r0, [pc, #68]	; (8000754 <checkForCollisions+0xc4>)
 8000710:	4613      	mov	r3, r2
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	4413      	add	r3, r2
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	440b      	add	r3, r1
 800071a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d101      	bne.n	8000726 <checkForCollisions+0x96>
 8000722:	2301      	movs	r3, #1
 8000724:	e00c      	b.n	8000740 <checkForCollisions+0xb0>
		for(int j = 0; j < 4; j++) {
 8000726:	69bb      	ldr	r3, [r7, #24]
 8000728:	3301      	adds	r3, #1
 800072a:	61bb      	str	r3, [r7, #24]
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	2b03      	cmp	r3, #3
 8000730:	ddba      	ble.n	80006a8 <checkForCollisions+0x18>
	for(int i = 0; i < 4; i++) {
 8000732:	69fb      	ldr	r3, [r7, #28]
 8000734:	3301      	adds	r3, #1
 8000736:	61fb      	str	r3, [r7, #28]
 8000738:	69fb      	ldr	r3, [r7, #28]
 800073a:	2b03      	cmp	r3, #3
 800073c:	ddb1      	ble.n	80006a2 <checkForCollisions+0x12>
			}
		}
	}
	return 0; // No collision
 800073e:	2300      	movs	r3, #0
}
 8000740:	4618      	mov	r0, r3
 8000742:	3724      	adds	r7, #36	; 0x24
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	20000008 	.word	0x20000008
 8000750:	66666667 	.word	0x66666667
 8000754:	200006bc 	.word	0x200006bc

08000758 <fixBlockOnScreen>:
 * @param  x: X-coordinate of the block's top-left corner
 *         y: Y-coordinate of the block's top-left corner
 *         block: 2D array representing the block
 * @retval None
 */
void fixBlockOnScreen(int x, int y, int block[4][4]) {
 8000758:	b480      	push	{r7}
 800075a:	b089      	sub	sp, #36	; 0x24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < 4; i++) {
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]
 8000768:	e03b      	b.n	80007e2 <fixBlockOnScreen+0x8a>
		for(int j = 0; j < 4; j++) {
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
 800076e:	e032      	b.n	80007d6 <fixBlockOnScreen+0x7e>
			if(block[i][j] == 1){
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	011b      	lsls	r3, r3, #4
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	4413      	add	r3, r2
 8000778:	69ba      	ldr	r2, [r7, #24]
 800077a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d126      	bne.n	80007d0 <fixBlockOnScreen+0x78>
				int px = x + j*size;
 8000782:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <fixBlockOnScreen+0xa0>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	69ba      	ldr	r2, [r7, #24]
 8000788:	fb02 f303 	mul.w	r3, r2, r3
 800078c:	68fa      	ldr	r2, [r7, #12]
 800078e:	4413      	add	r3, r2
 8000790:	617b      	str	r3, [r7, #20]
				int py = y + i*size;
 8000792:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <fixBlockOnScreen+0xa0>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	69fa      	ldr	r2, [r7, #28]
 8000798:	fb02 f303 	mul.w	r3, r2, r3
 800079c:	68ba      	ldr	r2, [r7, #8]
 800079e:	4413      	add	r3, r2
 80007a0:	613b      	str	r3, [r7, #16]
				screen[py/5][px/5] = 1;
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	4a15      	ldr	r2, [pc, #84]	; (80007fc <fixBlockOnScreen+0xa4>)
 80007a6:	fb82 1203 	smull	r1, r2, r2, r3
 80007aa:	1052      	asrs	r2, r2, #1
 80007ac:	17db      	asrs	r3, r3, #31
 80007ae:	1ad2      	subs	r2, r2, r3
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	4912      	ldr	r1, [pc, #72]	; (80007fc <fixBlockOnScreen+0xa4>)
 80007b4:	fb81 0103 	smull	r0, r1, r1, r3
 80007b8:	1049      	asrs	r1, r1, #1
 80007ba:	17db      	asrs	r3, r3, #31
 80007bc:	1ac9      	subs	r1, r1, r3
 80007be:	4810      	ldr	r0, [pc, #64]	; (8000800 <fixBlockOnScreen+0xa8>)
 80007c0:	4613      	mov	r3, r2
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	4413      	add	r3, r2
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	440b      	add	r3, r1
 80007ca:	2201      	movs	r2, #1
 80007cc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for(int j = 0; j < 4; j++) {
 80007d0:	69bb      	ldr	r3, [r7, #24]
 80007d2:	3301      	adds	r3, #1
 80007d4:	61bb      	str	r3, [r7, #24]
 80007d6:	69bb      	ldr	r3, [r7, #24]
 80007d8:	2b03      	cmp	r3, #3
 80007da:	ddc9      	ble.n	8000770 <fixBlockOnScreen+0x18>
	for(int i = 0; i < 4; i++) {
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	3301      	adds	r3, #1
 80007e0:	61fb      	str	r3, [r7, #28]
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	2b03      	cmp	r3, #3
 80007e6:	ddc0      	ble.n	800076a <fixBlockOnScreen+0x12>
			}
		}
	}
}
 80007e8:	bf00      	nop
 80007ea:	bf00      	nop
 80007ec:	3724      	adds	r7, #36	; 0x24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	20000008 	.word	0x20000008
 80007fc:	66666667 	.word	0x66666667
 8000800:	200006bc 	.word	0x200006bc

08000804 <updateScore>:
 * @func   updateScore
 * @brief  Update the displayed score on the graphical screen.
 * @param  None
 * @retval None
 */
void updateScore(){
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af02      	add	r7, sp, #8
	ucg_SetColor(&ucg, 0, 255, 0, 0);
 800080a:	2300      	movs	r3, #0
 800080c:	9300      	str	r3, [sp, #0]
 800080e:	2300      	movs	r3, #0
 8000810:	22ff      	movs	r2, #255	; 0xff
 8000812:	2100      	movs	r1, #0
 8000814:	480c      	ldr	r0, [pc, #48]	; (8000848 <updateScore+0x44>)
 8000816:	f003 f981 	bl	8003b1c <ucg_SetColor>
	memset(str1,0,sizeof(str1));
 800081a:	220a      	movs	r2, #10
 800081c:	2100      	movs	r1, #0
 800081e:	480b      	ldr	r0, [pc, #44]	; (800084c <updateScore+0x48>)
 8000820:	f004 fcc8 	bl	80051b4 <memset>
	sprintf(str1,"Score: %d",score);
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <updateScore+0x4c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	461a      	mov	r2, r3
 800082a:	490a      	ldr	r1, [pc, #40]	; (8000854 <updateScore+0x50>)
 800082c:	4807      	ldr	r0, [pc, #28]	; (800084c <updateScore+0x48>)
 800082e:	f004 fca1 	bl	8005174 <siprintf>
	ucg_DrawString(&ucg, 65, 48, 0, str1);
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <updateScore+0x48>)
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	2300      	movs	r3, #0
 8000838:	2230      	movs	r2, #48	; 0x30
 800083a:	2141      	movs	r1, #65	; 0x41
 800083c:	4802      	ldr	r0, [pc, #8]	; (8000848 <updateScore+0x44>)
 800083e:	f002 ffab 	bl	8003798 <ucg_DrawString>
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000604 	.word	0x20000604
 800084c:	20000b3c 	.word	0x20000b3c
 8000850:	20000bcc 	.word	0x20000bcc
 8000854:	08005ae8 	.word	0x08005ae8

08000858 <handleFullRows>:
 * @func   handleFullRows
 * @brief  Handle full rows in the game screen by updating the score and adjusting the screen.
 * @param  None
 * @retval None
 */
void handleFullRows(){
 8000858:	b580      	push	{r7, lr}
 800085a:	b090      	sub	sp, #64	; 0x40
 800085c:	af02      	add	r7, sp, #8
	ucg_SetColor(&ucg, 0, 0, 0, 0);
 800085e:	2300      	movs	r3, #0
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	2300      	movs	r3, #0
 8000864:	2200      	movs	r2, #0
 8000866:	2100      	movs	r1, #0
 8000868:	488d      	ldr	r0, [pc, #564]	; (8000aa0 <handleFullRows+0x248>)
 800086a:	f003 f957 	bl	8003b1c <ucg_SetColor>

	for(int i = 0; i < SCREEN_HEIGHT; i++){
 800086e:	2300      	movs	r3, #0
 8000870:	637b      	str	r3, [r7, #52]	; 0x34
 8000872:	e10b      	b.n	8000a8c <handleFullRows+0x234>

		for(int j = 0; j < SCREEN_WIDTH; j++){
 8000874:	2300      	movs	r3, #0
 8000876:	633b      	str	r3, [r7, #48]	; 0x30
 8000878:	e101      	b.n	8000a7e <handleFullRows+0x226>
			if(screen[i][j] == 1){
 800087a:	498a      	ldr	r1, [pc, #552]	; (8000aa4 <handleFullRows+0x24c>)
 800087c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800087e:	4613      	mov	r3, r2
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	4413      	add	r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000888:	4413      	add	r3, r2
 800088a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800088e:	2b01      	cmp	r3, #1
 8000890:	f040 80ee 	bne.w	8000a70 <handleFullRows+0x218>
				checkRow++;
 8000894:	4b84      	ldr	r3, [pc, #528]	; (8000aa8 <handleFullRows+0x250>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	3301      	adds	r3, #1
 800089a:	4a83      	ldr	r2, [pc, #524]	; (8000aa8 <handleFullRows+0x250>)
 800089c:	6013      	str	r3, [r2, #0]

				if(checkRow == SCREEN_WIDTH){
 800089e:	4b82      	ldr	r3, [pc, #520]	; (8000aa8 <handleFullRows+0x250>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b0c      	cmp	r3, #12
 80008a4:	f040 80e8 	bne.w	8000a78 <handleFullRows+0x220>
					// Update score
					score+=5;
 80008a8:	4b80      	ldr	r3, [pc, #512]	; (8000aac <handleFullRows+0x254>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	3305      	adds	r3, #5
 80008ae:	4a7f      	ldr	r2, [pc, #508]	; (8000aac <handleFullRows+0x254>)
 80008b0:	6013      	str	r3, [r2, #0]
					// Erase the full row
					ucg_SetColor(&ucg, 0, 0, 0, 0);
 80008b2:	2300      	movs	r3, #0
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	2300      	movs	r3, #0
 80008b8:	2200      	movs	r2, #0
 80008ba:	2100      	movs	r1, #0
 80008bc:	4878      	ldr	r0, [pc, #480]	; (8000aa0 <handleFullRows+0x248>)
 80008be:	f003 f92d 	bl	8003b1c <ucg_SetColor>
					ucg_DrawBox(&ucg,1,i*5+1,SCREEN_WIDTH*5,5);
 80008c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	461a      	mov	r2, r3
 80008c8:	0092      	lsls	r2, r2, #2
 80008ca:	4413      	add	r3, r2
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	3301      	adds	r3, #1
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	b21a      	sxth	r2, r3
 80008d4:	2305      	movs	r3, #5
 80008d6:	9300      	str	r3, [sp, #0]
 80008d8:	233c      	movs	r3, #60	; 0x3c
 80008da:	2101      	movs	r1, #1
 80008dc:	4870      	ldr	r0, [pc, #448]	; (8000aa0 <handleFullRows+0x248>)
 80008de:	f001 fe8d 	bl	80025fc <ucg_DrawBox>
					// Clear the full row in the screen array
					for(int k = 0; k<SCREEN_WIDTH; k++){
 80008e2:	2300      	movs	r3, #0
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008e6:	e00d      	b.n	8000904 <handleFullRows+0xac>
						screen[i][k] = 0;
 80008e8:	496e      	ldr	r1, [pc, #440]	; (8000aa4 <handleFullRows+0x24c>)
 80008ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008ec:	4613      	mov	r3, r2
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	4413      	add	r3, r2
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008f6:	4413      	add	r3, r2
 80008f8:	2200      	movs	r2, #0
 80008fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					for(int k = 0; k<SCREEN_WIDTH; k++){
 80008fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000900:	3301      	adds	r3, #1
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000906:	2b0b      	cmp	r3, #11
 8000908:	ddee      	ble.n	80008e8 <handleFullRows+0x90>
					}

					// Draw the remaining blocks above the cleared row
					ucg_SetColor(&ucg, 0, 0, 0, 0);
 800090a:	2300      	movs	r3, #0
 800090c:	9300      	str	r3, [sp, #0]
 800090e:	2300      	movs	r3, #0
 8000910:	2200      	movs	r2, #0
 8000912:	2100      	movs	r1, #0
 8000914:	4862      	ldr	r0, [pc, #392]	; (8000aa0 <handleFullRows+0x248>)
 8000916:	f003 f901 	bl	8003b1c <ucg_SetColor>
					for(int ii = 4; ii <= i; ii++){
 800091a:	2304      	movs	r3, #4
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
 800091e:	e034      	b.n	800098a <handleFullRows+0x132>
						for(int jj = 0; jj < SCREEN_WIDTH; jj++) {
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
 8000924:	e02b      	b.n	800097e <handleFullRows+0x126>
							if(screen[ii][jj] == 1) {
 8000926:	495f      	ldr	r1, [pc, #380]	; (8000aa4 <handleFullRows+0x24c>)
 8000928:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800092a:	4613      	mov	r3, r2
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	4413      	add	r3, r2
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000934:	4413      	add	r3, r2
 8000936:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d11c      	bne.n	8000978 <handleFullRows+0x120>
								int px =  jj*size+1;
 800093e:	4b5c      	ldr	r3, [pc, #368]	; (8000ab0 <handleFullRows+0x258>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000944:	fb02 f303 	mul.w	r3, r2, r3
 8000948:	3301      	adds	r3, #1
 800094a:	60bb      	str	r3, [r7, #8]
								int py =  ii*size+1;
 800094c:	4b58      	ldr	r3, [pc, #352]	; (8000ab0 <handleFullRows+0x258>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000952:	fb02 f303 	mul.w	r3, r2, r3
 8000956:	3301      	adds	r3, #1
 8000958:	607b      	str	r3, [r7, #4]
								ucg_DrawBox(&ucg, px, py, size, size);
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	b219      	sxth	r1, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	b21a      	sxth	r2, r3
 8000962:	4b53      	ldr	r3, [pc, #332]	; (8000ab0 <handleFullRows+0x258>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	b218      	sxth	r0, r3
 8000968:	4b51      	ldr	r3, [pc, #324]	; (8000ab0 <handleFullRows+0x258>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	b21b      	sxth	r3, r3
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	4603      	mov	r3, r0
 8000972:	484b      	ldr	r0, [pc, #300]	; (8000aa0 <handleFullRows+0x248>)
 8000974:	f001 fe42 	bl	80025fc <ucg_DrawBox>
						for(int jj = 0; jj < SCREEN_WIDTH; jj++) {
 8000978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097a:	3301      	adds	r3, #1
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
 800097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000980:	2b0b      	cmp	r3, #11
 8000982:	ddd0      	ble.n	8000926 <handleFullRows+0xce>
					for(int ii = 4; ii <= i; ii++){
 8000984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000986:	3301      	adds	r3, #1
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
 800098a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800098c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800098e:	429a      	cmp	r2, r3
 8000990:	ddc6      	ble.n	8000920 <handleFullRows+0xc8>
							}
						}
					}

					// Shift the blocks above the clears row down
					for(int new_height = i; new_height >= 5; new_height--){
 8000992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000994:	623b      	str	r3, [r7, #32]
 8000996:	e020      	b.n	80009da <handleFullRows+0x182>
						for(int new_width = SCREEN_WIDTH - 1; new_width >= 0; new_width--){
 8000998:	230b      	movs	r3, #11
 800099a:	61fb      	str	r3, [r7, #28]
 800099c:	e017      	b.n	80009ce <handleFullRows+0x176>
							screen[new_height][new_width] = screen[new_height - 1][new_width];//neu day man hinh thi code nay sai}
 800099e:	6a3b      	ldr	r3, [r7, #32]
 80009a0:	1e5a      	subs	r2, r3, #1
 80009a2:	4940      	ldr	r1, [pc, #256]	; (8000aa4 <handleFullRows+0x24c>)
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	69fa      	ldr	r2, [r7, #28]
 80009ae:	4413      	add	r3, r2
 80009b0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80009b4:	483b      	ldr	r0, [pc, #236]	; (8000aa4 <handleFullRows+0x24c>)
 80009b6:	6a3a      	ldr	r2, [r7, #32]
 80009b8:	4613      	mov	r3, r2
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	4413      	add	r3, r2
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	69fa      	ldr	r2, [r7, #28]
 80009c2:	4413      	add	r3, r2
 80009c4:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
						for(int new_width = SCREEN_WIDTH - 1; new_width >= 0; new_width--){
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	61fb      	str	r3, [r7, #28]
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	dae4      	bge.n	800099e <handleFullRows+0x146>
					for(int new_height = i; new_height >= 5; new_height--){
 80009d4:	6a3b      	ldr	r3, [r7, #32]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	623b      	str	r3, [r7, #32]
 80009da:	6a3b      	ldr	r3, [r7, #32]
 80009dc:	2b04      	cmp	r3, #4
 80009de:	dcdb      	bgt.n	8000998 <handleFullRows+0x140>
						}
					}

					// Redraw the shifted blocks
					ucg_SetColor(&ucg,0,0,255,255);
 80009e0:	23ff      	movs	r3, #255	; 0xff
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	23ff      	movs	r3, #255	; 0xff
 80009e6:	2200      	movs	r2, #0
 80009e8:	2100      	movs	r1, #0
 80009ea:	482d      	ldr	r0, [pc, #180]	; (8000aa0 <handleFullRows+0x248>)
 80009ec:	f003 f896 	bl	8003b1c <ucg_SetColor>
					for(int ii = 4; ii <= i; ii++){
 80009f0:	2304      	movs	r3, #4
 80009f2:	61bb      	str	r3, [r7, #24]
 80009f4:	e034      	b.n	8000a60 <handleFullRows+0x208>
						for(int jj = 0; jj < SCREEN_WIDTH; jj++) {
 80009f6:	2300      	movs	r3, #0
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	e02b      	b.n	8000a54 <handleFullRows+0x1fc>
							if(screen[ii][jj] == 1) {
 80009fc:	4929      	ldr	r1, [pc, #164]	; (8000aa4 <handleFullRows+0x24c>)
 80009fe:	69ba      	ldr	r2, [r7, #24]
 8000a00:	4613      	mov	r3, r2
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	4413      	add	r3, r2
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	697a      	ldr	r2, [r7, #20]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d11c      	bne.n	8000a4e <handleFullRows+0x1f6>
								int px =  jj*size+1;
 8000a14:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <handleFullRows+0x258>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	697a      	ldr	r2, [r7, #20]
 8000a1a:	fb02 f303 	mul.w	r3, r2, r3
 8000a1e:	3301      	adds	r3, #1
 8000a20:	613b      	str	r3, [r7, #16]
								int py =  ii*size+1;
 8000a22:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <handleFullRows+0x258>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	69ba      	ldr	r2, [r7, #24]
 8000a28:	fb02 f303 	mul.w	r3, r2, r3
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
								ucg_DrawBox(&ucg, px, py, size, size);
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	b219      	sxth	r1, r3
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	b21a      	sxth	r2, r3
 8000a38:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <handleFullRows+0x258>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	b218      	sxth	r0, r3
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <handleFullRows+0x258>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	b21b      	sxth	r3, r3
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	4603      	mov	r3, r0
 8000a48:	4815      	ldr	r0, [pc, #84]	; (8000aa0 <handleFullRows+0x248>)
 8000a4a:	f001 fdd7 	bl	80025fc <ucg_DrawBox>
						for(int jj = 0; jj < SCREEN_WIDTH; jj++) {
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	3301      	adds	r3, #1
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	2b0b      	cmp	r3, #11
 8000a58:	ddd0      	ble.n	80009fc <handleFullRows+0x1a4>
					for(int ii = 4; ii <= i; ii++){
 8000a5a:	69bb      	ldr	r3, [r7, #24]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	61bb      	str	r3, [r7, #24]
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a64:	429a      	cmp	r2, r3
 8000a66:	ddc6      	ble.n	80009f6 <handleFullRows+0x19e>
							}
						}
					}

					checkRow = 0;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <handleFullRows+0x250>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	e003      	b.n	8000a78 <handleFullRows+0x220>
				}
			}
			else{
				checkRow = 0;
 8000a70:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <handleFullRows+0x250>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
				break;
 8000a76:	e006      	b.n	8000a86 <handleFullRows+0x22e>
		for(int j = 0; j < SCREEN_WIDTH; j++){
 8000a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	633b      	str	r3, [r7, #48]	; 0x30
 8000a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a80:	2b0b      	cmp	r3, #11
 8000a82:	f77f aefa 	ble.w	800087a <handleFullRows+0x22>
	for(int i = 0; i < SCREEN_HEIGHT; i++){
 8000a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a88:	3301      	adds	r3, #1
 8000a8a:	637b      	str	r3, [r7, #52]	; 0x34
 8000a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a8e:	2b17      	cmp	r3, #23
 8000a90:	f77f aef0 	ble.w	8000874 <handleFullRows+0x1c>
			}
		}
	}
}
 8000a94:	bf00      	nop
 8000a96:	bf00      	nop
 8000a98:	3738      	adds	r7, #56	; 0x38
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000604 	.word	0x20000604
 8000aa4:	200006bc 	.word	0x200006bc
 8000aa8:	200006b8 	.word	0x200006b8
 8000aac:	20000bcc 	.word	0x20000bcc
 8000ab0:	20000008 	.word	0x20000008

08000ab4 <checkForGameOver>:
 * @func   checkForGameOver
 * @brief  Check if the first row of the game screen has any block; if true, handle "Game Over".
 * @param  None
 * @retval None
 */
void checkForGameOver(){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af02      	add	r7, sp, #8
	for(int i = 0 ; i < SCREEN_WIDTH;i++){
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	e01e      	b.n	8000afe <checkForGameOver+0x4a>
		if(screen[0][i] == 1){
 8000ac0:	4a13      	ldr	r2, [pc, #76]	; (8000b10 <checkForGameOver+0x5c>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d115      	bne.n	8000af8 <checkForGameOver+0x44>
			ucg_SetColor(&ucg, 0, 255, 0, 0);
 8000acc:	2300      	movs	r3, #0
 8000ace:	9300      	str	r3, [sp, #0]
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	22ff      	movs	r2, #255	; 0xff
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	480f      	ldr	r0, [pc, #60]	; (8000b14 <checkForGameOver+0x60>)
 8000ad8:	f003 f820 	bl	8003b1c <ucg_SetColor>
			ucg_DrawString(&ucg, 4 ,60, 0, "Game Over");
 8000adc:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <checkForGameOver+0x64>)
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	223c      	movs	r2, #60	; 0x3c
 8000ae4:	2104      	movs	r1, #4
 8000ae6:	480b      	ldr	r0, [pc, #44]	; (8000b14 <checkForGameOver+0x60>)
 8000ae8:	f002 fe56 	bl	8003798 <ucg_DrawString>
			TimerStop(idTimer);
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <checkForGameOver+0x68>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 f9d0 	bl	8001e98 <TimerStop>
	for(int i = 0 ; i < SCREEN_WIDTH;i++){
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3301      	adds	r3, #1
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2b0b      	cmp	r3, #11
 8000b02:	dddd      	ble.n	8000ac0 <checkForGameOver+0xc>
		}
	}
}
 8000b04:	bf00      	nop
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200006bc 	.word	0x200006bc
 8000b14:	20000604 	.word	0x20000604
 8000b18:	08005af4 	.word	0x08005af4
 8000b1c:	20000004 	.word	0x20000004

08000b20 <handleFallingBlock>:
 * @func   handleFallingBlock
 * @brief  Handle the falling and placement of a block in the game, including collision detection and game state updates.
 * @param  block: 2D array representing the falling block
 * @retval None
 */
void handleFallingBlock(int block[4][4]){
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	drawBlockOnScreen(currentX, currentY, block);
 8000b28:	4b46      	ldr	r3, [pc, #280]	; (8000c44 <handleFallingBlock+0x124>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a46      	ldr	r2, [pc, #280]	; (8000c48 <handleFallingBlock+0x128>)
 8000b2e:	6811      	ldr	r1, [r2, #0]
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fd08 	bl	8000548 <drawBlockOnScreen>
	handleFullRows();
 8000b38:	f7ff fe8e 	bl	8000858 <handleFullRows>
	// Check for collisions with the block below
	if(!checkForCollisions(currentX, currentY + size, block)) {
 8000b3c:	4b41      	ldr	r3, [pc, #260]	; (8000c44 <handleFallingBlock+0x124>)
 8000b3e:	6818      	ldr	r0, [r3, #0]
 8000b40:	4b41      	ldr	r3, [pc, #260]	; (8000c48 <handleFallingBlock+0x128>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b41      	ldr	r3, [pc, #260]	; (8000c4c <handleFallingBlock+0x12c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4413      	add	r3, r2
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f7ff fd9f 	bl	8000690 <checkForCollisions>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d10f      	bne.n	8000b78 <handleFallingBlock+0x58>
		// If no collision, erase the block and move it down
		eraseBlockOnScreen(currentX, currentY, block);
 8000b58:	4b3a      	ldr	r3, [pc, #232]	; (8000c44 <handleFallingBlock+0x124>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a3a      	ldr	r2, [pc, #232]	; (8000c48 <handleFallingBlock+0x128>)
 8000b5e:	6811      	ldr	r1, [r2, #0]
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fd42 	bl	80005ec <eraseBlockOnScreen>
		currentY += size;
 8000b68:	4b37      	ldr	r3, [pc, #220]	; (8000c48 <handleFallingBlock+0x128>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b37      	ldr	r3, [pc, #220]	; (8000c4c <handleFallingBlock+0x12c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4413      	add	r3, r2
 8000b72:	4a35      	ldr	r2, [pc, #212]	; (8000c48 <handleFallingBlock+0x128>)
 8000b74:	6013      	str	r3, [r2, #0]
 8000b76:	e036      	b.n	8000be6 <handleFallingBlock+0xc6>
	}
	else {
		// If collision, fix the block on the screen, reset position, choose a new block
		fixBlockOnScreen(currentX, currentY, block);
 8000b78:	4b32      	ldr	r3, [pc, #200]	; (8000c44 <handleFallingBlock+0x124>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a32      	ldr	r2, [pc, #200]	; (8000c48 <handleFallingBlock+0x128>)
 8000b7e:	6811      	ldr	r1, [r2, #0]
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fde8 	bl	8000758 <fixBlockOnScreen>
		currentX = 25;
 8000b88:	4b2e      	ldr	r3, [pc, #184]	; (8000c44 <handleFallingBlock+0x124>)
 8000b8a:	2219      	movs	r2, #25
 8000b8c:	601a      	str	r2, [r3, #0]
		currentY = -9;
 8000b8e:	4b2e      	ldr	r3, [pc, #184]	; (8000c48 <handleFallingBlock+0x128>)
 8000b90:	f06f 0208 	mvn.w	r2, #8
 8000b94:	601a      	str	r2, [r3, #0]
		x_axis = currentX;
 8000b96:	4b2b      	ldr	r3, [pc, #172]	; (8000c44 <handleFallingBlock+0x124>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a2d      	ldr	r2, [pc, #180]	; (8000c50 <handleFallingBlock+0x130>)
 8000b9c:	6013      	str	r3, [r2, #0]
		chooseBlock();
 8000b9e:	f7ff fc8b 	bl	80004b8 <chooseBlock>
	    for (int i = 0; i < 4; i++) {
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	e019      	b.n	8000bdc <handleFallingBlock+0xbc>
	        for (int j = 0; j < 4; j++) {
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	e010      	b.n	8000bd0 <handleFallingBlock+0xb0>
	            currentBlock[i][j] = nextBlock[i][j];
 8000bae:	4929      	ldr	r1, [pc, #164]	; (8000c54 <handleFallingBlock+0x134>)
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	009a      	lsls	r2, r3, #2
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000bbc:	4826      	ldr	r0, [pc, #152]	; (8000c58 <handleFallingBlock+0x138>)
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	0099      	lsls	r1, r3, #2
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	440b      	add	r3, r1
 8000bc6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	        for (int j = 0; j < 4; j++) {
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	2b03      	cmp	r3, #3
 8000bd4:	ddeb      	ble.n	8000bae <handleFallingBlock+0x8e>
	    for (int i = 0; i < 4; i++) {
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	2b03      	cmp	r3, #3
 8000be0:	dde2      	ble.n	8000ba8 <handleFallingBlock+0x88>
	        }
	    }
		// Check for game over
		checkForGameOver();
 8000be2:	f7ff ff67 	bl	8000ab4 <checkForGameOver>
	}
	// Update the minx and maxx values based on block width and position
	minx = (CalculateBlockMaxWidth(block, x_axis) - calculateBlockWidth(block))*size;
 8000be6:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <handleFallingBlock+0x130>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4619      	mov	r1, r3
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f000 f85f 	bl	8000cb0 <CalculateBlockMaxWidth>
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f000 f895 	bl	8000d24 <calculateBlockWidth>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	1ae3      	subs	r3, r4, r3
 8000bfe:	4a13      	ldr	r2, [pc, #76]	; (8000c4c <handleFallingBlock+0x12c>)
 8000c00:	6812      	ldr	r2, [r2, #0]
 8000c02:	fb02 f303 	mul.w	r3, r2, r3
 8000c06:	4a15      	ldr	r2, [pc, #84]	; (8000c5c <handleFallingBlock+0x13c>)
 8000c08:	6013      	str	r3, [r2, #0]
	maxx = CalculateBlockMaxWidth(block, x_axis)*size;
 8000c0a:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <handleFallingBlock+0x130>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4619      	mov	r1, r3
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f000 f84d 	bl	8000cb0 <CalculateBlockMaxWidth>
 8000c16:	4602      	mov	r2, r0
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <handleFallingBlock+0x12c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	fb02 f303 	mul.w	r3, r2, r3
 8000c20:	4a0f      	ldr	r2, [pc, #60]	; (8000c60 <handleFallingBlock+0x140>)
 8000c22:	6013      	str	r3, [r2, #0]
	// Update the currentX position if it changed
	if(x_axis != currentX) {
 8000c24:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <handleFallingBlock+0x130>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <handleFallingBlock+0x124>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d003      	beq.n	8000c38 <handleFallingBlock+0x118>
		currentX = x_axis;
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <handleFallingBlock+0x130>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a03      	ldr	r2, [pc, #12]	; (8000c44 <handleFallingBlock+0x124>)
 8000c36:	6013      	str	r3, [r2, #0]
	}
	// Update the score display
	updateScore();
 8000c38:	f7ff fde4 	bl	8000804 <updateScore>
}
 8000c3c:	bf00      	nop
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd90      	pop	{r4, r7, pc}
 8000c44:	2000000c 	.word	0x2000000c
 8000c48:	20000010 	.word	0x20000010
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	20000000 	.word	0x20000000
 8000c54:	20000b88 	.word	0x20000b88
 8000c58:	20000b48 	.word	0x20000b48
 8000c5c:	20000bd4 	.word	0x20000bd4
 8000c60:	20000bd0 	.word	0x20000bd0

08000c64 <startFallingBlockTimer>:
 * @func   startFallingBlockTimer
 * @brief  Start a timer to handle the falling of a block at a specified interval.
 * @param  block: 2D array representing the falling block
 * @retval None
 */
void startFallingBlockTimer(int block[4][4]) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af02      	add	r7, sp, #8
 8000c6a:	6078      	str	r0, [r7, #4]
	// Stop the timer if it's already running
	if (idTimer != NO_TIMER) {
 8000c6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <startFallingBlockTimer+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2bff      	cmp	r3, #255	; 0xff
 8000c72:	d005      	beq.n	8000c80 <startFallingBlockTimer+0x1c>
		TimerStop(idTimer);
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <startFallingBlockTimer+0x40>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f001 f90c 	bl	8001e98 <TimerStop>
	}
	// Start a timer to handle the falling block at a specified interval
	idTimer = TimerStart("Fall", 500, TIMER_REPEAT_FOREVER, (void*) handleFallingBlock, block);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <startFallingBlockTimer+0x44>)
 8000c86:	22ff      	movs	r2, #255	; 0xff
 8000c88:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c8c:	4807      	ldr	r0, [pc, #28]	; (8000cac <startFallingBlockTimer+0x48>)
 8000c8e:	f001 f8a1 	bl	8001dd4 <TimerStart>
 8000c92:	4603      	mov	r3, r0
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <startFallingBlockTimer+0x40>)
 8000c98:	601a      	str	r2, [r3, #0]
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000004 	.word	0x20000004
 8000ca8:	08000b21 	.word	0x08000b21
 8000cac:	08005b00 	.word	0x08005b00

08000cb0 <CalculateBlockMaxWidth>:
 * @func   InterruptPA4_Init
 * @brief  Init Interrupt
 * @param  None
 * @retval None
 */
int CalculateBlockMaxWidth(int block[4][4], int x0) {
 8000cb0:	b480      	push	{r7}
 8000cb2:	b087      	sub	sp, #28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
    int max_width = -1;
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbe:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < 4; i++) {
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	e01e      	b.n	8000d04 <CalculateBlockMaxWidth+0x54>
        for (int j = 0; j < 4; j++) {
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	e015      	b.n	8000cf8 <CalculateBlockMaxWidth+0x48>
            if (block[i][j] == 1) {
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	011b      	lsls	r3, r3, #4
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	68fa      	ldr	r2, [r7, #12]
 8000cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d109      	bne.n	8000cf2 <CalculateBlockMaxWidth+0x42>
                int cellX = x0 + j;
 8000cde:	683a      	ldr	r2, [r7, #0]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	60bb      	str	r3, [r7, #8]
                if (cellX > max_width) {
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	dd01      	ble.n	8000cf2 <CalculateBlockMaxWidth+0x42>
                    max_width = cellX;
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	617b      	str	r3, [r7, #20]
        for (int j = 0; j < 4; j++) {
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2b03      	cmp	r3, #3
 8000cfc:	dde6      	ble.n	8000ccc <CalculateBlockMaxWidth+0x1c>
    for (int i = 0; i < 4; i++) {
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	3301      	adds	r3, #1
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	2b03      	cmp	r3, #3
 8000d08:	dddd      	ble.n	8000cc6 <CalculateBlockMaxWidth+0x16>
                }
            }
        }
    }

    return max_width - abs(x0) + 1;
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	bfb8      	it	lt
 8000d10:	425b      	neglt	r3, r3
 8000d12:	697a      	ldr	r2, [r7, #20]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	3301      	adds	r3, #1
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	371c      	adds	r7, #28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <calculateBlockWidth>:
 * @func   calculateBlockWidth
 * @brief  Calculate the width of a block.
 * @param  block: 2D array representing the block
 * @retval Width of the block
 */
int calculateBlockWidth(int block[4][4]) {
 8000d24:	b480      	push	{r7}
 8000d26:	b087      	sub	sp, #28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
    int width = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < 4; i++) {
 8000d30:	2300      	movs	r3, #0
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	e01f      	b.n	8000d76 <calculateBlockWidth+0x52>
        int rowWidth = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
        for (int j = 0; j < 4; j++) {
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	e00e      	b.n	8000d5e <calculateBlockWidth+0x3a>
            if (block[i][j] == 1) {
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	011b      	lsls	r3, r3, #4
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	4413      	add	r3, r2
 8000d48:	68ba      	ldr	r2, [r7, #8]
 8000d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d102      	bne.n	8000d58 <calculateBlockWidth+0x34>
                rowWidth++;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	3301      	adds	r3, #1
 8000d56:	60fb      	str	r3, [r7, #12]
        for (int j = 0; j < 4; j++) {
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	2b03      	cmp	r3, #3
 8000d62:	dded      	ble.n	8000d40 <calculateBlockWidth+0x1c>
            }
        }
        if (rowWidth > width) {
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	dd01      	ble.n	8000d70 <calculateBlockWidth+0x4c>
            width = rowWidth;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 4; i++) {
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	3301      	adds	r3, #1
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	2b03      	cmp	r3, #3
 8000d7a:	dddc      	ble.n	8000d36 <calculateBlockWidth+0x12>
        }
    }

    return width;
 8000d7c:	697b      	ldr	r3, [r7, #20]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	371c      	adds	r7, #28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <rotateCurrentBlock>:
 * @func   rotateCurrentBlock
 * @brief  Rotate the current block based on its type and handle collisions.
 * @param  None
 * @retval None
 */
void rotateCurrentBlock(void) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b0aa      	sub	sp, #168	; 0xa8
 8000d90:	af00      	add	r7, sp, #0
	int nextRotation = (currentRotation + 1)%4;
 8000d92:	4bbe      	ldr	r3, [pc, #760]	; (800108c <rotateCurrentBlock+0x300>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	3301      	adds	r3, #1
 8000d98:	425a      	negs	r2, r3
 8000d9a:	f003 0303 	and.w	r3, r3, #3
 8000d9e:	f002 0203 	and.w	r2, r2, #3
 8000da2:	bf58      	it	pl
 8000da4:	4253      	negpl	r3, r2
 8000da6:	657b      	str	r3, [r7, #84]	; 0x54
	int tempBlock[4][4];
	// Determine block type and perform rotation
	if (blockIndex >= 0 && blockIndex < 4) {
 8000da8:	4bb9      	ldr	r3, [pc, #740]	; (8001090 <rotateCurrentBlock+0x304>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	f2c0 8082 	blt.w	8000eb6 <rotateCurrentBlock+0x12a>
 8000db2:	4bb7      	ldr	r3, [pc, #732]	; (8001090 <rotateCurrentBlock+0x304>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b03      	cmp	r3, #3
 8000db8:	dc7d      	bgt.n	8000eb6 <rotateCurrentBlock+0x12a>
		blockIndex = (blockIndex + currentRotation)%4;
 8000dba:	4bb5      	ldr	r3, [pc, #724]	; (8001090 <rotateCurrentBlock+0x304>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	4bb3      	ldr	r3, [pc, #716]	; (800108c <rotateCurrentBlock+0x300>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	425a      	negs	r2, r3
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	f002 0203 	and.w	r2, r2, #3
 8000dce:	bf58      	it	pl
 8000dd0:	4253      	negpl	r3, r2
 8000dd2:	4aaf      	ldr	r2, [pc, #700]	; (8001090 <rotateCurrentBlock+0x304>)
 8000dd4:	6013      	str	r3, [r2, #0]
	    int (*rotBlock)[4] = block_T[blockIndex];
 8000dd6:	4bae      	ldr	r3, [pc, #696]	; (8001090 <rotateCurrentBlock+0x304>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4aae      	ldr	r2, [pc, #696]	; (8001094 <rotateCurrentBlock+0x308>)
 8000ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de0:	653b      	str	r3, [r7, #80]	; 0x50
	    if (!checkForCollisions(currentX, currentY, rotBlock)) {
 8000de2:	4bad      	ldr	r3, [pc, #692]	; (8001098 <rotateCurrentBlock+0x30c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4aad      	ldr	r2, [pc, #692]	; (800109c <rotateCurrentBlock+0x310>)
 8000de8:	6811      	ldr	r1, [r2, #0]
 8000dea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fc4f 	bl	8000690 <checkForCollisions>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d12d      	bne.n	8000e54 <rotateCurrentBlock+0xc8>
		    for (int i = 0; i < 4; i++) {
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000dfe:	e025      	b.n	8000e4c <rotateCurrentBlock+0xc0>
			        for (int j = 0; j < 4; j++) {
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000e06:	e018      	b.n	8000e3a <rotateCurrentBlock+0xae>
			            tempBlock[i][j] = rotBlock[i][j];
 8000e08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000e0c:	011b      	lsls	r3, r3, #4
 8000e0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000e10:	4413      	add	r3, r2
 8000e12:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000e16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000e1e:	0099      	lsls	r1, r3, #2
 8000e20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000e24:	440b      	add	r3, r1
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	33a8      	adds	r3, #168	; 0xa8
 8000e2a:	443b      	add	r3, r7
 8000e2c:	f843 2ca8 	str.w	r2, [r3, #-168]
			        for (int j = 0; j < 4; j++) {
 8000e30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000e34:	3301      	adds	r3, #1
 8000e36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000e3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000e3e:	2b03      	cmp	r3, #3
 8000e40:	dde2      	ble.n	8000e08 <rotateCurrentBlock+0x7c>
		    for (int i = 0; i < 4; i++) {
 8000e42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000e46:	3301      	adds	r3, #1
 8000e48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000e4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000e50:	2b03      	cmp	r3, #3
 8000e52:	ddd5      	ble.n	8000e00 <rotateCurrentBlock+0x74>
			        }
			    }
	    }
	    for (int i = 0; i < 4; i++) {
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000e5a:	e025      	b.n	8000ea8 <rotateCurrentBlock+0x11c>
		        for (int j = 0; j < 4; j++) {
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000e62:	e018      	b.n	8000e96 <rotateCurrentBlock+0x10a>
		            currentBlock[i][j] = tempBlock[i][j];
 8000e64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e68:	009a      	lsls	r2, r3, #2
 8000e6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000e6e:	4413      	add	r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	33a8      	adds	r3, #168	; 0xa8
 8000e74:	443b      	add	r3, r7
 8000e76:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 8000e7a:	4889      	ldr	r0, [pc, #548]	; (80010a0 <rotateCurrentBlock+0x314>)
 8000e7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e80:	0099      	lsls	r1, r3, #2
 8000e82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000e86:	440b      	add	r3, r1
 8000e88:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		        for (int j = 0; j < 4; j++) {
 8000e8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000e90:	3301      	adds	r3, #1
 8000e92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000e96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	dde2      	ble.n	8000e64 <rotateCurrentBlock+0xd8>
	    for (int i = 0; i < 4; i++) {
 8000e9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000ea8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000eac:	2b03      	cmp	r3, #3
 8000eae:	ddd5      	ble.n	8000e5c <rotateCurrentBlock+0xd0>
		        }
		    }
	    currentRotation = nextRotation;
 8000eb0:	4a76      	ldr	r2, [pc, #472]	; (800108c <rotateCurrentBlock+0x300>)
 8000eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000eb4:	6013      	str	r3, [r2, #0]
	}
	// Determine block type and perform rotation
	if (blockIndex >= 4 && blockIndex < 8) {
 8000eb6:	4b76      	ldr	r3, [pc, #472]	; (8001090 <rotateCurrentBlock+0x304>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b03      	cmp	r3, #3
 8000ebc:	f340 8089 	ble.w	8000fd2 <rotateCurrentBlock+0x246>
 8000ec0:	4b73      	ldr	r3, [pc, #460]	; (8001090 <rotateCurrentBlock+0x304>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b07      	cmp	r3, #7
 8000ec6:	f300 8084 	bgt.w	8000fd2 <rotateCurrentBlock+0x246>
		blockIndex = (blockIndex - 4 + currentRotation)%4;
 8000eca:	4b71      	ldr	r3, [pc, #452]	; (8001090 <rotateCurrentBlock+0x304>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	1f1a      	subs	r2, r3, #4
 8000ed0:	4b6e      	ldr	r3, [pc, #440]	; (800108c <rotateCurrentBlock+0x300>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	425a      	negs	r2, r3
 8000ed8:	f003 0303 	and.w	r3, r3, #3
 8000edc:	f002 0203 	and.w	r2, r2, #3
 8000ee0:	bf58      	it	pl
 8000ee2:	4253      	negpl	r3, r2
 8000ee4:	4a6a      	ldr	r2, [pc, #424]	; (8001090 <rotateCurrentBlock+0x304>)
 8000ee6:	6013      	str	r3, [r2, #0]
	    int (*rotBlock)[4] = block_J[blockIndex];
 8000ee8:	4b69      	ldr	r3, [pc, #420]	; (8001090 <rotateCurrentBlock+0x304>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a6d      	ldr	r2, [pc, #436]	; (80010a4 <rotateCurrentBlock+0x318>)
 8000eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
	    if (!checkForCollisions(currentX, currentY, rotBlock)) {
 8000ef4:	4b68      	ldr	r3, [pc, #416]	; (8001098 <rotateCurrentBlock+0x30c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a68      	ldr	r2, [pc, #416]	; (800109c <rotateCurrentBlock+0x310>)
 8000efa:	6811      	ldr	r1, [r2, #0]
 8000efc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fbc6 	bl	8000690 <checkForCollisions>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d12d      	bne.n	8000f66 <rotateCurrentBlock+0x1da>
		    for (int i = 0; i < 4; i++) {
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000f10:	e025      	b.n	8000f5e <rotateCurrentBlock+0x1d2>
			        for (int j = 0; j < 4; j++) {
 8000f12:	2300      	movs	r3, #0
 8000f14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000f18:	e018      	b.n	8000f4c <rotateCurrentBlock+0x1c0>
			            tempBlock[i][j] = rotBlock[i][j];
 8000f1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f1e:	011b      	lsls	r3, r3, #4
 8000f20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f22:	4413      	add	r3, r2
 8000f24:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000f28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f30:	0099      	lsls	r1, r3, #2
 8000f32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000f36:	440b      	add	r3, r1
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	33a8      	adds	r3, #168	; 0xa8
 8000f3c:	443b      	add	r3, r7
 8000f3e:	f843 2ca8 	str.w	r2, [r3, #-168]
			        for (int j = 0; j < 4; j++) {
 8000f42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000f46:	3301      	adds	r3, #1
 8000f48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000f4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	dde2      	ble.n	8000f1a <rotateCurrentBlock+0x18e>
		    for (int i = 0; i < 4; i++) {
 8000f54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f58:	3301      	adds	r3, #1
 8000f5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000f5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f62:	2b03      	cmp	r3, #3
 8000f64:	ddd5      	ble.n	8000f12 <rotateCurrentBlock+0x186>
			        }
			    }
	    }
	    for (int i = 0; i < 4; i++) {
 8000f66:	2300      	movs	r3, #0
 8000f68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000f6c:	e025      	b.n	8000fba <rotateCurrentBlock+0x22e>
		        for (int j = 0; j < 4; j++) {
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000f74:	e018      	b.n	8000fa8 <rotateCurrentBlock+0x21c>
		            currentBlock[i][j] = tempBlock[i][j];
 8000f76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f7a:	009a      	lsls	r2, r3, #2
 8000f7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000f80:	4413      	add	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	33a8      	adds	r3, #168	; 0xa8
 8000f86:	443b      	add	r3, r7
 8000f88:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 8000f8c:	4844      	ldr	r0, [pc, #272]	; (80010a0 <rotateCurrentBlock+0x314>)
 8000f8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f92:	0099      	lsls	r1, r3, #2
 8000f94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000f98:	440b      	add	r3, r1
 8000f9a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		        for (int j = 0; j < 4; j++) {
 8000f9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000fa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	dde2      	ble.n	8000f76 <rotateCurrentBlock+0x1ea>
	    for (int i = 0; i < 4; i++) {
 8000fb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000fba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000fbe:	2b03      	cmp	r3, #3
 8000fc0:	ddd5      	ble.n	8000f6e <rotateCurrentBlock+0x1e2>
		        }
		    }
	    currentRotation = nextRotation;
 8000fc2:	4a32      	ldr	r2, [pc, #200]	; (800108c <rotateCurrentBlock+0x300>)
 8000fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fc6:	6013      	str	r3, [r2, #0]
	    blockIndex += 4;
 8000fc8:	4b31      	ldr	r3, [pc, #196]	; (8001090 <rotateCurrentBlock+0x304>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	4a30      	ldr	r2, [pc, #192]	; (8001090 <rotateCurrentBlock+0x304>)
 8000fd0:	6013      	str	r3, [r2, #0]
	}
	// Determine block type and perform rotation
	if (blockIndex >= 8 && blockIndex < 12) {
 8000fd2:	4b2f      	ldr	r3, [pc, #188]	; (8001090 <rotateCurrentBlock+0x304>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b07      	cmp	r3, #7
 8000fd8:	f340 808f 	ble.w	80010fa <rotateCurrentBlock+0x36e>
 8000fdc:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <rotateCurrentBlock+0x304>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b0b      	cmp	r3, #11
 8000fe2:	f300 808a 	bgt.w	80010fa <rotateCurrentBlock+0x36e>
		blockIndex = (blockIndex - 8 + currentRotation)%4;
 8000fe6:	4b2a      	ldr	r3, [pc, #168]	; (8001090 <rotateCurrentBlock+0x304>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f1a3 0208 	sub.w	r2, r3, #8
 8000fee:	4b27      	ldr	r3, [pc, #156]	; (800108c <rotateCurrentBlock+0x300>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	425a      	negs	r2, r3
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	f002 0203 	and.w	r2, r2, #3
 8000ffe:	bf58      	it	pl
 8001000:	4253      	negpl	r3, r2
 8001002:	4a23      	ldr	r2, [pc, #140]	; (8001090 <rotateCurrentBlock+0x304>)
 8001004:	6013      	str	r3, [r2, #0]
	    int (*rotBlock)[4] = block_Z[blockIndex];
 8001006:	4b22      	ldr	r3, [pc, #136]	; (8001090 <rotateCurrentBlock+0x304>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a27      	ldr	r2, [pc, #156]	; (80010a8 <rotateCurrentBlock+0x31c>)
 800100c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001010:	64bb      	str	r3, [r7, #72]	; 0x48
	    if (!checkForCollisions(currentX, currentY, rotBlock)) {
 8001012:	4b21      	ldr	r3, [pc, #132]	; (8001098 <rotateCurrentBlock+0x30c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a21      	ldr	r2, [pc, #132]	; (800109c <rotateCurrentBlock+0x310>)
 8001018:	6811      	ldr	r1, [r2, #0]
 800101a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fb37 	bl	8000690 <checkForCollisions>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d12d      	bne.n	8001084 <rotateCurrentBlock+0x2f8>
		    for (int i = 0; i < 4; i++) {
 8001028:	2300      	movs	r3, #0
 800102a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800102e:	e025      	b.n	800107c <rotateCurrentBlock+0x2f0>
			        for (int j = 0; j < 4; j++) {
 8001030:	2300      	movs	r3, #0
 8001032:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001036:	e018      	b.n	800106a <rotateCurrentBlock+0x2de>
			            tempBlock[i][j] = rotBlock[i][j];
 8001038:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800103c:	011b      	lsls	r3, r3, #4
 800103e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001040:	4413      	add	r3, r2
 8001042:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001046:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800104a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800104e:	0099      	lsls	r1, r3, #2
 8001050:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001054:	440b      	add	r3, r1
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	33a8      	adds	r3, #168	; 0xa8
 800105a:	443b      	add	r3, r7
 800105c:	f843 2ca8 	str.w	r2, [r3, #-168]
			        for (int j = 0; j < 4; j++) {
 8001060:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001064:	3301      	adds	r3, #1
 8001066:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800106a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800106e:	2b03      	cmp	r3, #3
 8001070:	dde2      	ble.n	8001038 <rotateCurrentBlock+0x2ac>
		    for (int i = 0; i < 4; i++) {
 8001072:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001076:	3301      	adds	r3, #1
 8001078:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800107c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001080:	2b03      	cmp	r3, #3
 8001082:	ddd5      	ble.n	8001030 <rotateCurrentBlock+0x2a4>
			        }
			    }
	    }
	    for (int i = 0; i < 4; i++) {
 8001084:	2300      	movs	r3, #0
 8001086:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001088:	e02c      	b.n	80010e4 <rotateCurrentBlock+0x358>
 800108a:	bf00      	nop
 800108c:	20000014 	.word	0x20000014
 8001090:	20000bc8 	.word	0x20000bc8
 8001094:	20000528 	.word	0x20000528
 8001098:	2000000c 	.word	0x2000000c
 800109c:	20000010 	.word	0x20000010
 80010a0:	20000b48 	.word	0x20000b48
 80010a4:	20000538 	.word	0x20000538
 80010a8:	20000548 	.word	0x20000548
		        for (int j = 0; j < 4; j++) {
 80010ac:	2300      	movs	r3, #0
 80010ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80010b0:	e012      	b.n	80010d8 <rotateCurrentBlock+0x34c>
		            currentBlock[i][j] = tempBlock[i][j];
 80010b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010b4:	009a      	lsls	r2, r3, #2
 80010b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80010b8:	4413      	add	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	33a8      	adds	r3, #168	; 0xa8
 80010be:	443b      	add	r3, r7
 80010c0:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 80010c4:	4883      	ldr	r0, [pc, #524]	; (80012d4 <rotateCurrentBlock+0x548>)
 80010c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010c8:	0099      	lsls	r1, r3, #2
 80010ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80010cc:	440b      	add	r3, r1
 80010ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		        for (int j = 0; j < 4; j++) {
 80010d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80010d4:	3301      	adds	r3, #1
 80010d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80010d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80010da:	2b03      	cmp	r3, #3
 80010dc:	dde9      	ble.n	80010b2 <rotateCurrentBlock+0x326>
	    for (int i = 0; i < 4; i++) {
 80010de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010e0:	3301      	adds	r3, #1
 80010e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80010e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	dde0      	ble.n	80010ac <rotateCurrentBlock+0x320>
		        }
		    }
	    currentRotation = nextRotation;
 80010ea:	4a7b      	ldr	r2, [pc, #492]	; (80012d8 <rotateCurrentBlock+0x54c>)
 80010ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010ee:	6013      	str	r3, [r2, #0]
	    blockIndex += 8;
 80010f0:	4b7a      	ldr	r3, [pc, #488]	; (80012dc <rotateCurrentBlock+0x550>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	3308      	adds	r3, #8
 80010f6:	4a79      	ldr	r2, [pc, #484]	; (80012dc <rotateCurrentBlock+0x550>)
 80010f8:	6013      	str	r3, [r2, #0]
	}
	// Determine block type and perform rotation
	if (blockIndex >= 12 && blockIndex < 16) {
 80010fa:	4b78      	ldr	r3, [pc, #480]	; (80012dc <rotateCurrentBlock+0x550>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b0b      	cmp	r3, #11
 8001100:	dd70      	ble.n	80011e4 <rotateCurrentBlock+0x458>
 8001102:	4b76      	ldr	r3, [pc, #472]	; (80012dc <rotateCurrentBlock+0x550>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b0f      	cmp	r3, #15
 8001108:	dc6c      	bgt.n	80011e4 <rotateCurrentBlock+0x458>
		blockIndex = (blockIndex - 12 + currentRotation)%4;
 800110a:	4b74      	ldr	r3, [pc, #464]	; (80012dc <rotateCurrentBlock+0x550>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f1a3 020c 	sub.w	r2, r3, #12
 8001112:	4b71      	ldr	r3, [pc, #452]	; (80012d8 <rotateCurrentBlock+0x54c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	425a      	negs	r2, r3
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	f002 0203 	and.w	r2, r2, #3
 8001122:	bf58      	it	pl
 8001124:	4253      	negpl	r3, r2
 8001126:	4a6d      	ldr	r2, [pc, #436]	; (80012dc <rotateCurrentBlock+0x550>)
 8001128:	6013      	str	r3, [r2, #0]
	    int (*rotBlock)[4] = block_L[blockIndex];
 800112a:	4b6c      	ldr	r3, [pc, #432]	; (80012dc <rotateCurrentBlock+0x550>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a6c      	ldr	r2, [pc, #432]	; (80012e0 <rotateCurrentBlock+0x554>)
 8001130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001134:	647b      	str	r3, [r7, #68]	; 0x44
	    if (!checkForCollisions(currentX, currentY, rotBlock)) {
 8001136:	4b6b      	ldr	r3, [pc, #428]	; (80012e4 <rotateCurrentBlock+0x558>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a6b      	ldr	r2, [pc, #428]	; (80012e8 <rotateCurrentBlock+0x55c>)
 800113c:	6811      	ldr	r1, [r2, #0]
 800113e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff faa5 	bl	8000690 <checkForCollisions>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d121      	bne.n	8001190 <rotateCurrentBlock+0x404>
		    for (int i = 0; i < 4; i++) {
 800114c:	2300      	movs	r3, #0
 800114e:	677b      	str	r3, [r7, #116]	; 0x74
 8001150:	e01b      	b.n	800118a <rotateCurrentBlock+0x3fe>
			        for (int j = 0; j < 4; j++) {
 8001152:	2300      	movs	r3, #0
 8001154:	673b      	str	r3, [r7, #112]	; 0x70
 8001156:	e012      	b.n	800117e <rotateCurrentBlock+0x3f2>
			            tempBlock[i][j] = rotBlock[i][j];
 8001158:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800115a:	011b      	lsls	r3, r3, #4
 800115c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800115e:	4413      	add	r3, r2
 8001160:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001162:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001168:	0099      	lsls	r1, r3, #2
 800116a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800116c:	440b      	add	r3, r1
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	33a8      	adds	r3, #168	; 0xa8
 8001172:	443b      	add	r3, r7
 8001174:	f843 2ca8 	str.w	r2, [r3, #-168]
			        for (int j = 0; j < 4; j++) {
 8001178:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800117a:	3301      	adds	r3, #1
 800117c:	673b      	str	r3, [r7, #112]	; 0x70
 800117e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001180:	2b03      	cmp	r3, #3
 8001182:	dde9      	ble.n	8001158 <rotateCurrentBlock+0x3cc>
		    for (int i = 0; i < 4; i++) {
 8001184:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001186:	3301      	adds	r3, #1
 8001188:	677b      	str	r3, [r7, #116]	; 0x74
 800118a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800118c:	2b03      	cmp	r3, #3
 800118e:	dde0      	ble.n	8001152 <rotateCurrentBlock+0x3c6>
			        }
			    }
	    }
	    for (int i = 0; i < 4; i++) {
 8001190:	2300      	movs	r3, #0
 8001192:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001194:	e01b      	b.n	80011ce <rotateCurrentBlock+0x442>
		        for (int j = 0; j < 4; j++) {
 8001196:	2300      	movs	r3, #0
 8001198:	66bb      	str	r3, [r7, #104]	; 0x68
 800119a:	e012      	b.n	80011c2 <rotateCurrentBlock+0x436>
		            currentBlock[i][j] = tempBlock[i][j];
 800119c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800119e:	009a      	lsls	r2, r3, #2
 80011a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011a2:	4413      	add	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	33a8      	adds	r3, #168	; 0xa8
 80011a8:	443b      	add	r3, r7
 80011aa:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 80011ae:	4849      	ldr	r0, [pc, #292]	; (80012d4 <rotateCurrentBlock+0x548>)
 80011b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80011b2:	0099      	lsls	r1, r3, #2
 80011b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011b6:	440b      	add	r3, r1
 80011b8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		        for (int j = 0; j < 4; j++) {
 80011bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011be:	3301      	adds	r3, #1
 80011c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80011c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	dde9      	ble.n	800119c <rotateCurrentBlock+0x410>
	    for (int i = 0; i < 4; i++) {
 80011c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80011ca:	3301      	adds	r3, #1
 80011cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80011ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	dde0      	ble.n	8001196 <rotateCurrentBlock+0x40a>
		        }
		    }
	    currentRotation = nextRotation;
 80011d4:	4a40      	ldr	r2, [pc, #256]	; (80012d8 <rotateCurrentBlock+0x54c>)
 80011d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011d8:	6013      	str	r3, [r2, #0]
	    blockIndex += 12;
 80011da:	4b40      	ldr	r3, [pc, #256]	; (80012dc <rotateCurrentBlock+0x550>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	330c      	adds	r3, #12
 80011e0:	4a3e      	ldr	r2, [pc, #248]	; (80012dc <rotateCurrentBlock+0x550>)
 80011e2:	6013      	str	r3, [r2, #0]
	}
	// Determine block type and perform rotation
	if (blockIndex >= 16 && blockIndex < 18) {
 80011e4:	4b3d      	ldr	r3, [pc, #244]	; (80012dc <rotateCurrentBlock+0x550>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b0f      	cmp	r3, #15
 80011ea:	dd6e      	ble.n	80012ca <rotateCurrentBlock+0x53e>
 80011ec:	4b3b      	ldr	r3, [pc, #236]	; (80012dc <rotateCurrentBlock+0x550>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b11      	cmp	r3, #17
 80011f2:	dc6a      	bgt.n	80012ca <rotateCurrentBlock+0x53e>
		blockIndex = (blockIndex - 16 + currentRotation)%2;
 80011f4:	4b39      	ldr	r3, [pc, #228]	; (80012dc <rotateCurrentBlock+0x550>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f1a3 0210 	sub.w	r2, r3, #16
 80011fc:	4b36      	ldr	r3, [pc, #216]	; (80012d8 <rotateCurrentBlock+0x54c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4413      	add	r3, r2
 8001202:	2b00      	cmp	r3, #0
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	bfb8      	it	lt
 800120a:	425b      	neglt	r3, r3
 800120c:	4a33      	ldr	r2, [pc, #204]	; (80012dc <rotateCurrentBlock+0x550>)
 800120e:	6013      	str	r3, [r2, #0]
		int (*rotBlock)[4] = block_I[blockIndex];
 8001210:	4b32      	ldr	r3, [pc, #200]	; (80012dc <rotateCurrentBlock+0x550>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a35      	ldr	r2, [pc, #212]	; (80012ec <rotateCurrentBlock+0x560>)
 8001216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121a:	643b      	str	r3, [r7, #64]	; 0x40
		if (!checkForCollisions(currentX, currentY, rotBlock)) {
 800121c:	4b31      	ldr	r3, [pc, #196]	; (80012e4 <rotateCurrentBlock+0x558>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a31      	ldr	r2, [pc, #196]	; (80012e8 <rotateCurrentBlock+0x55c>)
 8001222:	6811      	ldr	r1, [r2, #0]
 8001224:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fa32 	bl	8000690 <checkForCollisions>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d121      	bne.n	8001276 <rotateCurrentBlock+0x4ea>
			for (int i = 0; i < 4; i++) {
 8001232:	2300      	movs	r3, #0
 8001234:	667b      	str	r3, [r7, #100]	; 0x64
 8001236:	e01b      	b.n	8001270 <rotateCurrentBlock+0x4e4>
			        for (int j = 0; j < 4; j++) {
 8001238:	2300      	movs	r3, #0
 800123a:	663b      	str	r3, [r7, #96]	; 0x60
 800123c:	e012      	b.n	8001264 <rotateCurrentBlock+0x4d8>
			            tempBlock[i][j] = rotBlock[i][j];
 800123e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001240:	011b      	lsls	r3, r3, #4
 8001242:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001244:	4413      	add	r3, r2
 8001246:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001248:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800124c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800124e:	0099      	lsls	r1, r3, #2
 8001250:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001252:	440b      	add	r3, r1
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	33a8      	adds	r3, #168	; 0xa8
 8001258:	443b      	add	r3, r7
 800125a:	f843 2ca8 	str.w	r2, [r3, #-168]
			        for (int j = 0; j < 4; j++) {
 800125e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001260:	3301      	adds	r3, #1
 8001262:	663b      	str	r3, [r7, #96]	; 0x60
 8001264:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001266:	2b03      	cmp	r3, #3
 8001268:	dde9      	ble.n	800123e <rotateCurrentBlock+0x4b2>
			for (int i = 0; i < 4; i++) {
 800126a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800126c:	3301      	adds	r3, #1
 800126e:	667b      	str	r3, [r7, #100]	; 0x64
 8001270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001272:	2b03      	cmp	r3, #3
 8001274:	dde0      	ble.n	8001238 <rotateCurrentBlock+0x4ac>
			        }
			    }
		}
		for (int i = 0; i < 4; i++) {
 8001276:	2300      	movs	r3, #0
 8001278:	65fb      	str	r3, [r7, #92]	; 0x5c
 800127a:	e01b      	b.n	80012b4 <rotateCurrentBlock+0x528>
		        for (int j = 0; j < 4; j++) {
 800127c:	2300      	movs	r3, #0
 800127e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001280:	e012      	b.n	80012a8 <rotateCurrentBlock+0x51c>
		            currentBlock[i][j] = tempBlock[i][j];
 8001282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001284:	009a      	lsls	r2, r3, #2
 8001286:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001288:	4413      	add	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	33a8      	adds	r3, #168	; 0xa8
 800128e:	443b      	add	r3, r7
 8001290:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 8001294:	480f      	ldr	r0, [pc, #60]	; (80012d4 <rotateCurrentBlock+0x548>)
 8001296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001298:	0099      	lsls	r1, r3, #2
 800129a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800129c:	440b      	add	r3, r1
 800129e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		        for (int j = 0; j < 4; j++) {
 80012a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012a4:	3301      	adds	r3, #1
 80012a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80012a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	dde9      	ble.n	8001282 <rotateCurrentBlock+0x4f6>
		for (int i = 0; i < 4; i++) {
 80012ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012b0:	3301      	adds	r3, #1
 80012b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012b6:	2b03      	cmp	r3, #3
 80012b8:	dde0      	ble.n	800127c <rotateCurrentBlock+0x4f0>
		        }
		    }
		currentRotation = nextRotation;
 80012ba:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <rotateCurrentBlock+0x54c>)
 80012bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012be:	6013      	str	r3, [r2, #0]
		blockIndex += 16;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <rotateCurrentBlock+0x550>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3310      	adds	r3, #16
 80012c6:	4a05      	ldr	r2, [pc, #20]	; (80012dc <rotateCurrentBlock+0x550>)
 80012c8:	6013      	str	r3, [r2, #0]
		}
}
 80012ca:	bf00      	nop
 80012cc:	37a8      	adds	r7, #168	; 0xa8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000b48 	.word	0x20000b48
 80012d8:	20000014 	.word	0x20000014
 80012dc:	20000bc8 	.word	0x20000bc8
 80012e0:	20000558 	.word	0x20000558
 80012e4:	2000000c 	.word	0x2000000c
 80012e8:	20000010 	.word	0x20000010
 80012ec:	20000568 	.word	0x20000568

080012f0 <EXTI3_IRQHandler>:
 * @brief  Interrupt Service Routine for handling Button B2 to move left.
 * @param  None
 * @retval None
 */
void EXTI3_IRQHandler(void)//Button B2 for go left
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	// Check if moving left is within the boundary
	if(EXTI_GetFlagStatus(EXTI_Line3) == SET)
 80012f4:	2008      	movs	r0, #8
 80012f6:	f000 fae5 	bl	80018c4 <EXTI_GetFlagStatus>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d10f      	bne.n	8001320 <EXTI3_IRQHandler+0x30>
	{
		if (x_axis + minx >= size) {
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <EXTI3_IRQHandler+0x3c>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <EXTI3_IRQHandler+0x40>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	441a      	add	r2, r3
 800130a:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <EXTI3_IRQHandler+0x44>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	429a      	cmp	r2, r3
 8001310:	db06      	blt.n	8001320 <EXTI3_IRQHandler+0x30>
			x_axis -= size;
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <EXTI3_IRQHandler+0x3c>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	4b07      	ldr	r3, [pc, #28]	; (8001334 <EXTI3_IRQHandler+0x44>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	4a03      	ldr	r2, [pc, #12]	; (800132c <EXTI3_IRQHandler+0x3c>)
 800131e:	6013      	str	r3, [r2, #0]
		}
	}
	// Clear the EXTI line 3 pending bit
	EXTI_ClearITPendingBit(EXTI_Line3);
 8001320:	2008      	movs	r0, #8
 8001322:	f000 fae9 	bl	80018f8 <EXTI_ClearITPendingBit>
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000000 	.word	0x20000000
 8001330:	20000bd4 	.word	0x20000bd4
 8001334:	20000008 	.word	0x20000008

08001338 <EXTI0_IRQHandler>:
 * @func   EXTI0_IRQHandler
 * @brief  Interrupt Service Routine for handling Button B4 to move right.
 * @param  None
 * @retval None
 */
void EXTI0_IRQHandler(void) {
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
    if (EXTI_GetFlagStatus(EXTI_Line0) == SET) {
 800133c:	2001      	movs	r0, #1
 800133e:	f000 fac1 	bl	80018c4 <EXTI_GetFlagStatus>
 8001342:	4603      	mov	r3, r0
 8001344:	2b01      	cmp	r3, #1
 8001346:	d114      	bne.n	8001372 <EXTI0_IRQHandler+0x3a>
        // Check if moving right is within the boundary
        if (x_axis + maxx <= (SCREEN_WIDTH - 1) * size) {
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <EXTI0_IRQHandler+0x44>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <EXTI0_IRQHandler+0x48>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	18d1      	adds	r1, r2, r3
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <EXTI0_IRQHandler+0x4c>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4613      	mov	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4413      	add	r3, r2
 8001360:	4299      	cmp	r1, r3
 8001362:	dc06      	bgt.n	8001372 <EXTI0_IRQHandler+0x3a>
            x_axis += size;
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <EXTI0_IRQHandler+0x44>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <EXTI0_IRQHandler+0x4c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4413      	add	r3, r2
 800136e:	4a03      	ldr	r2, [pc, #12]	; (800137c <EXTI0_IRQHandler+0x44>)
 8001370:	6013      	str	r3, [r2, #0]
        }
    }
    // Clear the EXTI line 0 pending bit
    EXTI_ClearITPendingBit(EXTI_Line0);
 8001372:	2001      	movs	r0, #1
 8001374:	f000 fac0 	bl	80018f8 <EXTI_ClearITPendingBit>
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000000 	.word	0x20000000
 8001380:	20000bd0 	.word	0x20000bd0
 8001384:	20000008 	.word	0x20000008

08001388 <EXTI4_IRQHandler>:
 * @func   EXTI4_IRQHandler
 * @brief  Interrupt Service Routine for handling Button B3 to start the game.
 * @param  None
 * @retval None
 */
void EXTI4_IRQHandler(void) {
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
    if (EXTI_GetFlagStatus(EXTI_Line4) == SET) {
 800138c:	2010      	movs	r0, #16
 800138e:	f000 fa99 	bl	80018c4 <EXTI_GetFlagStatus>
 8001392:	4603      	mov	r3, r0
 8001394:	2b01      	cmp	r3, #1
 8001396:	d104      	bne.n	80013a2 <EXTI4_IRQHandler+0x1a>
        // Start the falling block timer when Button B3 is pressed
        startFallingBlockTimer(block);
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <EXTI4_IRQHandler+0x24>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fc61 	bl	8000c64 <startFallingBlockTimer>
    }
    // Clear the EXTI line 4 pending bit
    EXTI_ClearITPendingBit(EXTI_Line4);
 80013a2:	2010      	movs	r0, #16
 80013a4:	f000 faa8 	bl	80018f8 <EXTI_ClearITPendingBit>
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000018 	.word	0x20000018

080013b0 <EXTI9_5_IRQHandler>:
 * @func   EXTI5_IRQHandler
 * @brief  Interrupt Service Routine for handling Button B1 to rotate the current block.
 * @param  None
 * @retval None
 */
void EXTI9_5_IRQHandler(void) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
    if (EXTI_GetFlagStatus(EXTI_Line5) == SET) {
 80013b4:	2020      	movs	r0, #32
 80013b6:	f000 fa85 	bl	80018c4 <EXTI_GetFlagStatus>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d101      	bne.n	80013c4 <EXTI9_5_IRQHandler+0x14>
        // Rotate the current block when Button B1 is pressed
        rotateCurrentBlock();
 80013c0:	f7ff fce4 	bl	8000d8c <rotateCurrentBlock>
    }
    // Clear the EXTI line 5 pending bit
    EXTI_ClearITPendingBit(EXTI_Line5);
 80013c4:	2020      	movs	r0, #32
 80013c6:	f000 fa97 	bl	80018f8 <EXTI_ClearITPendingBit>
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <initializeApplication>:
 * @func   initializeApplication
 * @brief  Common initialization routine for the application.
 * @param  None
 * @retval None
 */
static void initializeApplication(void){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af02      	add	r7, sp, #8
	// Update the system core clock
    SystemCoreClockUpdate();
 80013d6:	f000 f8d5 	bl	8001584 <SystemCoreClockUpdate>

    // Initialize timers
    TimerInit();
 80013da:	f000 fcd9 	bl	8001d90 <TimerInit>

    // Initialize the current block
    initializeCurrentBlock();
 80013de:	f7ff f89b 	bl	8000518 <initializeCurrentBlock>

    // Initialize the light sensor in DMA mode
    LightSensor_Init(ADC_READ_MODE_DMA);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f000 fea0 	bl	8002128 <LightSensor_Init>

    // Initialize interrupts for buttons B1, B2, B3, and B4
    initB1ButtonInterrupt();
 80013e8:	f7fe ff4a 	bl	8000280 <initB1ButtonInterrupt>
    initB2ButtonInterrupt();
 80013ec:	f7fe ff86 	bl	80002fc <initB2ButtonInterrupt>
    initB4ButtonInterrupt();
 80013f0:	f7ff f800 	bl	80003f4 <initB4ButtonInterrupt>
    initB3ButtonInterrupt();
 80013f4:	f7fe ffc0 	bl	8000378 <initB3ButtonInterrupt>

    // Begin the initialization of the LCD using the Ucglib4WireSWSPI library
    Ucglib4WireSWSPI_begin(&ucg, UCG_FONT_MODE_SOLID);
 80013f8:	2100      	movs	r1, #0
 80013fa:	4810      	ldr	r0, [pc, #64]	; (800143c <initializeApplication+0x6c>)
 80013fc:	f001 f8e2 	bl	80025c4 <Ucglib4WireSWSPI_begin>

    // Clear the screen
    ucg_ClearScreen(&ucg);
 8001400:	480e      	ldr	r0, [pc, #56]	; (800143c <initializeApplication+0x6c>)
 8001402:	f001 f926 	bl	8002652 <ucg_ClearScreen>

    // Set the font and color for the LCD
    ucg_SetFont(&ucg, ucg_font_ncenR08_hr);
 8001406:	490e      	ldr	r1, [pc, #56]	; (8001440 <initializeApplication+0x70>)
 8001408:	480c      	ldr	r0, [pc, #48]	; (800143c <initializeApplication+0x6c>)
 800140a:	f002 fa89 	bl	8003920 <ucg_SetFont>
    ucg_SetColor(&ucg, 0, 255, 255, 255);
 800140e:	23ff      	movs	r3, #255	; 0xff
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	23ff      	movs	r3, #255	; 0xff
 8001414:	22ff      	movs	r2, #255	; 0xff
 8001416:	2100      	movs	r1, #0
 8001418:	4808      	ldr	r0, [pc, #32]	; (800143c <initializeApplication+0x6c>)
 800141a:	f002 fb7f 	bl	8003b1c <ucg_SetColor>
    ucg_SetColor(&ucg, 1, 0, 0, 0);
 800141e:	2300      	movs	r3, #0
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	2300      	movs	r3, #0
 8001424:	2200      	movs	r2, #0
 8001426:	2101      	movs	r1, #1
 8001428:	4804      	ldr	r0, [pc, #16]	; (800143c <initializeApplication+0x6c>)
 800142a:	f002 fb77 	bl	8003b1c <ucg_SetColor>

    // Rotate the display 180 degrees
    ucg_SetRotate180(&ucg);
 800142e:	4803      	ldr	r0, [pc, #12]	; (800143c <initializeApplication+0x6c>)
 8001430:	f002 fc6e 	bl	8003d10 <ucg_SetRotate180>
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000604 	.word	0x20000604
 8001440:	08005bf8 	.word	0x08005bf8

08001444 <main>:

int main(void) {
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
    // Initialize the application
    initializeApplication();
 8001448:	f7ff ffc2 	bl	80013d0 <initializeApplication>

    // Load configuration settings
    loadConfiguration();
 800144c:	f7ff f810 	bl	8000470 <loadConfiguration>

    // Main application loop
    while (1) {
        // Process the timer scheduler
        processTimerScheduler();
 8001450:	f000 fd7e 	bl	8001f50 <processTimerScheduler>
 8001454:	e7fc      	b.n	8001450 <main+0xc>
	...

08001458 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001460:	4a14      	ldr	r2, [pc, #80]	; (80014b4 <_sbrk+0x5c>)
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <_sbrk+0x60>)
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800146c:	4b13      	ldr	r3, [pc, #76]	; (80014bc <_sbrk+0x64>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d102      	bne.n	800147a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <_sbrk+0x64>)
 8001476:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <_sbrk+0x68>)
 8001478:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <_sbrk+0x64>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	429a      	cmp	r2, r3
 8001486:	d207      	bcs.n	8001498 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001488:	f003 fe9c 	bl	80051c4 <__errno>
 800148c:	4603      	mov	r3, r0
 800148e:	220c      	movs	r2, #12
 8001490:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
 8001496:	e009      	b.n	80014ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <_sbrk+0x64>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800149e:	4b07      	ldr	r3, [pc, #28]	; (80014bc <_sbrk+0x64>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	4a05      	ldr	r2, [pc, #20]	; (80014bc <_sbrk+0x64>)
 80014a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014aa:	68fb      	ldr	r3, [r7, #12]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20018000 	.word	0x20018000
 80014b8:	00000400 	.word	0x00000400
 80014bc:	20000bd8 	.word	0x20000bd8
 80014c0:	20001ed8 	.word	0x20001ed8

080014c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014c4:	480d      	ldr	r0, [pc, #52]	; (80014fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80014c8:	f000 f826 	bl	8001518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014cc:	480c      	ldr	r0, [pc, #48]	; (8001500 <LoopForever+0x6>)
  ldr r1, =_edata
 80014ce:	490d      	ldr	r1, [pc, #52]	; (8001504 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014d0:	4a0d      	ldr	r2, [pc, #52]	; (8001508 <LoopForever+0xe>)
  movs r3, #0
 80014d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d4:	e002      	b.n	80014dc <LoopCopyDataInit>

080014d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014da:	3304      	adds	r3, #4

080014dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e0:	d3f9      	bcc.n	80014d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e2:	4a0a      	ldr	r2, [pc, #40]	; (800150c <LoopForever+0x12>)
  ldr r4, =_ebss
 80014e4:	4c0a      	ldr	r4, [pc, #40]	; (8001510 <LoopForever+0x16>)
  movs r3, #0
 80014e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e8:	e001      	b.n	80014ee <LoopFillZerobss>

080014ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ec:	3204      	adds	r2, #4

080014ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f0:	d3fb      	bcc.n	80014ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80014f2:	f003 fe6d 	bl	80051d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014f6:	f7ff ffa5 	bl	8001444 <main>

080014fa <LoopForever>:

LoopForever:
  b LoopForever
 80014fa:	e7fe      	b.n	80014fa <LoopForever>
  ldr   r0, =_estack
 80014fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001504:	200005e8 	.word	0x200005e8
  ldr r2, =_sidata
 8001508:	08006130 	.word	0x08006130
  ldr r2, =_sbss
 800150c:	200005e8 	.word	0x200005e8
  ldr r4, =_ebss
 8001510:	20001ed4 	.word	0x20001ed4

08001514 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001514:	e7fe      	b.n	8001514 <ADC_IRQHandler>
	...

08001518 <SystemInit>:
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
 800151c:	4b16      	ldr	r3, [pc, #88]	; (8001578 <SystemInit+0x60>)
 800151e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001522:	4a15      	ldr	r2, [pc, #84]	; (8001578 <SystemInit+0x60>)
 8001524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <SystemInit+0x64>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a12      	ldr	r2, [pc, #72]	; (800157c <SystemInit+0x64>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	4b10      	ldr	r3, [pc, #64]	; (800157c <SystemInit+0x64>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <SystemInit+0x64>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a0e      	ldr	r2, [pc, #56]	; (800157c <SystemInit+0x64>)
 8001544:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <SystemInit+0x64>)
 8001550:	4a0b      	ldr	r2, [pc, #44]	; (8001580 <SystemInit+0x68>)
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	4b09      	ldr	r3, [pc, #36]	; (800157c <SystemInit+0x64>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a08      	ldr	r2, [pc, #32]	; (800157c <SystemInit+0x64>)
 800155a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <SystemInit+0x64>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	f000 f889 	bl	800167c <SetSysClock>
 800156a:	4b03      	ldr	r3, [pc, #12]	; (8001578 <SystemInit+0x60>)
 800156c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	e000ed00 	.word	0xe000ed00
 800157c:	40023800 	.word	0x40023800
 8001580:	24003010 	.word	0x24003010

08001584 <SystemCoreClockUpdate>:
 8001584:	b480      	push	{r7}
 8001586:	b087      	sub	sp, #28
 8001588:	af00      	add	r7, sp, #0
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	2302      	movs	r3, #2
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	2302      	movs	r3, #2
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	4b32      	ldr	r3, [pc, #200]	; (8001668 <SystemCoreClockUpdate+0xe4>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 030c 	and.w	r3, r3, #12
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	d007      	beq.n	80015be <SystemCoreClockUpdate+0x3a>
 80015ae:	2b08      	cmp	r3, #8
 80015b0:	d009      	beq.n	80015c6 <SystemCoreClockUpdate+0x42>
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d13d      	bne.n	8001632 <SystemCoreClockUpdate+0xae>
 80015b6:	4b2d      	ldr	r3, [pc, #180]	; (800166c <SystemCoreClockUpdate+0xe8>)
 80015b8:	4a2d      	ldr	r2, [pc, #180]	; (8001670 <SystemCoreClockUpdate+0xec>)
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	e03d      	b.n	800163a <SystemCoreClockUpdate+0xb6>
 80015be:	4b2b      	ldr	r3, [pc, #172]	; (800166c <SystemCoreClockUpdate+0xe8>)
 80015c0:	4a2c      	ldr	r2, [pc, #176]	; (8001674 <SystemCoreClockUpdate+0xf0>)
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	e039      	b.n	800163a <SystemCoreClockUpdate+0xb6>
 80015c6:	4b28      	ldr	r3, [pc, #160]	; (8001668 <SystemCoreClockUpdate+0xe4>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	0d9b      	lsrs	r3, r3, #22
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	4b25      	ldr	r3, [pc, #148]	; (8001668 <SystemCoreClockUpdate+0xe4>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00c      	beq.n	80015fc <SystemCoreClockUpdate+0x78>
 80015e2:	4a24      	ldr	r2, [pc, #144]	; (8001674 <SystemCoreClockUpdate+0xf0>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ea:	4a1f      	ldr	r2, [pc, #124]	; (8001668 <SystemCoreClockUpdate+0xe4>)
 80015ec:	6852      	ldr	r2, [r2, #4]
 80015ee:	0992      	lsrs	r2, r2, #6
 80015f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80015f4:	fb02 f303 	mul.w	r3, r2, r3
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	e00b      	b.n	8001614 <SystemCoreClockUpdate+0x90>
 80015fc:	4a1c      	ldr	r2, [pc, #112]	; (8001670 <SystemCoreClockUpdate+0xec>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	fbb2 f3f3 	udiv	r3, r2, r3
 8001604:	4a18      	ldr	r2, [pc, #96]	; (8001668 <SystemCoreClockUpdate+0xe4>)
 8001606:	6852      	ldr	r2, [r2, #4]
 8001608:	0992      	lsrs	r2, r2, #6
 800160a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800160e:	fb02 f303 	mul.w	r3, r2, r3
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	4b14      	ldr	r3, [pc, #80]	; (8001668 <SystemCoreClockUpdate+0xe4>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	0c1b      	lsrs	r3, r3, #16
 800161a:	f003 0303 	and.w	r3, r3, #3
 800161e:	3301      	adds	r3, #1
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	fbb2 f3f3 	udiv	r3, r2, r3
 800162c:	4a0f      	ldr	r2, [pc, #60]	; (800166c <SystemCoreClockUpdate+0xe8>)
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	e003      	b.n	800163a <SystemCoreClockUpdate+0xb6>
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <SystemCoreClockUpdate+0xe8>)
 8001634:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <SystemCoreClockUpdate+0xec>)
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	bf00      	nop
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <SystemCoreClockUpdate+0xe4>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	091b      	lsrs	r3, r3, #4
 8001640:	f003 030f 	and.w	r3, r3, #15
 8001644:	4a0c      	ldr	r2, [pc, #48]	; (8001678 <SystemCoreClockUpdate+0xf4>)
 8001646:	5cd3      	ldrb	r3, [r2, r3]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	4b07      	ldr	r3, [pc, #28]	; (800166c <SystemCoreClockUpdate+0xe8>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	fa22 f303 	lsr.w	r3, r2, r3
 8001656:	4a05      	ldr	r2, [pc, #20]	; (800166c <SystemCoreClockUpdate+0xe8>)
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	bf00      	nop
 800165c:	371c      	adds	r7, #28
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800
 800166c:	20000570 	.word	0x20000570
 8001670:	00f42400 	.word	0x00f42400
 8001674:	017d7840 	.word	0x017d7840
 8001678:	20000574 	.word	0x20000574

0800167c <SetSysClock>:
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
 8001680:	4b22      	ldr	r3, [pc, #136]	; (800170c <SetSysClock+0x90>)
 8001682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001684:	4a21      	ldr	r2, [pc, #132]	; (800170c <SetSysClock+0x90>)
 8001686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168a:	6413      	str	r3, [r2, #64]	; 0x40
 800168c:	4b20      	ldr	r3, [pc, #128]	; (8001710 <SetSysClock+0x94>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a1f      	ldr	r2, [pc, #124]	; (8001710 <SetSysClock+0x94>)
 8001692:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	4b1c      	ldr	r3, [pc, #112]	; (800170c <SetSysClock+0x90>)
 800169a:	4a1c      	ldr	r2, [pc, #112]	; (800170c <SetSysClock+0x90>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	6093      	str	r3, [r2, #8]
 80016a0:	4b1a      	ldr	r3, [pc, #104]	; (800170c <SetSysClock+0x90>)
 80016a2:	4a1a      	ldr	r2, [pc, #104]	; (800170c <SetSysClock+0x90>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	6093      	str	r3, [r2, #8]
 80016a8:	4b18      	ldr	r3, [pc, #96]	; (800170c <SetSysClock+0x90>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	4a17      	ldr	r2, [pc, #92]	; (800170c <SetSysClock+0x90>)
 80016ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016b2:	6093      	str	r3, [r2, #8]
 80016b4:	4b15      	ldr	r3, [pc, #84]	; (800170c <SetSysClock+0x90>)
 80016b6:	4a17      	ldr	r2, [pc, #92]	; (8001714 <SetSysClock+0x98>)
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	4b14      	ldr	r3, [pc, #80]	; (800170c <SetSysClock+0x90>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a13      	ldr	r2, [pc, #76]	; (800170c <SetSysClock+0x90>)
 80016c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	bf00      	nop
 80016c8:	4b10      	ldr	r3, [pc, #64]	; (800170c <SetSysClock+0x90>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0f9      	beq.n	80016c8 <SetSysClock+0x4c>
 80016d4:	4b10      	ldr	r3, [pc, #64]	; (8001718 <SetSysClock+0x9c>)
 80016d6:	f240 6202 	movw	r2, #1538	; 0x602
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <SetSysClock+0x90>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	4a0a      	ldr	r2, [pc, #40]	; (800170c <SetSysClock+0x90>)
 80016e2:	f023 0303 	bic.w	r3, r3, #3
 80016e6:	6093      	str	r3, [r2, #8]
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <SetSysClock+0x90>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	4a07      	ldr	r2, [pc, #28]	; (800170c <SetSysClock+0x90>)
 80016ee:	f043 0302 	orr.w	r3, r3, #2
 80016f2:	6093      	str	r3, [r2, #8]
 80016f4:	bf00      	nop
 80016f6:	4b05      	ldr	r3, [pc, #20]	; (800170c <SetSysClock+0x90>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	2b08      	cmp	r3, #8
 8001700:	d1f9      	bne.n	80016f6 <SetSysClock+0x7a>
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	40023800 	.word	0x40023800
 8001710:	40007000 	.word	0x40007000
 8001714:	08015410 	.word	0x08015410
 8001718:	40023c00 	.word	0x40023c00

0800171c <NVIC_Init>:
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	2300      	movs	r3, #0
 8001726:	73fb      	strb	r3, [r7, #15]
 8001728:	2300      	movs	r3, #0
 800172a:	73bb      	strb	r3, [r7, #14]
 800172c:	230f      	movs	r3, #15
 800172e:	737b      	strb	r3, [r7, #13]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	78db      	ldrb	r3, [r3, #3]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d039      	beq.n	80017ac <NVIC_Init+0x90>
 8001738:	4b27      	ldr	r3, [pc, #156]	; (80017d8 <NVIC_Init+0xbc>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	43db      	mvns	r3, r3
 800173e:	0a1b      	lsrs	r3, r3, #8
 8001740:	b2db      	uxtb	r3, r3
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	73fb      	strb	r3, [r7, #15]
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	f1c3 0304 	rsb	r3, r3, #4
 800174e:	73bb      	strb	r3, [r7, #14]
 8001750:	7b7a      	ldrb	r2, [r7, #13]
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	fa42 f303 	asr.w	r3, r2, r3
 8001758:	737b      	strb	r3, [r7, #13]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	785b      	ldrb	r3, [r3, #1]
 800175e:	461a      	mov	r2, r3
 8001760:	7bbb      	ldrb	r3, [r7, #14]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	73fb      	strb	r3, [r7, #15]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	789a      	ldrb	r2, [r3, #2]
 800176c:	7b7b      	ldrb	r3, [r7, #13]
 800176e:	4013      	ands	r3, r2
 8001770:	b2da      	uxtb	r2, r3
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	4313      	orrs	r3, r2
 8001776:	73fb      	strb	r3, [r7, #15]
 8001778:	7bfb      	ldrb	r3, [r7, #15]
 800177a:	011b      	lsls	r3, r3, #4
 800177c:	73fb      	strb	r3, [r7, #15]
 800177e:	4a17      	ldr	r2, [pc, #92]	; (80017dc <NVIC_Init+0xc0>)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4413      	add	r3, r2
 8001786:	7bfa      	ldrb	r2, [r7, #15]
 8001788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	f003 031f 	and.w	r3, r3, #31
 8001794:	4911      	ldr	r1, [pc, #68]	; (80017dc <NVIC_Init+0xc0>)
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	7812      	ldrb	r2, [r2, #0]
 800179a:	0952      	lsrs	r2, r2, #5
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	4610      	mov	r0, r2
 80017a0:	2201      	movs	r2, #1
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
 80017aa:	e00f      	b.n	80017cc <NVIC_Init+0xb0>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	f003 031f 	and.w	r3, r3, #31
 80017b4:	4909      	ldr	r1, [pc, #36]	; (80017dc <NVIC_Init+0xc0>)
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	7812      	ldrb	r2, [r2, #0]
 80017ba:	0952      	lsrs	r2, r2, #5
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	4610      	mov	r0, r2
 80017c0:	2201      	movs	r2, #1
 80017c2:	409a      	lsls	r2, r3
 80017c4:	f100 0320 	add.w	r3, r0, #32
 80017c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00
 80017dc:	e000e100 	.word	0xe000e100

080017e0 <EXTI_Init>:
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	4b34      	ldr	r3, [pc, #208]	; (80018c0 <EXTI_Init+0xe0>)
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	799b      	ldrb	r3, [r3, #6]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d04f      	beq.n	8001898 <EXTI_Init+0xb8>
 80017f8:	4b31      	ldr	r3, [pc, #196]	; (80018c0 <EXTI_Init+0xe0>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	43db      	mvns	r3, r3
 8001802:	492f      	ldr	r1, [pc, #188]	; (80018c0 <EXTI_Init+0xe0>)
 8001804:	4013      	ands	r3, r2
 8001806:	600b      	str	r3, [r1, #0]
 8001808:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <EXTI_Init+0xe0>)
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	43db      	mvns	r3, r3
 8001812:	492b      	ldr	r1, [pc, #172]	; (80018c0 <EXTI_Init+0xe0>)
 8001814:	4013      	ands	r3, r2
 8001816:	604b      	str	r3, [r1, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	791b      	ldrb	r3, [r3, #4]
 800181c:	461a      	mov	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4413      	add	r3, r2
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6819      	ldr	r1, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	430a      	orrs	r2, r1
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <EXTI_Init+0xe0>)
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	43db      	mvns	r3, r3
 800183c:	4920      	ldr	r1, [pc, #128]	; (80018c0 <EXTI_Init+0xe0>)
 800183e:	4013      	ands	r3, r2
 8001840:	608b      	str	r3, [r1, #8]
 8001842:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <EXTI_Init+0xe0>)
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	43db      	mvns	r3, r3
 800184c:	491c      	ldr	r1, [pc, #112]	; (80018c0 <EXTI_Init+0xe0>)
 800184e:	4013      	ands	r3, r2
 8001850:	60cb      	str	r3, [r1, #12]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	795b      	ldrb	r3, [r3, #5]
 8001856:	2b10      	cmp	r3, #16
 8001858:	d10e      	bne.n	8001878 <EXTI_Init+0x98>
 800185a:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <EXTI_Init+0xe0>)
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4917      	ldr	r1, [pc, #92]	; (80018c0 <EXTI_Init+0xe0>)
 8001864:	4313      	orrs	r3, r2
 8001866:	608b      	str	r3, [r1, #8]
 8001868:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <EXTI_Init+0xe0>)
 800186a:	68da      	ldr	r2, [r3, #12]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4913      	ldr	r1, [pc, #76]	; (80018c0 <EXTI_Init+0xe0>)
 8001872:	4313      	orrs	r3, r2
 8001874:	60cb      	str	r3, [r1, #12]
 8001876:	e01d      	b.n	80018b4 <EXTI_Init+0xd4>
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <EXTI_Init+0xe0>)
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	795b      	ldrb	r3, [r3, #5]
 8001880:	461a      	mov	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	4413      	add	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6819      	ldr	r1, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	430a      	orrs	r2, r1
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	e00d      	b.n	80018b4 <EXTI_Init+0xd4>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	791b      	ldrb	r3, [r3, #4]
 800189c:	461a      	mov	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4413      	add	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6819      	ldr	r1, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	43da      	mvns	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	400a      	ands	r2, r1
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	40013c00 	.word	0x40013c00

080018c4 <EXTI_GetFlagStatus>:
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	2300      	movs	r3, #0
 80018ce:	73fb      	strb	r3, [r7, #15]
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <EXTI_GetFlagStatus+0x30>)
 80018d2:	695a      	ldr	r2, [r3, #20]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d002      	beq.n	80018e2 <EXTI_GetFlagStatus+0x1e>
 80018dc:	2301      	movs	r3, #1
 80018de:	73fb      	strb	r3, [r7, #15]
 80018e0:	e001      	b.n	80018e6 <EXTI_GetFlagStatus+0x22>
 80018e2:	2300      	movs	r3, #0
 80018e4:	73fb      	strb	r3, [r7, #15]
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	4618      	mov	r0, r3
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	40013c00 	.word	0x40013c00

080018f8 <EXTI_ClearITPendingBit>:
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	4a04      	ldr	r2, [pc, #16]	; (8001914 <EXTI_ClearITPendingBit+0x1c>)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6153      	str	r3, [r2, #20]
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40013c00 	.word	0x40013c00

08001918 <GPIO_Init>:
 8001918:	b480      	push	{r7}
 800191a:	b087      	sub	sp, #28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	e076      	b.n	8001a22 <GPIO_Init+0x10a>
 8001934:	2201      	movs	r2, #1
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4013      	ands	r3, r2
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	429a      	cmp	r2, r3
 800194e:	d165      	bne.n	8001a1c <GPIO_Init+0x104>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	2103      	movs	r1, #3
 800195a:	fa01 f303 	lsl.w	r3, r1, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	401a      	ands	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	791b      	ldrb	r3, [r3, #4]
 800196e:	4619      	mov	r1, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	fa01 f303 	lsl.w	r3, r1, r3
 8001978:	431a      	orrs	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	791b      	ldrb	r3, [r3, #4]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d003      	beq.n	800198e <GPIO_Init+0x76>
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	791b      	ldrb	r3, [r3, #4]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d12e      	bne.n	80019ec <GPIO_Init+0xd4>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689a      	ldr	r2, [r3, #8]
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	2103      	movs	r1, #3
 8001998:	fa01 f303 	lsl.w	r3, r1, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	401a      	ands	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	795b      	ldrb	r3, [r3, #5]
 80019ac:	4619      	mov	r1, r3
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	fa01 f303 	lsl.w	r3, r1, r3
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	4619      	mov	r1, r3
 80019c6:	2301      	movs	r3, #1
 80019c8:	408b      	lsls	r3, r1
 80019ca:	43db      	mvns	r3, r3
 80019cc:	401a      	ands	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	7992      	ldrb	r2, [r2, #6]
 80019da:	4611      	mov	r1, r2
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	b292      	uxth	r2, r2
 80019e0:	fa01 f202 	lsl.w	r2, r1, r2
 80019e4:	b292      	uxth	r2, r2
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	2103      	movs	r1, #3
 80019f8:	fa01 f303 	lsl.w	r3, r1, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	401a      	ands	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	60da      	str	r2, [r3, #12]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	79db      	ldrb	r3, [r3, #7]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	60da      	str	r2, [r3, #12]
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	2b0f      	cmp	r3, #15
 8001a26:	d985      	bls.n	8001934 <GPIO_Init+0x1c>
 8001a28:	bf00      	nop
 8001a2a:	371c      	adds	r7, #28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <GPIO_WriteBit>:
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	807b      	strh	r3, [r7, #2]
 8001a40:	4613      	mov	r3, r2
 8001a42:	707b      	strb	r3, [r7, #1]
 8001a44:	787b      	ldrb	r3, [r7, #1]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <GPIO_WriteBit+0x1e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	887a      	ldrh	r2, [r7, #2]
 8001a4e:	831a      	strh	r2, [r3, #24]
 8001a50:	e002      	b.n	8001a58 <GPIO_WriteBit+0x24>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	887a      	ldrh	r2, [r7, #2]
 8001a56:	835a      	strh	r2, [r3, #26]
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <RCC_GetClocksFreq>:
 8001a64:	b480      	push	{r7}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61bb      	str	r3, [r7, #24]
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	2300      	movs	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]
 8001a78:	2302      	movs	r3, #2
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	2302      	movs	r3, #2
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	4b47      	ldr	r3, [pc, #284]	; (8001ba4 <RCC_GetClocksFreq+0x140>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	61bb      	str	r3, [r7, #24]
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d007      	beq.n	8001aa4 <RCC_GetClocksFreq+0x40>
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d009      	beq.n	8001aac <RCC_GetClocksFreq+0x48>
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d13d      	bne.n	8001b18 <RCC_GetClocksFreq+0xb4>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a42      	ldr	r2, [pc, #264]	; (8001ba8 <RCC_GetClocksFreq+0x144>)
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	e03d      	b.n	8001b20 <RCC_GetClocksFreq+0xbc>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a41      	ldr	r2, [pc, #260]	; (8001bac <RCC_GetClocksFreq+0x148>)
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	e039      	b.n	8001b20 <RCC_GetClocksFreq+0xbc>
 8001aac:	4b3d      	ldr	r3, [pc, #244]	; (8001ba4 <RCC_GetClocksFreq+0x140>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	0d9b      	lsrs	r3, r3, #22
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	4b3a      	ldr	r3, [pc, #232]	; (8001ba4 <RCC_GetClocksFreq+0x140>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00c      	beq.n	8001ae2 <RCC_GetClocksFreq+0x7e>
 8001ac8:	4a38      	ldr	r2, [pc, #224]	; (8001bac <RCC_GetClocksFreq+0x148>)
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad0:	4a34      	ldr	r2, [pc, #208]	; (8001ba4 <RCC_GetClocksFreq+0x140>)
 8001ad2:	6852      	ldr	r2, [r2, #4]
 8001ad4:	0992      	lsrs	r2, r2, #6
 8001ad6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ada:	fb02 f303 	mul.w	r3, r2, r3
 8001ade:	61fb      	str	r3, [r7, #28]
 8001ae0:	e00b      	b.n	8001afa <RCC_GetClocksFreq+0x96>
 8001ae2:	4a31      	ldr	r2, [pc, #196]	; (8001ba8 <RCC_GetClocksFreq+0x144>)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aea:	4a2e      	ldr	r2, [pc, #184]	; (8001ba4 <RCC_GetClocksFreq+0x140>)
 8001aec:	6852      	ldr	r2, [r2, #4]
 8001aee:	0992      	lsrs	r2, r2, #6
 8001af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001af4:	fb02 f303 	mul.w	r3, r2, r3
 8001af8:	61fb      	str	r3, [r7, #28]
 8001afa:	4b2a      	ldr	r3, [pc, #168]	; (8001ba4 <RCC_GetClocksFreq+0x140>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	0c1b      	lsrs	r3, r3, #16
 8001b00:	f003 0303 	and.w	r3, r3, #3
 8001b04:	3301      	adds	r3, #1
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	69fa      	ldr	r2, [r7, #28]
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	e003      	b.n	8001b20 <RCC_GetClocksFreq+0xbc>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a23      	ldr	r2, [pc, #140]	; (8001ba8 <RCC_GetClocksFreq+0x144>)
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	bf00      	nop
 8001b20:	4b20      	ldr	r3, [pc, #128]	; (8001ba4 <RCC_GetClocksFreq+0x140>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b28:	61bb      	str	r3, [r7, #24]
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	091b      	lsrs	r3, r3, #4
 8001b2e:	61bb      	str	r3, [r7, #24]
 8001b30:	4a1f      	ldr	r2, [pc, #124]	; (8001bb0 <RCC_GetClocksFreq+0x14c>)
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	4413      	add	r3, r2
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	40da      	lsrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <RCC_GetClocksFreq+0x140>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001b50:	61bb      	str	r3, [r7, #24]
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	0a9b      	lsrs	r3, r3, #10
 8001b56:	61bb      	str	r3, [r7, #24]
 8001b58:	4a15      	ldr	r2, [pc, #84]	; (8001bb0 <RCC_GetClocksFreq+0x14c>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	40da      	lsrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <RCC_GetClocksFreq+0x140>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001b78:	61bb      	str	r3, [r7, #24]
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	0b5b      	lsrs	r3, r3, #13
 8001b7e:	61bb      	str	r3, [r7, #24]
 8001b80:	4a0b      	ldr	r2, [pc, #44]	; (8001bb0 <RCC_GetClocksFreq+0x14c>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	4413      	add	r3, r2
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	40da      	lsrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	60da      	str	r2, [r3, #12]
 8001b98:	bf00      	nop
 8001b9a:	3724      	adds	r7, #36	; 0x24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	00f42400 	.word	0x00f42400
 8001bac:	017d7840 	.word	0x017d7840
 8001bb0:	20000584 	.word	0x20000584

08001bb4 <RCC_AHB1PeriphClockCmd>:
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	70fb      	strb	r3, [r7, #3]
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d006      	beq.n	8001bd4 <RCC_AHB1PeriphClockCmd+0x20>
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bca:	4909      	ldr	r1, [pc, #36]	; (8001bf0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	630b      	str	r3, [r1, #48]	; 0x30
 8001bd2:	e006      	b.n	8001be2 <RCC_AHB1PeriphClockCmd+0x2e>
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	4904      	ldr	r1, [pc, #16]	; (8001bf0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	630b      	str	r3, [r1, #48]	; 0x30
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800

08001bf4 <RCC_APB2PeriphClockCmd>:
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	70fb      	strb	r3, [r7, #3]
 8001c00:	78fb      	ldrb	r3, [r7, #3]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d006      	beq.n	8001c14 <RCC_APB2PeriphClockCmd+0x20>
 8001c06:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <RCC_APB2PeriphClockCmd+0x3c>)
 8001c08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c0a:	4909      	ldr	r1, [pc, #36]	; (8001c30 <RCC_APB2PeriphClockCmd+0x3c>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	644b      	str	r3, [r1, #68]	; 0x44
 8001c12:	e006      	b.n	8001c22 <RCC_APB2PeriphClockCmd+0x2e>
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <RCC_APB2PeriphClockCmd+0x3c>)
 8001c16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	4904      	ldr	r1, [pc, #16]	; (8001c30 <RCC_APB2PeriphClockCmd+0x3c>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	644b      	str	r3, [r1, #68]	; 0x44
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800

08001c34 <RCC_APB2PeriphResetCmd>:
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	70fb      	strb	r3, [r7, #3]
 8001c40:	78fb      	ldrb	r3, [r7, #3]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d006      	beq.n	8001c54 <RCC_APB2PeriphResetCmd+0x20>
 8001c46:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <RCC_APB2PeriphResetCmd+0x3c>)
 8001c48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c4a:	4909      	ldr	r1, [pc, #36]	; (8001c70 <RCC_APB2PeriphResetCmd+0x3c>)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	624b      	str	r3, [r1, #36]	; 0x24
 8001c52:	e006      	b.n	8001c62 <RCC_APB2PeriphResetCmd+0x2e>
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <RCC_APB2PeriphResetCmd+0x3c>)
 8001c56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	4904      	ldr	r1, [pc, #16]	; (8001c70 <RCC_APB2PeriphResetCmd+0x3c>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	624b      	str	r3, [r1, #36]	; 0x24
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800

08001c74 <SYSCFG_EXTILineConfig>:
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	460a      	mov	r2, r1
 8001c7e:	71fb      	strb	r3, [r7, #7]
 8001c80:	4613      	mov	r3, r2
 8001c82:	71bb      	strb	r3, [r7, #6]
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	79bb      	ldrb	r3, [r7, #6]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	220f      	movs	r2, #15
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	4a16      	ldr	r2, [pc, #88]	; (8001cf4 <SYSCFG_EXTILineConfig+0x80>)
 8001c9a:	79bb      	ldrb	r3, [r7, #6]
 8001c9c:	089b      	lsrs	r3, r3, #2
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	4812      	ldr	r0, [pc, #72]	; (8001cf4 <SYSCFG_EXTILineConfig+0x80>)
 8001cac:	79b9      	ldrb	r1, [r7, #6]
 8001cae:	0889      	lsrs	r1, r1, #2
 8001cb0:	b2c9      	uxtb	r1, r1
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	1c8b      	adds	r3, r1, #2
 8001cb6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8001cba:	4a0e      	ldr	r2, [pc, #56]	; (8001cf4 <SYSCFG_EXTILineConfig+0x80>)
 8001cbc:	79bb      	ldrb	r3, [r7, #6]
 8001cbe:	089b      	lsrs	r3, r3, #2
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cc8:	79f9      	ldrb	r1, [r7, #7]
 8001cca:	79bb      	ldrb	r3, [r7, #6]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	4807      	ldr	r0, [pc, #28]	; (8001cf4 <SYSCFG_EXTILineConfig+0x80>)
 8001cd8:	79b9      	ldrb	r1, [r7, #6]
 8001cda:	0889      	lsrs	r1, r1, #2
 8001cdc:	b2c9      	uxtb	r1, r1
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	1c8b      	adds	r3, r1, #2
 8001ce2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8001ce6:	bf00      	nop
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40013800 	.word	0x40013800

08001cf8 <NVIC_SetPriority>:
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	6039      	str	r1, [r7, #0]
 8001d02:	71fb      	strb	r3, [r7, #7]
 8001d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	da0b      	bge.n	8001d24 <NVIC_SetPriority+0x2c>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	490c      	ldr	r1, [pc, #48]	; (8001d44 <NVIC_SetPriority+0x4c>)
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	f003 030f 	and.w	r3, r3, #15
 8001d18:	3b04      	subs	r3, #4
 8001d1a:	0112      	lsls	r2, r2, #4
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	440b      	add	r3, r1
 8001d20:	761a      	strb	r2, [r3, #24]
 8001d22:	e009      	b.n	8001d38 <NVIC_SetPriority+0x40>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	4907      	ldr	r1, [pc, #28]	; (8001d48 <NVIC_SetPriority+0x50>)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	0112      	lsls	r2, r2, #4
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	440b      	add	r3, r1
 8001d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00
 8001d48:	e000e100 	.word	0xe000e100

08001d4c <SysTick_Config>:
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d5c:	d301      	bcc.n	8001d62 <SysTick_Config+0x16>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e00f      	b.n	8001d82 <SysTick_Config+0x36>
 8001d62:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <SysTick_Config+0x40>)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	6053      	str	r3, [r2, #4]
 8001d6a:	210f      	movs	r1, #15
 8001d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d70:	f7ff ffc2 	bl	8001cf8 <NVIC_SetPriority>
 8001d74:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <SysTick_Config+0x40>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <SysTick_Config+0x40>)
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	2300      	movs	r3, #0
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	e000e010 	.word	0xe000e010

08001d90 <TimerInit>:
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	463b      	mov	r3, r7
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fe63 	bl	8001a64 <RCC_GetClocksFreq>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	4a0a      	ldr	r2, [pc, #40]	; (8001dcc <TimerInit+0x3c>)
 8001da2:	fba2 2303 	umull	r2, r3, r2, r3
 8001da6:	099b      	lsrs	r3, r3, #6
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ffcf 	bl	8001d4c <SysTick_Config>
 8001dae:	2101      	movs	r1, #1
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295
 8001db4:	f7ff ffa0 	bl	8001cf8 <NVIC_SetPriority>
 8001db8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4804      	ldr	r0, [pc, #16]	; (8001dd0 <TimerInit+0x40>)
 8001dc0:	f002 f8b6 	bl	8003f30 <memsetl>
 8001dc4:	bf00      	nop
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	10624dd3 	.word	0x10624dd3
 8001dd0:	20000bdc 	.word	0x20000bdc

08001dd4 <TimerStart>:
 8001dd4:	b590      	push	{r4, r7, lr}
 8001dd6:	b087      	sub	sp, #28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	4613      	mov	r3, r2
 8001de2:	71fb      	strb	r3, [r7, #7]
 8001de4:	2300      	movs	r3, #0
 8001de6:	75fb      	strb	r3, [r7, #23]
 8001de8:	e04c      	b.n	8001e84 <TimerStart+0xb0>
 8001dea:	7dfa      	ldrb	r2, [r7, #23]
 8001dec:	4929      	ldr	r1, [pc, #164]	; (8001e94 <TimerStart+0xc0>)
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	440b      	add	r3, r1
 8001df8:	3310      	adds	r3, #16
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d13e      	bne.n	8001e7e <TimerStart+0xaa>
 8001e00:	7dfa      	ldrb	r2, [r7, #23]
 8001e02:	4924      	ldr	r1, [pc, #144]	; (8001e94 <TimerStart+0xc0>)
 8001e04:	4613      	mov	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	4413      	add	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	440b      	add	r3, r1
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	7dfa      	ldrb	r2, [r7, #23]
 8001e14:	491f      	ldr	r1, [pc, #124]	; (8001e94 <TimerStart+0xc0>)
 8001e16:	4613      	mov	r3, r2
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	4413      	add	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	440b      	add	r3, r1
 8001e20:	3310      	adds	r3, #16
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	7dfa      	ldrb	r2, [r7, #23]
 8001e28:	491a      	ldr	r1, [pc, #104]	; (8001e94 <TimerStart+0xc0>)
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4413      	add	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	440b      	add	r3, r1
 8001e34:	330c      	adds	r3, #12
 8001e36:	79fa      	ldrb	r2, [r7, #7]
 8001e38:	701a      	strb	r2, [r3, #0]
 8001e3a:	7dfa      	ldrb	r2, [r7, #23]
 8001e3c:	4915      	ldr	r1, [pc, #84]	; (8001e94 <TimerStart+0xc0>)
 8001e3e:	4613      	mov	r3, r2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	4413      	add	r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	440b      	add	r3, r1
 8001e48:	3314      	adds	r3, #20
 8001e4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	7dfc      	ldrb	r4, [r7, #23]
 8001e50:	f000 f872 	bl	8001f38 <GetMilSecTick>
 8001e54:	4601      	mov	r1, r0
 8001e56:	4a0f      	ldr	r2, [pc, #60]	; (8001e94 <TimerStart+0xc0>)
 8001e58:	4623      	mov	r3, r4
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	4423      	add	r3, r4
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4413      	add	r3, r2
 8001e62:	3304      	adds	r3, #4
 8001e64:	6019      	str	r1, [r3, #0]
 8001e66:	7dfa      	ldrb	r2, [r7, #23]
 8001e68:	490a      	ldr	r1, [pc, #40]	; (8001e94 <TimerStart+0xc0>)
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	4413      	add	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	440b      	add	r3, r1
 8001e74:	3308      	adds	r3, #8
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	7dfb      	ldrb	r3, [r7, #23]
 8001e7c:	e006      	b.n	8001e8c <TimerStart+0xb8>
 8001e7e:	7dfb      	ldrb	r3, [r7, #23]
 8001e80:	3301      	adds	r3, #1
 8001e82:	75fb      	strb	r3, [r7, #23]
 8001e84:	7dfb      	ldrb	r3, [r7, #23]
 8001e86:	2b0f      	cmp	r3, #15
 8001e88:	d9af      	bls.n	8001dea <TimerStart+0x16>
 8001e8a:	23ff      	movs	r3, #255	; 0xff
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	371c      	adds	r7, #28
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd90      	pop	{r4, r7, pc}
 8001e94:	20000bdc 	.word	0x20000bdc

08001e98 <TimerStop>:
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	71fb      	strb	r3, [r7, #7]
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	2b0f      	cmp	r3, #15
 8001ea6:	d80a      	bhi.n	8001ebe <TimerStop+0x26>
 8001ea8:	79fa      	ldrb	r2, [r7, #7]
 8001eaa:	4922      	ldr	r1, [pc, #136]	; (8001f34 <TimerStop+0x9c>)
 8001eac:	4613      	mov	r3, r2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	4413      	add	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	440b      	add	r3, r1
 8001eb6:	3310      	adds	r3, #16
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <TimerStop+0x2a>
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e031      	b.n	8001f26 <TimerStop+0x8e>
 8001ec2:	79fa      	ldrb	r2, [r7, #7]
 8001ec4:	491b      	ldr	r1, [pc, #108]	; (8001f34 <TimerStop+0x9c>)
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4413      	add	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	440b      	add	r3, r1
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	79fa      	ldrb	r2, [r7, #7]
 8001ed6:	4917      	ldr	r1, [pc, #92]	; (8001f34 <TimerStop+0x9c>)
 8001ed8:	4613      	mov	r3, r2
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	4413      	add	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	440b      	add	r3, r1
 8001ee2:	3310      	adds	r3, #16
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	79fa      	ldrb	r2, [r7, #7]
 8001eea:	4912      	ldr	r1, [pc, #72]	; (8001f34 <TimerStop+0x9c>)
 8001eec:	4613      	mov	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	440b      	add	r3, r1
 8001ef6:	330c      	adds	r3, #12
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]
 8001efc:	79fa      	ldrb	r2, [r7, #7]
 8001efe:	490d      	ldr	r1, [pc, #52]	; (8001f34 <TimerStop+0x9c>)
 8001f00:	4613      	mov	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4413      	add	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	440b      	add	r3, r1
 8001f0a:	3308      	adds	r3, #8
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	79fa      	ldrb	r2, [r7, #7]
 8001f12:	4908      	ldr	r1, [pc, #32]	; (8001f34 <TimerStop+0x9c>)
 8001f14:	4613      	mov	r3, r2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	4413      	add	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	440b      	add	r3, r1
 8001f1e:	3304      	adds	r3, #4
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	2301      	movs	r3, #1
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20000bdc 	.word	0x20000bdc

08001f38 <GetMilSecTick>:
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	4b03      	ldr	r3, [pc, #12]	; (8001f4c <GetMilSecTick+0x14>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	20000d5c 	.word	0x20000d5c

08001f50 <processTimerScheduler>:
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	2300      	movs	r3, #0
 8001f58:	73fb      	strb	r3, [r7, #15]
 8001f5a:	e068      	b.n	800202e <processTimerScheduler+0xde>
 8001f5c:	7bfa      	ldrb	r2, [r7, #15]
 8001f5e:	4937      	ldr	r1, [pc, #220]	; (800203c <processTimerScheduler+0xec>)
 8001f60:	4613      	mov	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	4413      	add	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	440b      	add	r3, r1
 8001f6a:	3310      	adds	r3, #16
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d05a      	beq.n	8002028 <processTimerScheduler+0xd8>
 8001f72:	7bfb      	ldrb	r3, [r7, #15]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 f863 	bl	8002040 <TimeExpired>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d053      	beq.n	8002028 <processTimerScheduler+0xd8>
 8001f80:	7bfa      	ldrb	r2, [r7, #15]
 8001f82:	492e      	ldr	r1, [pc, #184]	; (800203c <processTimerScheduler+0xec>)
 8001f84:	4613      	mov	r3, r2
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4413      	add	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	440b      	add	r3, r1
 8001f8e:	3310      	adds	r3, #16
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	7bfa      	ldrb	r2, [r7, #15]
 8001f96:	4929      	ldr	r1, [pc, #164]	; (800203c <processTimerScheduler+0xec>)
 8001f98:	4613      	mov	r3, r2
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	4413      	add	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	440b      	add	r3, r1
 8001fa2:	3314      	adds	r3, #20
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	607b      	str	r3, [r7, #4]
 8001fa8:	7bfa      	ldrb	r2, [r7, #15]
 8001faa:	4924      	ldr	r1, [pc, #144]	; (800203c <processTimerScheduler+0xec>)
 8001fac:	4613      	mov	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	440b      	add	r3, r1
 8001fb6:	330c      	adds	r3, #12
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2bff      	cmp	r3, #255	; 0xff
 8001fbe:	d020      	beq.n	8002002 <processTimerScheduler+0xb2>
 8001fc0:	7bfa      	ldrb	r2, [r7, #15]
 8001fc2:	491e      	ldr	r1, [pc, #120]	; (800203c <processTimerScheduler+0xec>)
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4413      	add	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	440b      	add	r3, r1
 8001fce:	330c      	adds	r3, #12
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d014      	beq.n	8002002 <processTimerScheduler+0xb2>
 8001fd8:	7bfa      	ldrb	r2, [r7, #15]
 8001fda:	4918      	ldr	r1, [pc, #96]	; (800203c <processTimerScheduler+0xec>)
 8001fdc:	4613      	mov	r3, r2
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	4413      	add	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	440b      	add	r3, r1
 8001fe6:	330c      	adds	r3, #12
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b2d8      	uxtb	r0, r3
 8001ff0:	4912      	ldr	r1, [pc, #72]	; (800203c <processTimerScheduler+0xec>)
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	4413      	add	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	440b      	add	r3, r1
 8001ffc:	330c      	adds	r3, #12
 8001ffe:	4602      	mov	r2, r0
 8002000:	701a      	strb	r2, [r3, #0]
 8002002:	7bfa      	ldrb	r2, [r7, #15]
 8002004:	490d      	ldr	r1, [pc, #52]	; (800203c <processTimerScheduler+0xec>)
 8002006:	4613      	mov	r3, r2
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	4413      	add	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	440b      	add	r3, r1
 8002010:	330c      	adds	r3, #12
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d103      	bne.n	8002022 <processTimerScheduler+0xd2>
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff3b 	bl	8001e98 <TimerStop>
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	4798      	blx	r3
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	3301      	adds	r3, #1
 800202c:	73fb      	strb	r3, [r7, #15]
 800202e:	7bfb      	ldrb	r3, [r7, #15]
 8002030:	2b0f      	cmp	r3, #15
 8002032:	d993      	bls.n	8001f5c <processTimerScheduler+0xc>
 8002034:	bf00      	nop
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20000bdc 	.word	0x20000bdc

08002040 <TimeExpired>:
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	b672      	cpsid	i
 8002050:	f7ff ff72 	bl	8001f38 <GetMilSecTick>
 8002054:	60b8      	str	r0, [r7, #8]
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	2b0f      	cmp	r3, #15
 800205a:	d80a      	bhi.n	8002072 <TimeExpired+0x32>
 800205c:	79fa      	ldrb	r2, [r7, #7]
 800205e:	492a      	ldr	r1, [pc, #168]	; (8002108 <TimeExpired+0xc8>)
 8002060:	4613      	mov	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4413      	add	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	440b      	add	r3, r1
 800206a:	3310      	adds	r3, #16
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d102      	bne.n	8002078 <TimeExpired+0x38>
 8002072:	b662      	cpsie	i
 8002074:	2300      	movs	r3, #0
 8002076:	e042      	b.n	80020fe <TimeExpired+0xbe>
 8002078:	79fa      	ldrb	r2, [r7, #7]
 800207a:	4923      	ldr	r1, [pc, #140]	; (8002108 <TimeExpired+0xc8>)
 800207c:	4613      	mov	r3, r2
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	4413      	add	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	440b      	add	r3, r1
 8002086:	3304      	adds	r3, #4
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	429a      	cmp	r2, r3
 800208e:	d30c      	bcc.n	80020aa <TimeExpired+0x6a>
 8002090:	79fa      	ldrb	r2, [r7, #7]
 8002092:	491d      	ldr	r1, [pc, #116]	; (8002108 <TimeExpired+0xc8>)
 8002094:	4613      	mov	r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	440b      	add	r3, r1
 800209e:	3304      	adds	r3, #4
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	e00e      	b.n	80020c8 <TimeExpired+0x88>
 80020aa:	79fa      	ldrb	r2, [r7, #7]
 80020ac:	4916      	ldr	r1, [pc, #88]	; (8002108 <TimeExpired+0xc8>)
 80020ae:	4613      	mov	r3, r2
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	4413      	add	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	440b      	add	r3, r1
 80020b8:	3304      	adds	r3, #4
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	79fa      	ldrb	r2, [r7, #7]
 80020ca:	490f      	ldr	r1, [pc, #60]	; (8002108 <TimeExpired+0xc8>)
 80020cc:	4613      	mov	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4413      	add	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	440b      	add	r3, r1
 80020d6:	3308      	adds	r3, #8
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d202      	bcs.n	80020e6 <TimeExpired+0xa6>
 80020e0:	b662      	cpsie	i
 80020e2:	2300      	movs	r3, #0
 80020e4:	e00b      	b.n	80020fe <TimeExpired+0xbe>
 80020e6:	79fa      	ldrb	r2, [r7, #7]
 80020e8:	4907      	ldr	r1, [pc, #28]	; (8002108 <TimeExpired+0xc8>)
 80020ea:	4613      	mov	r3, r2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	4413      	add	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	440b      	add	r3, r1
 80020f4:	3304      	adds	r3, #4
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	b662      	cpsie	i
 80020fc:	2301      	movs	r3, #1
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000bdc 	.word	0x20000bdc

0800210c <SysTick_Handler>:
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
 8002110:	4b04      	ldr	r3, [pc, #16]	; (8002124 <SysTick_Handler+0x18>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	3301      	adds	r3, #1
 8002116:	4a03      	ldr	r2, [pc, #12]	; (8002124 <SysTick_Handler+0x18>)
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	bf00      	nop
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	20000d5c 	.word	0x20000d5c

08002128 <LightSensor_Init>:
 8002128:	b580      	push	{r7, lr}
 800212a:	b09e      	sub	sp, #120	; 0x78
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
 8002132:	2101      	movs	r1, #1
 8002134:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002138:	f7ff fd5c 	bl	8001bf4 <RCC_APB2PeriphClockCmd>
 800213c:	2101      	movs	r1, #1
 800213e:	2004      	movs	r0, #4
 8002140:	f7ff fd38 	bl	8001bb4 <RCC_AHB1PeriphClockCmd>
 8002144:	2101      	movs	r1, #1
 8002146:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800214a:	f7ff fd33 	bl	8001bb4 <RCC_AHB1PeriphClockCmd>
 800214e:	2320      	movs	r3, #32
 8002150:	64bb      	str	r3, [r7, #72]	; 0x48
 8002152:	2303      	movs	r3, #3
 8002154:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8002158:	2300      	movs	r3, #0
 800215a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800215e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002162:	4619      	mov	r1, r3
 8002164:	4843      	ldr	r0, [pc, #268]	; (8002274 <LightSensor_Init+0x14c>)
 8002166:	f7ff fbd7 	bl	8001918 <GPIO_Init>
 800216a:	f001 fefa 	bl	8003f62 <ADC_DeInit>
 800216e:	2300      	movs	r3, #0
 8002170:	66bb      	str	r3, [r7, #104]	; 0x68
 8002172:	2300      	movs	r3, #0
 8002174:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002176:	2300      	movs	r3, #0
 8002178:	673b      	str	r3, [r7, #112]	; 0x70
 800217a:	2300      	movs	r3, #0
 800217c:	677b      	str	r3, [r7, #116]	; 0x74
 800217e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002182:	4618      	mov	r0, r3
 8002184:	f001 ff52 	bl	800402c <ADC_CommonInit>
 8002188:	2300      	movs	r3, #0
 800218a:	653b      	str	r3, [r7, #80]	; 0x50
 800218c:	2300      	movs	r3, #0
 800218e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8002192:	2301      	movs	r3, #1
 8002194:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8002198:	2300      	movs	r3, #0
 800219a:	65bb      	str	r3, [r7, #88]	; 0x58
 800219c:	2300      	movs	r3, #0
 800219e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021a0:	2300      	movs	r3, #0
 80021a2:	663b      	str	r3, [r7, #96]	; 0x60
 80021a4:	2301      	movs	r3, #1
 80021a6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 80021aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80021ae:	4619      	mov	r1, r3
 80021b0:	4831      	ldr	r0, [pc, #196]	; (8002278 <LightSensor_Init+0x150>)
 80021b2:	f001 fee5 	bl	8003f80 <ADC_Init>
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d110      	bne.n	80021de <LightSensor_Init+0xb6>
 80021bc:	2101      	movs	r1, #1
 80021be:	482e      	ldr	r0, [pc, #184]	; (8002278 <LightSensor_Init+0x150>)
 80021c0:	f002 f852 	bl	8004268 <ADC_EOCOnEachRegularChannelCmd>
 80021c4:	2100      	movs	r1, #0
 80021c6:	482c      	ldr	r0, [pc, #176]	; (8002278 <LightSensor_Init+0x150>)
 80021c8:	f002 f86a 	bl	80042a0 <ADC_ContinuousModeCmd>
 80021cc:	2101      	movs	r1, #1
 80021ce:	482a      	ldr	r0, [pc, #168]	; (8002278 <LightSensor_Init+0x150>)
 80021d0:	f002 f882 	bl	80042d8 <ADC_DiscModeChannelCountConfig>
 80021d4:	2101      	movs	r1, #1
 80021d6:	4828      	ldr	r0, [pc, #160]	; (8002278 <LightSensor_Init+0x150>)
 80021d8:	f002 f8a0 	bl	800431c <ADC_DiscModeCmd>
 80021dc:	e036      	b.n	800224c <LightSensor_Init+0x124>
 80021de:	4827      	ldr	r0, [pc, #156]	; (800227c <LightSensor_Init+0x154>)
 80021e0:	f002 f8f0 	bl	80043c4 <DMA_DeInit>
 80021e4:	2300      	movs	r3, #0
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	4b25      	ldr	r3, [pc, #148]	; (8002280 <LightSensor_Init+0x158>)
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	4b25      	ldr	r3, [pc, #148]	; (8002284 <LightSensor_Init+0x15c>)
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	2300      	movs	r3, #0
 80021f2:	61bb      	str	r3, [r7, #24]
 80021f4:	2301      	movs	r3, #1
 80021f6:	61fb      	str	r3, [r7, #28]
 80021f8:	2300      	movs	r3, #0
 80021fa:	623b      	str	r3, [r7, #32]
 80021fc:	2300      	movs	r3, #0
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002200:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002204:	62bb      	str	r3, [r7, #40]	; 0x28
 8002206:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800220a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800220c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002210:	633b      	str	r3, [r7, #48]	; 0x30
 8002212:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002216:	637b      	str	r3, [r7, #52]	; 0x34
 8002218:	2300      	movs	r3, #0
 800221a:	63bb      	str	r3, [r7, #56]	; 0x38
 800221c:	2301      	movs	r3, #1
 800221e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002220:	2300      	movs	r3, #0
 8002222:	643b      	str	r3, [r7, #64]	; 0x40
 8002224:	2300      	movs	r3, #0
 8002226:	647b      	str	r3, [r7, #68]	; 0x44
 8002228:	f107 030c 	add.w	r3, r7, #12
 800222c:	4619      	mov	r1, r3
 800222e:	4813      	ldr	r0, [pc, #76]	; (800227c <LightSensor_Init+0x154>)
 8002230:	f002 f99c 	bl	800456c <DMA_Init>
 8002234:	2101      	movs	r1, #1
 8002236:	4811      	ldr	r0, [pc, #68]	; (800227c <LightSensor_Init+0x154>)
 8002238:	f002 f9f0 	bl	800461c <DMA_Cmd>
 800223c:	2101      	movs	r1, #1
 800223e:	480e      	ldr	r0, [pc, #56]	; (8002278 <LightSensor_Init+0x150>)
 8002240:	f002 f8a4 	bl	800438c <ADC_DMARequestAfterLastTransferCmd>
 8002244:	2101      	movs	r1, #1
 8002246:	480c      	ldr	r0, [pc, #48]	; (8002278 <LightSensor_Init+0x150>)
 8002248:	f002 f884 	bl	8004354 <ADC_DMACmd>
 800224c:	2301      	movs	r3, #1
 800224e:	2201      	movs	r2, #1
 8002250:	210f      	movs	r1, #15
 8002252:	4809      	ldr	r0, [pc, #36]	; (8002278 <LightSensor_Init+0x150>)
 8002254:	f001 ff2e 	bl	80040b4 <ADC_RegularChannelConfig>
 8002258:	2101      	movs	r1, #1
 800225a:	4807      	ldr	r0, [pc, #28]	; (8002278 <LightSensor_Init+0x150>)
 800225c:	f001 ff0e 	bl	800407c <ADC_Cmd>
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d102      	bne.n	800226c <LightSensor_Init+0x144>
 8002266:	4804      	ldr	r0, [pc, #16]	; (8002278 <LightSensor_Init+0x150>)
 8002268:	f001 ffee 	bl	8004248 <ADC_SoftwareStartConv>
 800226c:	bf00      	nop
 800226e:	3778      	adds	r7, #120	; 0x78
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40020800 	.word	0x40020800
 8002278:	40012000 	.word	0x40012000
 800227c:	40026410 	.word	0x40026410
 8002280:	4001204c 	.word	0x4001204c
 8002284:	20000d60 	.word	0x20000d60

08002288 <LightSensor_MeasureUseDMAMode>:
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
 800228c:	4b03      	ldr	r3, [pc, #12]	; (800229c <LightSensor_MeasureUseDMAMode+0x14>)
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	b29b      	uxth	r3, r3
 8002292:	4618      	mov	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	20000d60 	.word	0x20000d60

080022a0 <USART2_IRQHandler>:
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	b672      	cpsid	i
 80022a8:	f240 5125 	movw	r1, #1317	; 0x525
 80022ac:	480e      	ldr	r0, [pc, #56]	; (80022e8 <USART2_IRQHandler+0x48>)
 80022ae:	f002 f9e1 	bl	8004674 <USART_GetITStatus>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d112      	bne.n	80022de <USART2_IRQHandler+0x3e>
 80022b8:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <USART2_IRQHandler+0x4c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	607b      	str	r3, [r7, #4]
 80022be:	480a      	ldr	r0, [pc, #40]	; (80022e8 <USART2_IRQHandler+0x48>)
 80022c0:	f002 f9c8 	bl	8004654 <USART_ReceiveData>
 80022c4:	4603      	mov	r3, r0
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	70fb      	strb	r3, [r7, #3]
 80022ca:	1cfb      	adds	r3, r7, #3
 80022cc:	4619      	mov	r1, r3
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f001 fd9e 	bl	8003e10 <bufEnDat>
 80022d4:	f240 5125 	movw	r1, #1317	; 0x525
 80022d8:	4803      	ldr	r0, [pc, #12]	; (80022e8 <USART2_IRQHandler+0x48>)
 80022da:	f002 fa26 	bl	800472a <USART_ClearITPendingBit>
 80022de:	b662      	cpsie	i
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40004400 	.word	0x40004400
 80022ec:	20000d64 	.word	0x20000d64

080022f0 <delayMicroseconds>:
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <ucg_gpio_init>:
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	2101      	movs	r1, #1
 800230c:	2007      	movs	r0, #7
 800230e:	f7ff fc51 	bl	8001bb4 <RCC_AHB1PeriphClockCmd>
 8002312:	2301      	movs	r3, #1
 8002314:	713b      	strb	r3, [r7, #4]
 8002316:	2303      	movs	r3, #3
 8002318:	717b      	strb	r3, [r7, #5]
 800231a:	2300      	movs	r3, #0
 800231c:	71bb      	strb	r3, [r7, #6]
 800231e:	2300      	movs	r3, #0
 8002320:	71fb      	strb	r3, [r7, #7]
 8002322:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 8002326:	603b      	str	r3, [r7, #0]
 8002328:	463b      	mov	r3, r7
 800232a:	4619      	mov	r1, r3
 800232c:	480a      	ldr	r0, [pc, #40]	; (8002358 <ucg_gpio_init+0x54>)
 800232e:	f7ff faf3 	bl	8001918 <GPIO_Init>
 8002332:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8002336:	603b      	str	r3, [r7, #0]
 8002338:	463b      	mov	r3, r7
 800233a:	4619      	mov	r1, r3
 800233c:	4807      	ldr	r0, [pc, #28]	; (800235c <ucg_gpio_init+0x58>)
 800233e:	f7ff faeb 	bl	8001918 <GPIO_Init>
 8002342:	2380      	movs	r3, #128	; 0x80
 8002344:	603b      	str	r3, [r7, #0]
 8002346:	463b      	mov	r3, r7
 8002348:	4619      	mov	r1, r3
 800234a:	4805      	ldr	r0, [pc, #20]	; (8002360 <ucg_gpio_init+0x5c>)
 800234c:	f7ff fae4 	bl	8001918 <GPIO_Init>
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40020000 	.word	0x40020000
 800235c:	40020400 	.word	0x40020400
 8002360:	40020800 	.word	0x40020800

08002364 <ucg_com_arduino_send_generic_SW_SPI>:
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	70fb      	strb	r3, [r7, #3]
 8002370:	2308      	movs	r3, #8
 8002372:	73fb      	strb	r3, [r7, #15]
 8002374:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002378:	2b00      	cmp	r3, #0
 800237a:	da05      	bge.n	8002388 <ucg_com_arduino_send_generic_SW_SPI+0x24>
 800237c:	2201      	movs	r2, #1
 800237e:	2180      	movs	r1, #128	; 0x80
 8002380:	4814      	ldr	r0, [pc, #80]	; (80023d4 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8002382:	f7ff fb57 	bl	8001a34 <GPIO_WriteBit>
 8002386:	e004      	b.n	8002392 <ucg_com_arduino_send_generic_SW_SPI+0x2e>
 8002388:	2200      	movs	r2, #0
 800238a:	2180      	movs	r1, #128	; 0x80
 800238c:	4811      	ldr	r0, [pc, #68]	; (80023d4 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 800238e:	f7ff fb51 	bl	8001a34 <GPIO_WriteBit>
 8002392:	2001      	movs	r0, #1
 8002394:	f7ff ffac 	bl	80022f0 <delayMicroseconds>
 8002398:	2201      	movs	r2, #1
 800239a:	2120      	movs	r1, #32
 800239c:	480d      	ldr	r0, [pc, #52]	; (80023d4 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 800239e:	f7ff fb49 	bl	8001a34 <GPIO_WriteBit>
 80023a2:	2001      	movs	r0, #1
 80023a4:	f7ff ffa4 	bl	80022f0 <delayMicroseconds>
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	73fb      	strb	r3, [r7, #15]
 80023ae:	2200      	movs	r2, #0
 80023b0:	2120      	movs	r1, #32
 80023b2:	4808      	ldr	r0, [pc, #32]	; (80023d4 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 80023b4:	f7ff fb3e 	bl	8001a34 <GPIO_WriteBit>
 80023b8:	2001      	movs	r0, #1
 80023ba:	f7ff ff99 	bl	80022f0 <delayMicroseconds>
 80023be:	78fb      	ldrb	r3, [r7, #3]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	70fb      	strb	r3, [r7, #3]
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1d4      	bne.n	8002374 <ucg_com_arduino_send_generic_SW_SPI+0x10>
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40020000 	.word	0x40020000

080023d8 <ucg_com_arduino_generic_SW_SPI>:
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	460b      	mov	r3, r1
 80023e4:	817b      	strh	r3, [r7, #10]
 80023e6:	4613      	mov	r3, r2
 80023e8:	813b      	strh	r3, [r7, #8]
 80023ea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80023ee:	3b0a      	subs	r3, #10
 80023f0:	2b0b      	cmp	r3, #11
 80023f2:	f200 80dc 	bhi.w	80025ae <ucg_com_arduino_generic_SW_SPI+0x1d6>
 80023f6:	a201      	add	r2, pc, #4	; (adr r2, 80023fc <ucg_com_arduino_generic_SW_SPI+0x24>)
 80023f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023fc:	0800242d 	.word	0x0800242d
 8002400:	080025af 	.word	0x080025af
 8002404:	0800247f 	.word	0x0800247f
 8002408:	08002489 	.word	0x08002489
 800240c:	08002499 	.word	0x08002499
 8002410:	080024a9 	.word	0x080024a9
 8002414:	080024bb 	.word	0x080024bb
 8002418:	080024db 	.word	0x080024db
 800241c:	08002503 	.word	0x08002503
 8002420:	08002539 	.word	0x08002539
 8002424:	08002557 	.word	0x08002557
 8002428:	080025a7 	.word	0x080025a7
 800242c:	f7ff ff6a 	bl	8002304 <ucg_gpio_init>
 8002430:	2201      	movs	r2, #1
 8002432:	2180      	movs	r1, #128	; 0x80
 8002434:	4860      	ldr	r0, [pc, #384]	; (80025b8 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8002436:	f7ff fafd 	bl	8001a34 <GPIO_WriteBit>
 800243a:	2201      	movs	r2, #1
 800243c:	2140      	movs	r1, #64	; 0x40
 800243e:	485f      	ldr	r0, [pc, #380]	; (80025bc <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 8002440:	f7ff faf8 	bl	8001a34 <GPIO_WriteBit>
 8002444:	2201      	movs	r2, #1
 8002446:	2180      	movs	r1, #128	; 0x80
 8002448:	485d      	ldr	r0, [pc, #372]	; (80025c0 <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 800244a:	f7ff faf3 	bl	8001a34 <GPIO_WriteBit>
 800244e:	2201      	movs	r2, #1
 8002450:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002454:	4858      	ldr	r0, [pc, #352]	; (80025b8 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8002456:	f7ff faed 	bl	8001a34 <GPIO_WriteBit>
 800245a:	2200      	movs	r2, #0
 800245c:	2120      	movs	r1, #32
 800245e:	4856      	ldr	r0, [pc, #344]	; (80025b8 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8002460:	f7ff fae8 	bl	8001a34 <GPIO_WriteBit>
 8002464:	2201      	movs	r2, #1
 8002466:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800246a:	4854      	ldr	r0, [pc, #336]	; (80025bc <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 800246c:	f7ff fae2 	bl	8001a34 <GPIO_WriteBit>
 8002470:	2201      	movs	r2, #1
 8002472:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002476:	4850      	ldr	r0, [pc, #320]	; (80025b8 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8002478:	f7ff fadc 	bl	8001a34 <GPIO_WriteBit>
 800247c:	e097      	b.n	80025ae <ucg_com_arduino_generic_SW_SPI+0x1d6>
 800247e:	893b      	ldrh	r3, [r7, #8]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff35 	bl	80022f0 <delayMicroseconds>
 8002486:	e092      	b.n	80025ae <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8002488:	893b      	ldrh	r3, [r7, #8]
 800248a:	b2db      	uxtb	r3, r3
 800248c:	461a      	mov	r2, r3
 800248e:	2180      	movs	r1, #128	; 0x80
 8002490:	484b      	ldr	r0, [pc, #300]	; (80025c0 <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 8002492:	f7ff facf 	bl	8001a34 <GPIO_WriteBit>
 8002496:	e08a      	b.n	80025ae <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8002498:	893b      	ldrh	r3, [r7, #8]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	461a      	mov	r2, r3
 800249e:	2140      	movs	r1, #64	; 0x40
 80024a0:	4846      	ldr	r0, [pc, #280]	; (80025bc <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 80024a2:	f7ff fac7 	bl	8001a34 <GPIO_WriteBit>
 80024a6:	e082      	b.n	80025ae <ucg_com_arduino_generic_SW_SPI+0x1d6>
 80024a8:	893b      	ldrh	r3, [r7, #8]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024b2:	4841      	ldr	r0, [pc, #260]	; (80025b8 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80024b4:	f7ff fabe 	bl	8001a34 <GPIO_WriteBit>
 80024b8:	e079      	b.n	80025ae <ucg_com_arduino_generic_SW_SPI+0x1d6>
 80024ba:	893b      	ldrh	r3, [r7, #8]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	4619      	mov	r1, r3
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f7ff ff4f 	bl	8002364 <ucg_com_arduino_send_generic_SW_SPI>
 80024c6:	e072      	b.n	80025ae <ucg_com_arduino_generic_SW_SPI+0x1d6>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	4619      	mov	r1, r3
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f7ff ff48 	bl	8002364 <ucg_com_arduino_send_generic_SW_SPI>
 80024d4:	893b      	ldrh	r3, [r7, #8]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	813b      	strh	r3, [r7, #8]
 80024da:	893b      	ldrh	r3, [r7, #8]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f3      	bne.n	80024c8 <ucg_com_arduino_generic_SW_SPI+0xf0>
 80024e0:	e065      	b.n	80025ae <ucg_com_arduino_generic_SW_SPI+0x1d6>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	4619      	mov	r1, r3
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f7ff ff3b 	bl	8002364 <ucg_com_arduino_send_generic_SW_SPI>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3301      	adds	r3, #1
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	4619      	mov	r1, r3
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f7ff ff34 	bl	8002364 <ucg_com_arduino_send_generic_SW_SPI>
 80024fc:	893b      	ldrh	r3, [r7, #8]
 80024fe:	3b01      	subs	r3, #1
 8002500:	813b      	strh	r3, [r7, #8]
 8002502:	893b      	ldrh	r3, [r7, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1ec      	bne.n	80024e2 <ucg_com_arduino_generic_SW_SPI+0x10a>
 8002508:	e051      	b.n	80025ae <ucg_com_arduino_generic_SW_SPI+0x1d6>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	4619      	mov	r1, r3
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f7ff ff27 	bl	8002364 <ucg_com_arduino_send_generic_SW_SPI>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3301      	adds	r3, #1
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	4619      	mov	r1, r3
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f7ff ff20 	bl	8002364 <ucg_com_arduino_send_generic_SW_SPI>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3302      	adds	r3, #2
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	4619      	mov	r1, r3
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f7ff ff19 	bl	8002364 <ucg_com_arduino_send_generic_SW_SPI>
 8002532:	893b      	ldrh	r3, [r7, #8]
 8002534:	3b01      	subs	r3, #1
 8002536:	813b      	strh	r3, [r7, #8]
 8002538:	893b      	ldrh	r3, [r7, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1e5      	bne.n	800250a <ucg_com_arduino_generic_SW_SPI+0x132>
 800253e:	e036      	b.n	80025ae <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	607a      	str	r2, [r7, #4]
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	4619      	mov	r1, r3
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f7ff ff0a 	bl	8002364 <ucg_com_arduino_send_generic_SW_SPI>
 8002550:	893b      	ldrh	r3, [r7, #8]
 8002552:	3b01      	subs	r3, #1
 8002554:	813b      	strh	r3, [r7, #8]
 8002556:	893b      	ldrh	r3, [r7, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f1      	bne.n	8002540 <ucg_com_arduino_generic_SW_SPI+0x168>
 800255c:	e027      	b.n	80025ae <ucg_com_arduino_generic_SW_SPI+0x1d6>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d010      	beq.n	8002588 <ucg_com_arduino_generic_SW_SPI+0x1b0>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d106      	bne.n	800257c <ucg_com_arduino_generic_SW_SPI+0x1a4>
 800256e:	2200      	movs	r2, #0
 8002570:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002574:	4810      	ldr	r0, [pc, #64]	; (80025b8 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8002576:	f7ff fa5d 	bl	8001a34 <GPIO_WriteBit>
 800257a:	e005      	b.n	8002588 <ucg_com_arduino_generic_SW_SPI+0x1b0>
 800257c:	2201      	movs	r2, #1
 800257e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002582:	480d      	ldr	r0, [pc, #52]	; (80025b8 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8002584:	f7ff fa56 	bl	8001a34 <GPIO_WriteBit>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3301      	adds	r3, #1
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	4619      	mov	r1, r3
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f7ff fee5 	bl	8002364 <ucg_com_arduino_send_generic_SW_SPI>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3301      	adds	r3, #1
 800259e:	607b      	str	r3, [r7, #4]
 80025a0:	893b      	ldrh	r3, [r7, #8]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	813b      	strh	r3, [r7, #8]
 80025a6:	893b      	ldrh	r3, [r7, #8]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1d8      	bne.n	800255e <ucg_com_arduino_generic_SW_SPI+0x186>
 80025ac:	bf00      	nop
 80025ae:	2301      	movs	r3, #1
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40020000 	.word	0x40020000
 80025bc:	40020400 	.word	0x40020400
 80025c0:	40020800 	.word	0x40020800

080025c4 <Ucglib4WireSWSPI_begin>:
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	70fb      	strb	r3, [r7, #3]
 80025d0:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <Ucglib4WireSWSPI_begin+0x2c>)
 80025d2:	4a08      	ldr	r2, [pc, #32]	; (80025f4 <Ucglib4WireSWSPI_begin+0x30>)
 80025d4:	4908      	ldr	r1, [pc, #32]	; (80025f8 <Ucglib4WireSWSPI_begin+0x34>)
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f001 f9f0 	bl	80039bc <ucg_Init>
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	4619      	mov	r1, r3
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 ffd4 	bl	800358e <ucg_SetFontMode>
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	080023d9 	.word	0x080023d9
 80025f4:	08002ccd 	.word	0x08002ccd
 80025f8:	08002df5 	.word	0x08002df5

080025fc <ucg_DrawBox>:
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	4608      	mov	r0, r1
 8002606:	4611      	mov	r1, r2
 8002608:	461a      	mov	r2, r3
 800260a:	4603      	mov	r3, r0
 800260c:	817b      	strh	r3, [r7, #10]
 800260e:	460b      	mov	r3, r1
 8002610:	813b      	strh	r3, [r7, #8]
 8002612:	4613      	mov	r3, r2
 8002614:	80fb      	strh	r3, [r7, #6]
 8002616:	e014      	b.n	8002642 <ucg_DrawBox+0x46>
 8002618:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800261c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002620:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f001 fa3b 	bl	8003aa0 <ucg_DrawHLine>
 800262a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800262e:	b29b      	uxth	r3, r3
 8002630:	3b01      	subs	r3, #1
 8002632:	b29b      	uxth	r3, r3
 8002634:	833b      	strh	r3, [r7, #24]
 8002636:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800263a:	b29b      	uxth	r3, r3
 800263c:	3301      	adds	r3, #1
 800263e:	b29b      	uxth	r3, r3
 8002640:	813b      	strh	r3, [r7, #8]
 8002642:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002646:	2b00      	cmp	r3, #0
 8002648:	dce6      	bgt.n	8002618 <ucg_DrawBox+0x1c>
 800264a:	bf00      	nop
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <ucg_ClearScreen>:
 8002652:	b580      	push	{r7, lr}
 8002654:	b084      	sub	sp, #16
 8002656:	af02      	add	r7, sp, #8
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	2300      	movs	r3, #0
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	2300      	movs	r3, #0
 8002660:	2200      	movs	r2, #0
 8002662:	2100      	movs	r1, #0
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f001 fa59 	bl	8003b1c <ucg_SetColor>
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 fb89 	bl	8002d82 <ucg_SetMaxClipRange>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	4613      	mov	r3, r2
 8002680:	2200      	movs	r2, #0
 8002682:	2100      	movs	r1, #0
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff ffb9 	bl	80025fc <ucg_DrawBox>
 800268a:	23ff      	movs	r3, #255	; 0xff
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	23ff      	movs	r3, #255	; 0xff
 8002690:	22ff      	movs	r2, #255	; 0xff
 8002692:	2100      	movs	r1, #0
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f001 fa41 	bl	8003b1c <ucg_SetColor>
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <ucg_DrawFrame>:
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b086      	sub	sp, #24
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	4608      	mov	r0, r1
 80026ac:	4611      	mov	r1, r2
 80026ae:	461a      	mov	r2, r3
 80026b0:	4603      	mov	r3, r0
 80026b2:	817b      	strh	r3, [r7, #10]
 80026b4:	460b      	mov	r3, r1
 80026b6:	813b      	strh	r3, [r7, #8]
 80026b8:	4613      	mov	r3, r2
 80026ba:	80fb      	strh	r3, [r7, #6]
 80026bc:	897b      	ldrh	r3, [r7, #10]
 80026be:	82fb      	strh	r3, [r7, #22]
 80026c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026c4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80026c8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f001 f9e7 	bl	8003aa0 <ucg_DrawHLine>
 80026d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80026d6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80026da:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f001 f9fd 	bl	8003ade <ucg_DrawVLine>
 80026e4:	897a      	ldrh	r2, [r7, #10]
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	4413      	add	r3, r2
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	817b      	strh	r3, [r7, #10]
 80026ee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	817b      	strh	r3, [r7, #10]
 80026fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80026fe:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002702:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f001 f9e9 	bl	8003ade <ucg_DrawVLine>
 800270c:	893a      	ldrh	r2, [r7, #8]
 800270e:	8c3b      	ldrh	r3, [r7, #32]
 8002710:	4413      	add	r3, r2
 8002712:	b29b      	uxth	r3, r3
 8002714:	813b      	strh	r3, [r7, #8]
 8002716:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800271a:	b29b      	uxth	r3, r3
 800271c:	3b01      	subs	r3, #1
 800271e:	b29b      	uxth	r3, r3
 8002720:	813b      	strh	r3, [r7, #8]
 8002722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002726:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800272a:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f001 f9b6 	bl	8003aa0 <ucg_DrawHLine>
 8002734:	bf00      	nop
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <ucg_ccs_init>:
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	4608      	mov	r0, r1
 8002746:	4611      	mov	r1, r2
 8002748:	461a      	mov	r2, r3
 800274a:	4603      	mov	r3, r0
 800274c:	70fb      	strb	r3, [r7, #3]
 800274e:	460b      	mov	r3, r1
 8002750:	70bb      	strb	r3, [r7, #2]
 8002752:	4613      	mov	r3, r2
 8002754:	803b      	strh	r3, [r7, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	705a      	strb	r2, [r3, #1]
 800275c:	78bb      	ldrb	r3, [r7, #2]
 800275e:	b29a      	uxth	r2, r3
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	b29b      	uxth	r3, r3
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	b29b      	uxth	r3, r3
 8002768:	b21a      	sxth	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	809a      	strh	r2, [r3, #4]
 800276e:	883b      	ldrh	r3, [r7, #0]
 8002770:	3b01      	subs	r3, #1
 8002772:	b29b      	uxth	r3, r3
 8002774:	b21a      	sxth	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	811a      	strh	r2, [r3, #8]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	805a      	strh	r2, [r3, #2]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002786:	461a      	mov	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800278e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002792:	b21a      	sxth	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	80da      	strh	r2, [r3, #6]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	da0c      	bge.n	80027bc <ucg_ccs_init+0x80>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	425b      	negs	r3, r3
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	b21a      	sxth	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	809a      	strh	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027ba:	805a      	strh	r2, [r3, #2]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80027c8:	fb93 f1f2 	sdiv	r1, r3, r2
 80027cc:	fb02 f201 	mul.w	r2, r2, r1
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	b21a      	sxth	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	815a      	strh	r2, [r3, #10]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80027de:	0fda      	lsrs	r2, r3, #31
 80027e0:	4413      	add	r3, r2
 80027e2:	105b      	asrs	r3, r3, #1
 80027e4:	b21a      	sxth	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	819a      	strh	r2, [r3, #12]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	78fa      	ldrb	r2, [r7, #3]
 80027ee:	701a      	strb	r2, [r3, #0]
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <ucg_ccs_step>:
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	781a      	ldrb	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800280e:	b2db      	uxtb	r3, r3
 8002810:	4413      	add	r3, r2
 8002812:	b2da      	uxtb	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	701a      	strb	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800281e:	b29a      	uxth	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002826:	b29b      	uxth	r3, r3
 8002828:	4413      	add	r3, r2
 800282a:	b29b      	uxth	r3, r3
 800282c:	b21a      	sxth	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	819a      	strh	r2, [r3, #12]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800283e:	429a      	cmp	r2, r3
 8002840:	db16      	blt.n	8002870 <ucg_ccs_step+0x74>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	781a      	ldrb	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	4413      	add	r3, r2
 8002850:	b2da      	uxtb	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	701a      	strb	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800285c:	b29a      	uxth	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002864:	b29b      	uxth	r3, r3
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	b29b      	uxth	r3, r3
 800286a:	b21a      	sxth	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	819a      	strh	r2, [r3, #12]
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <ucg_ccs_seek>:
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	807b      	strh	r3, [r7, #2]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800288e:	b2da      	uxtb	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	701a      	strb	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	781a      	ldrb	r2, [r3, #0]
 8002898:	887b      	ldrh	r3, [r7, #2]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	fb12 f303 	smulbb	r3, r2, r3
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	701a      	strb	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	887b      	ldrh	r3, [r7, #2]
 80028b0:	fb12 f303 	smulbb	r3, r2, r3
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80028bc:	0fd9      	lsrs	r1, r3, #31
 80028be:	440b      	add	r3, r1
 80028c0:	105b      	asrs	r3, r3, #1
 80028c2:	b21b      	sxth	r3, r3
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	81fb      	strh	r3, [r7, #14]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	db0e      	blt.n	80028f4 <ucg_ccs_seek+0x78>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	781a      	ldrb	r2, [r3, #0]
 80028da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80028e4:	fb93 f3f1 	sdiv	r3, r3, r1
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	4413      	add	r3, r2
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	701a      	strb	r2, [r3, #0]
 80028f2:	e00d      	b.n	8002910 <ucg_ccs_seek+0x94>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	781a      	ldrb	r2, [r3, #0]
 80028f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8002902:	fb93 f3f1 	sdiv	r3, r3, r1
 8002906:	b2db      	uxtb	r3, r3
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	b2da      	uxtb	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	701a      	strb	r2, [r3, #0]
 8002910:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800291a:	fb93 f1f2 	sdiv	r1, r3, r2
 800291e:	fb02 f201 	mul.w	r2, r2, r1
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	b21a      	sxth	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	819a      	strh	r2, [r3, #12]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	781a      	ldrb	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	785b      	ldrb	r3, [r3, #1]
 8002932:	4413      	add	r3, r2
 8002934:	b2da      	uxtb	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	701a      	strb	r2, [r3, #0]
 800293a:	bf00      	nop
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <ucg_dev_default_cb>:
 8002946:	b580      	push	{r7, lr}
 8002948:	b084      	sub	sp, #16
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	460b      	mov	r3, r1
 8002950:	607a      	str	r2, [r7, #4]
 8002952:	817b      	strh	r3, [r7, #10]
 8002954:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002958:	2b0c      	cmp	r3, #12
 800295a:	d00a      	beq.n	8002972 <ucg_dev_default_cb+0x2c>
 800295c:	2b17      	cmp	r3, #23
 800295e:	d10f      	bne.n	8002980 <ucg_dev_default_cb+0x3a>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	4798      	blx	r3
 800296e:	4603      	mov	r3, r0
 8002970:	e007      	b.n	8002982 <ucg_dev_default_cb+0x3c>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	3370      	adds	r3, #112	; 0x70
 8002978:	6810      	ldr	r0, [r2, #0]
 800297a:	6851      	ldr	r1, [r2, #4]
 800297c:	c303      	stmia	r3!, {r0, r1}
 800297e:	bf00      	nop
 8002980:	2301      	movs	r3, #1
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <ucg_ext_none>:
 800298a:	b480      	push	{r7}
 800298c:	b085      	sub	sp, #20
 800298e:	af00      	add	r7, sp, #0
 8002990:	60f8      	str	r0, [r7, #12]
 8002992:	460b      	mov	r3, r1
 8002994:	607a      	str	r2, [r7, #4]
 8002996:	817b      	strh	r3, [r7, #10]
 8002998:	2301      	movs	r3, #1
 800299a:	4618      	mov	r0, r3
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <ucg_handle_st7735_l90fx>:
 80029a8:	b590      	push	{r4, r7, lr}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f001 ff75 	bl	80048a0 <ucg_clip_l90fx>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d053      	beq.n	8002a64 <ucg_handle_st7735_l90fx+0xbc>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d008      	beq.n	80029d8 <ucg_handle_st7735_l90fx+0x30>
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d00b      	beq.n	80029e2 <ucg_handle_st7735_l90fx+0x3a>
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d11b      	bne.n	8002a06 <ucg_handle_st7735_l90fx+0x5e>
 80029ce:	4928      	ldr	r1, [pc, #160]	; (8002a70 <ucg_handle_st7735_l90fx+0xc8>)
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f002 fa93 	bl	8004efc <ucg_com_SendCmdSeq>
 80029d6:	e028      	b.n	8002a2a <ucg_handle_st7735_l90fx+0x82>
 80029d8:	4926      	ldr	r1, [pc, #152]	; (8002a74 <ucg_handle_st7735_l90fx+0xcc>)
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f002 fa8e 	bl	8004efc <ucg_com_SendCmdSeq>
 80029e0:	e023      	b.n	8002a2a <ucg_handle_st7735_l90fx+0x82>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80029e6:	81fb      	strh	r3, [r7, #14]
 80029e8:	89fb      	ldrh	r3, [r7, #14]
 80029ea:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	b21a      	sxth	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	849a      	strh	r2, [r3, #36]	; 0x24
 80029f6:	4920      	ldr	r1, [pc, #128]	; (8002a78 <ucg_handle_st7735_l90fx+0xd0>)
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f002 fa7f 	bl	8004efc <ucg_com_SendCmdSeq>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	89fa      	ldrh	r2, [r7, #14]
 8002a02:	849a      	strh	r2, [r3, #36]	; 0x24
 8002a04:	e011      	b.n	8002a2a <ucg_handle_st7735_l90fx+0x82>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a0a:	81fb      	strh	r3, [r7, #14]
 8002a0c:	89fb      	ldrh	r3, [r7, #14]
 8002a0e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	b21a      	sxth	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	84da      	strh	r2, [r3, #38]	; 0x26
 8002a1a:	4918      	ldr	r1, [pc, #96]	; (8002a7c <ucg_handle_st7735_l90fx+0xd4>)
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f002 fa6d 	bl	8004efc <ucg_com_SendCmdSeq>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	89fa      	ldrh	r2, [r7, #14]
 8002a26:	84da      	strh	r2, [r3, #38]	; 0x26
 8002a28:	bf00      	nop
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a30:	723b      	strb	r3, [r7, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002a38:	727b      	strb	r3, [r7, #9]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002a40:	72bb      	strb	r3, [r7, #10]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69dc      	ldr	r4, [r3, #28]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	f107 0308 	add.w	r3, r7, #8
 8002a52:	2113      	movs	r1, #19
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	47a0      	blx	r4
 8002a58:	2101      	movs	r1, #1
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f002 f99a 	bl	8004d94 <ucg_com_SetCSLineStatus>
 8002a60:	2301      	movs	r3, #1
 8002a62:	e000      	b.n	8002a66 <ucg_handle_st7735_l90fx+0xbe>
 8002a64:	2300      	movs	r3, #0
 8002a66:	4618      	mov	r0, r3
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd90      	pop	{r4, r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	08005b38 	.word	0x08005b38
 8002a74:	08005b58 	.word	0x08005b58
 8002a78:	08005b7c 	.word	0x08005b7c
 8002a7c:	08005ba0 	.word	0x08005ba0

08002a80 <ucg_handle_st7735_l90se>:
 8002a80:	b590      	push	{r4, r7, lr}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	2300      	movs	r3, #0
 8002a8a:	75fb      	strb	r3, [r7, #23]
 8002a8c:	e01a      	b.n	8002ac4 <ucg_handle_st7735_l90se+0x44>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8002a94:	7dfa      	ldrb	r2, [r7, #23]
 8002a96:	4613      	mov	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	1a9b      	subs	r3, r3, r2
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	18c8      	adds	r0, r1, r3
 8002aa0:	7dfb      	ldrb	r3, [r7, #23]
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 8002aaa:	7dfb      	ldrb	r3, [r7, #23]
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002aba:	f7ff fe3f 	bl	800273c <ucg_ccs_init>
 8002abe:	7dfb      	ldrb	r3, [r7, #23]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	75fb      	strb	r3, [r7, #23]
 8002ac4:	7dfb      	ldrb	r3, [r7, #23]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d9e1      	bls.n	8002a8e <ucg_handle_st7735_l90se+0xe>
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f002 f868 	bl	8004ba0 <ucg_clip_l90se>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d071      	beq.n	8002bba <ucg_handle_st7735_l90se+0x13a>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d008      	beq.n	8002af2 <ucg_handle_st7735_l90se+0x72>
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d00b      	beq.n	8002afc <ucg_handle_st7735_l90se+0x7c>
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d11b      	bne.n	8002b20 <ucg_handle_st7735_l90se+0xa0>
 8002ae8:	4936      	ldr	r1, [pc, #216]	; (8002bc4 <ucg_handle_st7735_l90se+0x144>)
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f002 fa06 	bl	8004efc <ucg_com_SendCmdSeq>
 8002af0:	e028      	b.n	8002b44 <ucg_handle_st7735_l90se+0xc4>
 8002af2:	4935      	ldr	r1, [pc, #212]	; (8002bc8 <ucg_handle_st7735_l90se+0x148>)
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f002 fa01 	bl	8004efc <ucg_com_SendCmdSeq>
 8002afa:	e023      	b.n	8002b44 <ucg_handle_st7735_l90se+0xc4>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002b00:	827b      	strh	r3, [r7, #18]
 8002b02:	8a7b      	ldrh	r3, [r7, #18]
 8002b04:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	b21a      	sxth	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	849a      	strh	r2, [r3, #36]	; 0x24
 8002b10:	492e      	ldr	r1, [pc, #184]	; (8002bcc <ucg_handle_st7735_l90se+0x14c>)
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f002 f9f2 	bl	8004efc <ucg_com_SendCmdSeq>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	8a7a      	ldrh	r2, [r7, #18]
 8002b1c:	849a      	strh	r2, [r3, #36]	; 0x24
 8002b1e:	e011      	b.n	8002b44 <ucg_handle_st7735_l90se+0xc4>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b24:	827b      	strh	r3, [r7, #18]
 8002b26:	8a7b      	ldrh	r3, [r7, #18]
 8002b28:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	b21a      	sxth	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	84da      	strh	r2, [r3, #38]	; 0x26
 8002b34:	4926      	ldr	r1, [pc, #152]	; (8002bd0 <ucg_handle_st7735_l90se+0x150>)
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f002 f9e0 	bl	8004efc <ucg_com_SendCmdSeq>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	8a7a      	ldrh	r2, [r7, #18]
 8002b40:	84da      	strh	r2, [r3, #38]	; 0x26
 8002b42:	bf00      	nop
 8002b44:	2300      	movs	r3, #0
 8002b46:	82bb      	strh	r3, [r7, #20]
 8002b48:	e02a      	b.n	8002ba0 <ucg_handle_st7735_l90se+0x120>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002b50:	733b      	strb	r3, [r7, #12]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002b58:	737b      	strb	r3, [r7, #13]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002b60:	73bb      	strb	r3, [r7, #14]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69dc      	ldr	r4, [r3, #28]
 8002b66:	f107 030c 	add.w	r3, r7, #12
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	2113      	movs	r1, #19
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	47a0      	blx	r4
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3346      	adds	r3, #70	; 0x46
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff fe40 	bl	80027fc <ucg_ccs_step>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3346      	adds	r3, #70	; 0x46
 8002b80:	330e      	adds	r3, #14
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff fe3a 	bl	80027fc <ucg_ccs_step>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3346      	adds	r3, #70	; 0x46
 8002b8c:	331c      	adds	r3, #28
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff fe34 	bl	80027fc <ucg_ccs_step>
 8002b94:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	82bb      	strh	r3, [r7, #20]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002ba6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	dbcd      	blt.n	8002b4a <ucg_handle_st7735_l90se+0xca>
 8002bae:	2101      	movs	r1, #1
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f002 f8ef 	bl	8004d94 <ucg_com_SetCSLineStatus>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <ucg_handle_st7735_l90se+0x13c>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	371c      	adds	r7, #28
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd90      	pop	{r4, r7, pc}
 8002bc4:	08005b38 	.word	0x08005b38
 8002bc8:	08005b58 	.word	0x08005b58
 8002bcc:	08005b7c 	.word	0x08005b7c
 8002bd0:	08005ba0 	.word	0x08005ba0

08002bd4 <ucg_dev_ic_st7735_18>:
 8002bd4:	b590      	push	{r4, r7, lr}
 8002bd6:	b087      	sub	sp, #28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	607a      	str	r2, [r7, #4]
 8002be0:	817b      	strh	r3, [r7, #10]
 8002be2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002be6:	3b0a      	subs	r3, #10
 8002be8:	2b0b      	cmp	r3, #11
 8002bea:	d85f      	bhi.n	8002cac <ucg_dev_ic_st7735_18+0xd8>
 8002bec:	a201      	add	r2, pc, #4	; (adr r2, 8002bf4 <ucg_dev_ic_st7735_18+0x20>)
 8002bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf2:	bf00      	nop
 8002bf4:	08002c25 	.word	0x08002c25
 8002bf8:	08002c3f 	.word	0x08002c3f
 8002bfc:	08002cad 	.word	0x08002cad
 8002c00:	08002cad 	.word	0x08002cad
 8002c04:	08002cad 	.word	0x08002cad
 8002c08:	08002c4b 	.word	0x08002c4b
 8002c0c:	08002cad 	.word	0x08002cad
 8002c10:	08002cad 	.word	0x08002cad
 8002c14:	08002cad 	.word	0x08002cad
 8002c18:	08002cad 	.word	0x08002cad
 8002c1c:	08002c5b 	.word	0x08002c5b
 8002c20:	08002ca3 	.word	0x08002ca3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2202      	movs	r2, #2
 8002c28:	841a      	strh	r2, [r3, #32]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	845a      	strh	r2, [r3, #34]	; 0x22
 8002c30:	2242      	movs	r2, #66	; 0x42
 8002c32:	2164      	movs	r1, #100	; 0x64
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f001 fffc 	bl	8004c32 <ucg_com_PowerUp>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	e03e      	b.n	8002cbc <ucg_dev_ic_st7735_18+0xe8>
 8002c3e:	4921      	ldr	r1, [pc, #132]	; (8002cc4 <ucg_dev_ic_st7735_18+0xf0>)
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f002 f95b 	bl	8004efc <ucg_com_SendCmdSeq>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e038      	b.n	8002cbc <ucg_dev_ic_st7735_18+0xe8>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2280      	movs	r2, #128	; 0x80
 8002c4e:	801a      	strh	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2280      	movs	r2, #128	; 0x80
 8002c54:	805a      	strh	r2, [r3, #2]
 8002c56:	2301      	movs	r3, #1
 8002c58:	e030      	b.n	8002cbc <ucg_dev_ic_st7735_18+0xe8>
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f001 fe06 	bl	800486c <ucg_clip_is_pixel_visible>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d01b      	beq.n	8002c9e <ucg_dev_ic_st7735_18+0xca>
 8002c66:	4918      	ldr	r1, [pc, #96]	; (8002cc8 <ucg_dev_ic_st7735_18+0xf4>)
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f002 f947 	bl	8004efc <ucg_com_SendCmdSeq>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c74:	753b      	strb	r3, [r7, #20]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002c7c:	757b      	strb	r3, [r7, #21]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002c84:	75bb      	strb	r3, [r7, #22]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	69dc      	ldr	r4, [r3, #28]
 8002c8a:	f107 0314 	add.w	r3, r7, #20
 8002c8e:	2201      	movs	r2, #1
 8002c90:	2113      	movs	r1, #19
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	47a0      	blx	r4
 8002c96:	2101      	movs	r1, #1
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f002 f87b 	bl	8004d94 <ucg_com_SetCSLineStatus>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e00c      	b.n	8002cbc <ucg_dev_ic_st7735_18+0xe8>
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f7ff fe80 	bl	80029a8 <ucg_handle_st7735_l90fx>
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e007      	b.n	8002cbc <ucg_dev_ic_st7735_18+0xe8>
 8002cac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f7ff fe46 	bl	8002946 <ucg_dev_default_cb>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	371c      	adds	r7, #28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd90      	pop	{r4, r7, pc}
 8002cc4:	08005bc4 	.word	0x08005bc4
 8002cc8:	08005b18 	.word	0x08005b18

08002ccc <ucg_ext_st7735_18>:
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	817b      	strh	r3, [r7, #10]
 8002cda:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002cde:	2b17      	cmp	r3, #23
 8002ce0:	d103      	bne.n	8002cea <ucg_ext_st7735_18+0x1e>
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f7ff fecc 	bl	8002a80 <ucg_handle_st7735_l90se>
 8002ce8:	bf00      	nop
 8002cea:	2301      	movs	r3, #1
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <ucg_PowerDown>:
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <ucg_PowerDown+0x2c>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	210b      	movs	r1, #11
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	4798      	blx	r3
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	7813      	ldrb	r3, [r2, #0]
 8002d1a:	f36f 0300 	bfc	r3, #0, #1
 8002d1e:	7013      	strb	r3, [r2, #0]
 8002d20:	bf00      	nop
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <ucg_PowerUp>:
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7ff ffdf 	bl	8002cf4 <ucg_PowerDown>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	210a      	movs	r1, #10
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	4798      	blx	r3
 8002d42:	4603      	mov	r3, r0
 8002d44:	81fb      	strh	r3, [r7, #14]
 8002d46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d004      	beq.n	8002d58 <ucg_PowerUp+0x30>
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	7813      	ldrb	r3, [r2, #0]
 8002d52:	f043 0301 	orr.w	r3, r3, #1
 8002d56:	7013      	strb	r3, [r2, #0]
 8002d58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <ucg_SetClipBox>:
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	210c      	movs	r1, #12
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	4798      	blx	r3
 8002d7a:	bf00      	nop
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <ucg_SetMaxClipRange>:
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	f107 030c 	add.w	r3, r7, #12
 8002d90:	3202      	adds	r2, #2
 8002d92:	6810      	ldr	r0, [r2, #0]
 8002d94:	6018      	str	r0, [r3, #0]
 8002d96:	2300      	movs	r3, #0
 8002d98:	813b      	strh	r3, [r7, #8]
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	817b      	strh	r3, [r7, #10]
 8002d9e:	f107 0308 	add.w	r3, r7, #8
 8002da2:	4619      	mov	r1, r3
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff ffdd 	bl	8002d64 <ucg_SetClipBox>
 8002daa:	bf00      	nop
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <ucg_GetDimension>:
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	3202      	adds	r2, #2
 8002dc2:	210f      	movs	r1, #15
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	4798      	blx	r3
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7ff ffda 	bl	8002d82 <ucg_SetMaxClipRange>
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <ucg_DrawL90FXWithArg>:
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	3224      	adds	r2, #36	; 0x24
 8002de6:	2115      	movs	r1, #21
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	4798      	blx	r3
 8002dec:	bf00      	nop
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <ucg_dev_st7735_18x128x128>:
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	817b      	strh	r3, [r7, #10]
 8002e02:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002e06:	2b0b      	cmp	r3, #11
 8002e08:	d015      	beq.n	8002e36 <ucg_dev_st7735_18x128x128+0x42>
 8002e0a:	2b0f      	cmp	r3, #15
 8002e0c:	d01c      	beq.n	8002e48 <ucg_dev_st7735_18x128x128+0x54>
 8002e0e:	2b0a      	cmp	r3, #10
 8002e10:	d122      	bne.n	8002e58 <ucg_dev_st7735_18x128x128+0x64>
 8002e12:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f7ff feda 	bl	8002bd4 <ucg_dev_ic_st7735_18>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <ucg_dev_st7735_18x128x128+0x36>
 8002e26:	2300      	movs	r3, #0
 8002e28:	e01e      	b.n	8002e68 <ucg_dev_st7735_18x128x128+0x74>
 8002e2a:	4911      	ldr	r1, [pc, #68]	; (8002e70 <ucg_dev_st7735_18x128x128+0x7c>)
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f002 f865 	bl	8004efc <ucg_com_SendCmdSeq>
 8002e32:	2301      	movs	r3, #1
 8002e34:	e018      	b.n	8002e68 <ucg_dev_st7735_18x128x128+0x74>
 8002e36:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f7ff fec8 	bl	8002bd4 <ucg_dev_ic_st7735_18>
 8002e44:	4603      	mov	r3, r0
 8002e46:	e00f      	b.n	8002e68 <ucg_dev_st7735_18x128x128+0x74>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2280      	movs	r2, #128	; 0x80
 8002e4c:	801a      	strh	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2280      	movs	r2, #128	; 0x80
 8002e52:	805a      	strh	r2, [r3, #2]
 8002e54:	2301      	movs	r3, #1
 8002e56:	e007      	b.n	8002e68 <ucg_dev_st7735_18x128x128+0x74>
 8002e58:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	4619      	mov	r1, r3
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f7ff feb7 	bl	8002bd4 <ucg_dev_ic_st7735_18>
 8002e66:	4603      	mov	r3, r0
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	08005bcc 	.word	0x08005bcc

08002e74 <ucg_font_get_byte>:
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	70fb      	strb	r3, [r7, #3]
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	4413      	add	r3, r2
 8002e86:	607b      	str	r3, [r7, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <ucg_font_get_word>:
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	70fb      	strb	r3, [r7, #3]
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	607b      	str	r3, [r7, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	81fb      	strh	r3, [r7, #14]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	607b      	str	r3, [r7, #4]
 8002eb8:	89fb      	ldrh	r3, [r7, #14]
 8002eba:	021b      	lsls	r3, r3, #8
 8002ebc:	81fb      	strh	r3, [r7, #14]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	89fb      	ldrh	r3, [r7, #14]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	81fb      	strh	r3, [r7, #14]
 8002eca:	89fb      	ldrh	r3, [r7, #14]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <ucg_read_font_info>:
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	6838      	ldr	r0, [r7, #0]
 8002ee6:	f7ff ffc5 	bl	8002e74 <ucg_font_get_byte>
 8002eea:	4603      	mov	r3, r0
 8002eec:	461a      	mov	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	701a      	strb	r2, [r3, #0]
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	6838      	ldr	r0, [r7, #0]
 8002ef6:	f7ff ffbd 	bl	8002e74 <ucg_font_get_byte>
 8002efa:	4603      	mov	r3, r0
 8002efc:	461a      	mov	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	705a      	strb	r2, [r3, #1]
 8002f02:	2102      	movs	r1, #2
 8002f04:	6838      	ldr	r0, [r7, #0]
 8002f06:	f7ff ffb5 	bl	8002e74 <ucg_font_get_byte>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	709a      	strb	r2, [r3, #2]
 8002f12:	2103      	movs	r1, #3
 8002f14:	6838      	ldr	r0, [r7, #0]
 8002f16:	f7ff ffad 	bl	8002e74 <ucg_font_get_byte>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	70da      	strb	r2, [r3, #3]
 8002f22:	2104      	movs	r1, #4
 8002f24:	6838      	ldr	r0, [r7, #0]
 8002f26:	f7ff ffa5 	bl	8002e74 <ucg_font_get_byte>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	711a      	strb	r2, [r3, #4]
 8002f32:	2105      	movs	r1, #5
 8002f34:	6838      	ldr	r0, [r7, #0]
 8002f36:	f7ff ff9d 	bl	8002e74 <ucg_font_get_byte>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	715a      	strb	r2, [r3, #5]
 8002f42:	2106      	movs	r1, #6
 8002f44:	6838      	ldr	r0, [r7, #0]
 8002f46:	f7ff ff95 	bl	8002e74 <ucg_font_get_byte>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	719a      	strb	r2, [r3, #6]
 8002f52:	2107      	movs	r1, #7
 8002f54:	6838      	ldr	r0, [r7, #0]
 8002f56:	f7ff ff8d 	bl	8002e74 <ucg_font_get_byte>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	71da      	strb	r2, [r3, #7]
 8002f62:	2108      	movs	r1, #8
 8002f64:	6838      	ldr	r0, [r7, #0]
 8002f66:	f7ff ff85 	bl	8002e74 <ucg_font_get_byte>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	721a      	strb	r2, [r3, #8]
 8002f72:	2109      	movs	r1, #9
 8002f74:	6838      	ldr	r0, [r7, #0]
 8002f76:	f7ff ff7d 	bl	8002e74 <ucg_font_get_byte>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	b25a      	sxtb	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	725a      	strb	r2, [r3, #9]
 8002f82:	210a      	movs	r1, #10
 8002f84:	6838      	ldr	r0, [r7, #0]
 8002f86:	f7ff ff75 	bl	8002e74 <ucg_font_get_byte>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	b25a      	sxtb	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	729a      	strb	r2, [r3, #10]
 8002f92:	210b      	movs	r1, #11
 8002f94:	6838      	ldr	r0, [r7, #0]
 8002f96:	f7ff ff6d 	bl	8002e74 <ucg_font_get_byte>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	b25a      	sxtb	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	72da      	strb	r2, [r3, #11]
 8002fa2:	210c      	movs	r1, #12
 8002fa4:	6838      	ldr	r0, [r7, #0]
 8002fa6:	f7ff ff65 	bl	8002e74 <ucg_font_get_byte>
 8002faa:	4603      	mov	r3, r0
 8002fac:	b25a      	sxtb	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	731a      	strb	r2, [r3, #12]
 8002fb2:	210d      	movs	r1, #13
 8002fb4:	6838      	ldr	r0, [r7, #0]
 8002fb6:	f7ff ff5d 	bl	8002e74 <ucg_font_get_byte>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	b25a      	sxtb	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	735a      	strb	r2, [r3, #13]
 8002fc2:	210e      	movs	r1, #14
 8002fc4:	6838      	ldr	r0, [r7, #0]
 8002fc6:	f7ff ff55 	bl	8002e74 <ucg_font_get_byte>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	b25a      	sxtb	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	739a      	strb	r2, [r3, #14]
 8002fd2:	210f      	movs	r1, #15
 8002fd4:	6838      	ldr	r0, [r7, #0]
 8002fd6:	f7ff ff4d 	bl	8002e74 <ucg_font_get_byte>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	b25a      	sxtb	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	73da      	strb	r2, [r3, #15]
 8002fe2:	2110      	movs	r1, #16
 8002fe4:	6838      	ldr	r0, [r7, #0]
 8002fe6:	f7ff ff45 	bl	8002e74 <ucg_font_get_byte>
 8002fea:	4603      	mov	r3, r0
 8002fec:	b25a      	sxtb	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	741a      	strb	r2, [r3, #16]
 8002ff2:	2111      	movs	r1, #17
 8002ff4:	6838      	ldr	r0, [r7, #0]
 8002ff6:	f7ff ff4f 	bl	8002e98 <ucg_font_get_word>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	825a      	strh	r2, [r3, #18]
 8003002:	2113      	movs	r1, #19
 8003004:	6838      	ldr	r0, [r7, #0]
 8003006:	f7ff ff47 	bl	8002e98 <ucg_font_get_word>
 800300a:	4603      	mov	r3, r0
 800300c:	461a      	mov	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	829a      	strh	r2, [r3, #20]
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <ucg_font_decode_get_unsigned_bits>:
 800301a:	b480      	push	{r7}
 800301c:	b085      	sub	sp, #20
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	460b      	mov	r3, r1
 8003024:	70fb      	strb	r3, [r7, #3]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	7b1b      	ldrb	r3, [r3, #12]
 800302a:	737b      	strb	r3, [r7, #13]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	73fb      	strb	r3, [r7, #15]
 8003034:	7bfa      	ldrb	r2, [r7, #15]
 8003036:	7b7b      	ldrb	r3, [r7, #13]
 8003038:	fa42 f303 	asr.w	r3, r2, r3
 800303c:	73fb      	strb	r3, [r7, #15]
 800303e:	7b7b      	ldrb	r3, [r7, #13]
 8003040:	73bb      	strb	r3, [r7, #14]
 8003042:	7bba      	ldrb	r2, [r7, #14]
 8003044:	78fb      	ldrb	r3, [r7, #3]
 8003046:	4413      	add	r3, r2
 8003048:	73bb      	strb	r3, [r7, #14]
 800304a:	7bbb      	ldrb	r3, [r7, #14]
 800304c:	2b07      	cmp	r3, #7
 800304e:	d91a      	bls.n	8003086 <ucg_font_decode_get_unsigned_bits+0x6c>
 8003050:	2308      	movs	r3, #8
 8003052:	733b      	strb	r3, [r7, #12]
 8003054:	7b3a      	ldrb	r2, [r7, #12]
 8003056:	7b7b      	ldrb	r3, [r7, #13]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	733b      	strb	r3, [r7, #12]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	7b3b      	ldrb	r3, [r7, #12]
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	b25a      	sxtb	r2, r3
 8003076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800307a:	4313      	orrs	r3, r2
 800307c:	b25b      	sxtb	r3, r3
 800307e:	73fb      	strb	r3, [r7, #15]
 8003080:	7bbb      	ldrb	r3, [r7, #14]
 8003082:	3b08      	subs	r3, #8
 8003084:	73bb      	strb	r3, [r7, #14]
 8003086:	78fb      	ldrb	r3, [r7, #3]
 8003088:	f04f 32ff 	mov.w	r2, #4294967295
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	b2db      	uxtb	r3, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	b2da      	uxtb	r2, r3
 8003096:	7bfb      	ldrb	r3, [r7, #15]
 8003098:	4013      	ands	r3, r2
 800309a:	73fb      	strb	r3, [r7, #15]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	7bba      	ldrb	r2, [r7, #14]
 80030a0:	731a      	strb	r2, [r3, #12]
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	4618      	mov	r0, r3
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <ucg_font_decode_get_signed_bits>:
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	70fb      	strb	r3, [r7, #3]
 80030bc:	78fb      	ldrb	r3, [r7, #3]
 80030be:	4619      	mov	r1, r3
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7ff ffaa 	bl	800301a <ucg_font_decode_get_unsigned_bits>
 80030c6:	4603      	mov	r3, r0
 80030c8:	73fb      	strb	r3, [r7, #15]
 80030ca:	2301      	movs	r3, #1
 80030cc:	73bb      	strb	r3, [r7, #14]
 80030ce:	78fb      	ldrb	r3, [r7, #3]
 80030d0:	3b01      	subs	r3, #1
 80030d2:	70fb      	strb	r3, [r7, #3]
 80030d4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	73bb      	strb	r3, [r7, #14]
 80030e0:	7bfa      	ldrb	r2, [r7, #15]
 80030e2:	7bbb      	ldrb	r3, [r7, #14]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	73fb      	strb	r3, [r7, #15]
 80030ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <ucg_add_vector_y>:
 80030f6:	b490      	push	{r4, r7}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	4604      	mov	r4, r0
 80030fe:	4608      	mov	r0, r1
 8003100:	4611      	mov	r1, r2
 8003102:	461a      	mov	r2, r3
 8003104:	4623      	mov	r3, r4
 8003106:	80fb      	strh	r3, [r7, #6]
 8003108:	4603      	mov	r3, r0
 800310a:	717b      	strb	r3, [r7, #5]
 800310c:	460b      	mov	r3, r1
 800310e:	713b      	strb	r3, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	70fb      	strb	r3, [r7, #3]
 8003114:	78fb      	ldrb	r3, [r7, #3]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d00b      	beq.n	8003132 <ucg_add_vector_y+0x3c>
 800311a:	2b02      	cmp	r3, #2
 800311c:	d011      	beq.n	8003142 <ucg_add_vector_y+0x4c>
 800311e:	2b00      	cmp	r3, #0
 8003120:	d117      	bne.n	8003152 <ucg_add_vector_y+0x5c>
 8003122:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003126:	b29a      	uxth	r2, r3
 8003128:	88fb      	ldrh	r3, [r7, #6]
 800312a:	4413      	add	r3, r2
 800312c:	b29b      	uxth	r3, r3
 800312e:	80fb      	strh	r3, [r7, #6]
 8003130:	e017      	b.n	8003162 <ucg_add_vector_y+0x6c>
 8003132:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003136:	b29a      	uxth	r2, r3
 8003138:	88fb      	ldrh	r3, [r7, #6]
 800313a:	4413      	add	r3, r2
 800313c:	b29b      	uxth	r3, r3
 800313e:	80fb      	strh	r3, [r7, #6]
 8003140:	e00f      	b.n	8003162 <ucg_add_vector_y+0x6c>
 8003142:	88fa      	ldrh	r2, [r7, #6]
 8003144:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003148:	b29b      	uxth	r3, r3
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	b29b      	uxth	r3, r3
 800314e:	80fb      	strh	r3, [r7, #6]
 8003150:	e007      	b.n	8003162 <ucg_add_vector_y+0x6c>
 8003152:	88fa      	ldrh	r2, [r7, #6]
 8003154:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003158:	b29b      	uxth	r3, r3
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	b29b      	uxth	r3, r3
 800315e:	80fb      	strh	r3, [r7, #6]
 8003160:	bf00      	nop
 8003162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bc90      	pop	{r4, r7}
 800316e:	4770      	bx	lr

08003170 <ucg_add_vector_x>:
 8003170:	b490      	push	{r4, r7}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	4604      	mov	r4, r0
 8003178:	4608      	mov	r0, r1
 800317a:	4611      	mov	r1, r2
 800317c:	461a      	mov	r2, r3
 800317e:	4623      	mov	r3, r4
 8003180:	80fb      	strh	r3, [r7, #6]
 8003182:	4603      	mov	r3, r0
 8003184:	717b      	strb	r3, [r7, #5]
 8003186:	460b      	mov	r3, r1
 8003188:	713b      	strb	r3, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	70fb      	strb	r3, [r7, #3]
 800318e:	78fb      	ldrb	r3, [r7, #3]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d00b      	beq.n	80031ac <ucg_add_vector_x+0x3c>
 8003194:	2b02      	cmp	r3, #2
 8003196:	d011      	beq.n	80031bc <ucg_add_vector_x+0x4c>
 8003198:	2b00      	cmp	r3, #0
 800319a:	d117      	bne.n	80031cc <ucg_add_vector_x+0x5c>
 800319c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	88fb      	ldrh	r3, [r7, #6]
 80031a4:	4413      	add	r3, r2
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	80fb      	strh	r3, [r7, #6]
 80031aa:	e017      	b.n	80031dc <ucg_add_vector_x+0x6c>
 80031ac:	88fa      	ldrh	r2, [r7, #6]
 80031ae:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	80fb      	strh	r3, [r7, #6]
 80031ba:	e00f      	b.n	80031dc <ucg_add_vector_x+0x6c>
 80031bc:	88fa      	ldrh	r2, [r7, #6]
 80031be:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	80fb      	strh	r3, [r7, #6]
 80031ca:	e007      	b.n	80031dc <ucg_add_vector_x+0x6c>
 80031cc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	4413      	add	r3, r2
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	80fb      	strh	r3, [r7, #6]
 80031da:	bf00      	nop
 80031dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031e0:	4618      	mov	r0, r3
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc90      	pop	{r4, r7}
 80031e8:	4770      	bx	lr

080031ea <ucg_font_decode_len>:
 80031ea:	b590      	push	{r4, r7, lr}
 80031ec:	b089      	sub	sp, #36	; 0x24
 80031ee:	af02      	add	r7, sp, #8
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	460b      	mov	r3, r1
 80031f4:	70fb      	strb	r3, [r7, #3]
 80031f6:	4613      	mov	r3, r2
 80031f8:	70bb      	strb	r3, [r7, #2]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3380      	adds	r3, #128	; 0x80
 80031fe:	613b      	str	r3, [r7, #16]
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	75fb      	strb	r3, [r7, #23]
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800320a:	757b      	strb	r3, [r7, #21]
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003212:	753b      	strb	r3, [r7, #20]
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800321a:	73fb      	strb	r3, [r7, #15]
 800321c:	7bfa      	ldrb	r2, [r7, #15]
 800321e:	7d7b      	ldrb	r3, [r7, #21]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	73fb      	strb	r3, [r7, #15]
 8003224:	7bfb      	ldrb	r3, [r7, #15]
 8003226:	75bb      	strb	r3, [r7, #22]
 8003228:	7dfa      	ldrb	r2, [r7, #23]
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	429a      	cmp	r2, r3
 800322e:	d201      	bcs.n	8003234 <ucg_font_decode_len+0x4a>
 8003230:	7dfb      	ldrb	r3, [r7, #23]
 8003232:	75bb      	strb	r3, [r7, #22]
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	889b      	ldrh	r3, [r3, #4]
 8003238:	81bb      	strh	r3, [r7, #12]
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	88db      	ldrh	r3, [r3, #6]
 800323e:	817b      	strh	r3, [r7, #10]
 8003240:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003244:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	7b9b      	ldrb	r3, [r3, #14]
 800324c:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8003250:	f7ff ff8e 	bl	8003170 <ucg_add_vector_x>
 8003254:	4603      	mov	r3, r0
 8003256:	81bb      	strh	r3, [r7, #12]
 8003258:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800325c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	7b9b      	ldrb	r3, [r3, #14]
 8003264:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8003268:	f7ff ff45 	bl	80030f6 <ucg_add_vector_y>
 800326c:	4603      	mov	r3, r0
 800326e:	817b      	strh	r3, [r7, #10]
 8003270:	78bb      	ldrb	r3, [r7, #2]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d011      	beq.n	800329a <ucg_font_decode_len+0xb0>
 8003276:	7dbb      	ldrb	r3, [r7, #22]
 8003278:	b21c      	sxth	r4, r3
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	7b9b      	ldrb	r3, [r3, #14]
 800327e:	b21b      	sxth	r3, r3
 8003280:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8003284:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	9201      	str	r2, [sp, #4]
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	4623      	mov	r3, r4
 8003290:	4602      	mov	r2, r0
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 fbc0 	bl	8003a18 <ucg_Draw90Line>
 8003298:	e014      	b.n	80032c4 <ucg_font_decode_len+0xda>
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	7b5b      	ldrb	r3, [r3, #13]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d110      	bne.n	80032c4 <ucg_font_decode_len+0xda>
 80032a2:	7dbb      	ldrb	r3, [r7, #22]
 80032a4:	b21c      	sxth	r4, r3
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	7b9b      	ldrb	r3, [r3, #14]
 80032aa:	b21b      	sxth	r3, r3
 80032ac:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 80032b0:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80032b4:	2201      	movs	r2, #1
 80032b6:	9201      	str	r2, [sp, #4]
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	4623      	mov	r3, r4
 80032bc:	4602      	mov	r2, r0
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fbaa 	bl	8003a18 <ucg_Draw90Line>
 80032c4:	7dfa      	ldrb	r2, [r7, #23]
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d309      	bcc.n	80032e0 <ucg_font_decode_len+0xf6>
 80032cc:	7dfa      	ldrb	r2, [r7, #23]
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	75fb      	strb	r3, [r7, #23]
 80032d4:	2300      	movs	r3, #0
 80032d6:	757b      	strb	r3, [r7, #21]
 80032d8:	7d3b      	ldrb	r3, [r7, #20]
 80032da:	3301      	adds	r3, #1
 80032dc:	753b      	strb	r3, [r7, #20]
 80032de:	e799      	b.n	8003214 <ucg_font_decode_len+0x2a>
 80032e0:	bf00      	nop
 80032e2:	7d7a      	ldrb	r2, [r7, #21]
 80032e4:	7dfb      	ldrb	r3, [r7, #23]
 80032e6:	4413      	add	r3, r2
 80032e8:	757b      	strb	r3, [r7, #21]
 80032ea:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	721a      	strb	r2, [r3, #8]
 80032f2:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	725a      	strb	r2, [r3, #9]
 80032fa:	bf00      	nop
 80032fc:	371c      	adds	r7, #28
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd90      	pop	{r4, r7, pc}

08003302 <ucg_font_setup_decode>:
 8003302:	b580      	push	{r7, lr}
 8003304:	b084      	sub	sp, #16
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	6039      	str	r1, [r7, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3380      	adds	r3, #128	; 0x80
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	731a      	strb	r2, [r3, #12]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	1c5a      	adds	r2, r3, #1
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8003338:	4619      	mov	r1, r3
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f7ff fe6d 	bl	800301a <ucg_font_decode_get_unsigned_bits>
 8003340:	4603      	mov	r3, r0
 8003342:	b25a      	sxtb	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	729a      	strb	r2, [r3, #10]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800334e:	4619      	mov	r1, r3
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f7ff fe62 	bl	800301a <ucg_font_decode_get_unsigned_bits>
 8003356:	4603      	mov	r3, r0
 8003358:	b25a      	sxtb	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	72da      	strb	r2, [r3, #11]
 800335e:	bf00      	nop
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <ucg_font_decode_glyph>:
 8003366:	b580      	push	{r7, lr}
 8003368:	b084      	sub	sp, #16
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	6039      	str	r1, [r7, #0]
 8003370:	6839      	ldr	r1, [r7, #0]
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7ff ffc5 	bl	8003302 <ucg_font_setup_decode>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800337e:	73fb      	strb	r3, [r7, #15]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800338c:	4619      	mov	r1, r3
 800338e:	4610      	mov	r0, r2
 8003390:	f7ff fe8e 	bl	80030b0 <ucg_font_decode_get_signed_bits>
 8003394:	4603      	mov	r3, r0
 8003396:	73bb      	strb	r3, [r7, #14]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 80033a4:	4619      	mov	r1, r3
 80033a6:	4610      	mov	r0, r2
 80033a8:	f7ff fe82 	bl	80030b0 <ucg_font_decode_get_signed_bits>
 80033ac:	4603      	mov	r3, r0
 80033ae:	737b      	strb	r3, [r7, #13]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80033bc:	4619      	mov	r1, r3
 80033be:	4610      	mov	r0, r2
 80033c0:	f7ff fe76 	bl	80030b0 <ucg_font_decode_get_signed_bits>
 80033c4:	4603      	mov	r3, r0
 80033c6:	733b      	strb	r3, [r7, #12]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f993 308a 	ldrsb.w	r3, [r3, #138]	; 0x8a
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	dd69      	ble.n	80034a6 <ucg_font_decode_glyph+0x140>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f9b3 0084 	ldrsh.w	r0, [r3, #132]	; 0x84
 80033d8:	7bfa      	ldrb	r2, [r7, #15]
 80033da:	7b7b      	ldrb	r3, [r7, #13]
 80033dc:	4413      	add	r3, r2
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	425b      	negs	r3, r3
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	b25a      	sxtb	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80033ec:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80033f0:	f7ff febe 	bl	8003170 <ucg_add_vector_x>
 80033f4:	4603      	mov	r3, r0
 80033f6:	461a      	mov	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f9b3 0086 	ldrsh.w	r0, [r3, #134]	; 0x86
 8003404:	7bfa      	ldrb	r2, [r7, #15]
 8003406:	7b7b      	ldrb	r3, [r7, #13]
 8003408:	4413      	add	r3, r2
 800340a:	b2db      	uxtb	r3, r3
 800340c:	425b      	negs	r3, r3
 800340e:	b2db      	uxtb	r3, r3
 8003410:	b25a      	sxtb	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8003418:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800341c:	f7ff fe6b 	bl	80030f6 <ucg_add_vector_y>
 8003420:	4603      	mov	r3, r0
 8003422:	461a      	mov	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003446:	4619      	mov	r1, r3
 8003448:	4610      	mov	r0, r2
 800344a:	f7ff fde6 	bl	800301a <ucg_font_decode_get_unsigned_bits>
 800344e:	4603      	mov	r3, r0
 8003450:	72fb      	strb	r3, [r7, #11]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800345e:	4619      	mov	r1, r3
 8003460:	4610      	mov	r0, r2
 8003462:	f7ff fdda 	bl	800301a <ucg_font_decode_get_unsigned_bits>
 8003466:	4603      	mov	r3, r0
 8003468:	72bb      	strb	r3, [r7, #10]
 800346a:	7afb      	ldrb	r3, [r7, #11]
 800346c:	2200      	movs	r2, #0
 800346e:	4619      	mov	r1, r3
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7ff feba 	bl	80031ea <ucg_font_decode_len>
 8003476:	7abb      	ldrb	r3, [r7, #10]
 8003478:	2201      	movs	r2, #1
 800347a:	4619      	mov	r1, r3
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7ff feb4 	bl	80031ea <ucg_font_decode_len>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3380      	adds	r3, #128	; 0x80
 8003486:	2101      	movs	r1, #1
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff fdc6 	bl	800301a <ucg_font_decode_get_unsigned_bits>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1ea      	bne.n	800346a <ucg_font_decode_glyph+0x104>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f993 3089 	ldrsb.w	r3, [r3, #137]	; 0x89
 800349a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800349e:	429a      	cmp	r2, r3
 80034a0:	dd00      	ble.n	80034a4 <ucg_font_decode_glyph+0x13e>
 80034a2:	e7ca      	b.n	800343a <ucg_font_decode_glyph+0xd4>
 80034a4:	bf00      	nop
 80034a6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <ucg_font_get_glyph_data>:
 80034b2:	b480      	push	{r7}
 80034b4:	b085      	sub	sp, #20
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
 80034ba:	460b      	mov	r3, r1
 80034bc:	70fb      	strb	r3, [r7, #3]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	3315      	adds	r3, #21
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	78fb      	ldrb	r3, [r7, #3]
 80034cc:	2b60      	cmp	r3, #96	; 0x60
 80034ce:	d907      	bls.n	80034e0 <ucg_font_get_glyph_data+0x2e>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 80034d6:	461a      	mov	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4413      	add	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	e009      	b.n	80034f4 <ucg_font_get_glyph_data+0x42>
 80034e0:	78fb      	ldrb	r3, [r7, #3]
 80034e2:	2b40      	cmp	r3, #64	; 0x40
 80034e4:	d906      	bls.n	80034f4 <ucg_font_get_glyph_data+0x42>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 80034ec:	461a      	mov	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	4413      	add	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	3301      	adds	r3, #1
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00e      	beq.n	800351c <ucg_font_get_glyph_data+0x6a>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	78fa      	ldrb	r2, [r7, #3]
 8003504:	429a      	cmp	r2, r3
 8003506:	d101      	bne.n	800350c <ucg_font_get_glyph_data+0x5a>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	e009      	b.n	8003520 <ucg_font_get_glyph_data+0x6e>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	3301      	adds	r3, #1
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4413      	add	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	e7eb      	b.n	80034f4 <ucg_font_get_glyph_data+0x42>
 800351c:	bf00      	nop
 800351e:	2300      	movs	r3, #0
 8003520:	4618      	mov	r0, r3
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <ucg_font_draw_glyph>:
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	4608      	mov	r0, r1
 8003536:	4611      	mov	r1, r2
 8003538:	461a      	mov	r2, r3
 800353a:	4603      	mov	r3, r0
 800353c:	817b      	strh	r3, [r7, #10]
 800353e:	460b      	mov	r3, r1
 8003540:	813b      	strh	r3, [r7, #8]
 8003542:	4613      	mov	r3, r2
 8003544:	71fb      	strb	r3, [r7, #7]
 8003546:	2300      	movs	r3, #0
 8003548:	82fb      	strh	r3, [r7, #22]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	897a      	ldrh	r2, [r7, #10]
 800354e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	893a      	ldrh	r2, [r7, #8]
 8003556:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	79fa      	ldrb	r2, [r7, #7]
 800355e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 8003562:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003566:	4619      	mov	r1, r3
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f7ff ffa2 	bl	80034b2 <ucg_font_get_glyph_data>
 800356e:	6138      	str	r0, [r7, #16]
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d005      	beq.n	8003582 <ucg_font_draw_glyph+0x56>
 8003576:	6939      	ldr	r1, [r7, #16]
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f7ff fef4 	bl	8003366 <ucg_font_decode_glyph>
 800357e:	4603      	mov	r3, r0
 8003580:	82fb      	strh	r3, [r7, #22]
 8003582:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003586:	4618      	mov	r0, r3
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <ucg_SetFontMode>:
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	460b      	mov	r3, r1
 8003598:	70fb      	strb	r3, [r7, #3]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	78fa      	ldrb	r2, [r7, #3]
 800359e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
	...

080035b0 <ucg_DrawGlyph>:
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af02      	add	r7, sp, #8
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	4608      	mov	r0, r1
 80035ba:	4611      	mov	r1, r2
 80035bc:	461a      	mov	r2, r3
 80035be:	4603      	mov	r3, r0
 80035c0:	817b      	strh	r3, [r7, #10]
 80035c2:	460b      	mov	r3, r1
 80035c4:	813b      	strh	r3, [r7, #8]
 80035c6:	4613      	mov	r3, r2
 80035c8:	71fb      	strb	r3, [r7, #7]
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d837      	bhi.n	8003640 <ucg_DrawGlyph+0x90>
 80035d0:	a201      	add	r2, pc, #4	; (adr r2, 80035d8 <ucg_DrawGlyph+0x28>)
 80035d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d6:	bf00      	nop
 80035d8:	080035e9 	.word	0x080035e9
 80035dc:	080035ff 	.word	0x080035ff
 80035e0:	08003615 	.word	0x08003615
 80035e4:	0800362b 	.word	0x0800362b
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	4798      	blx	r3
 80035f0:	4603      	mov	r3, r0
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	893b      	ldrh	r3, [r7, #8]
 80035f6:	4413      	add	r3, r2
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	813b      	strh	r3, [r7, #8]
 80035fc:	e020      	b.n	8003640 <ucg_DrawGlyph+0x90>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	4798      	blx	r3
 8003606:	4603      	mov	r3, r0
 8003608:	897a      	ldrh	r2, [r7, #10]
 800360a:	b29b      	uxth	r3, r3
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	b29b      	uxth	r3, r3
 8003610:	817b      	strh	r3, [r7, #10]
 8003612:	e015      	b.n	8003640 <ucg_DrawGlyph+0x90>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	4798      	blx	r3
 800361c:	4603      	mov	r3, r0
 800361e:	893a      	ldrh	r2, [r7, #8]
 8003620:	b29b      	uxth	r3, r3
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	b29b      	uxth	r3, r3
 8003626:	813b      	strh	r3, [r7, #8]
 8003628:	e00a      	b.n	8003640 <ucg_DrawGlyph+0x90>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	4798      	blx	r3
 8003632:	4603      	mov	r3, r0
 8003634:	b29a      	uxth	r2, r3
 8003636:	897b      	ldrh	r3, [r7, #10]
 8003638:	4413      	add	r3, r2
 800363a:	b29b      	uxth	r3, r3
 800363c:	817b      	strh	r3, [r7, #10]
 800363e:	bf00      	nop
 8003640:	79f8      	ldrb	r0, [r7, #7]
 8003642:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003646:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800364a:	7e3b      	ldrb	r3, [r7, #24]
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	4603      	mov	r3, r0
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f7ff ff6b 	bl	800352c <ucg_font_draw_glyph>
 8003656:	4603      	mov	r3, r0
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <task_drawString>:
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af02      	add	r7, sp, #8
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	2300      	movs	r3, #0
 800366a:	81fb      	strh	r3, [r7, #14]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	60bb      	str	r3, [r7, #8]
 8003670:	4b45      	ldr	r3, [pc, #276]	; (8003788 <task_drawString+0x128>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d002      	beq.n	800367e <task_drawString+0x1e>
 8003678:	2b01      	cmp	r3, #1
 800367a:	d01e      	beq.n	80036ba <task_drawString+0x5a>
 800367c:	e07b      	b.n	8003776 <task_drawString+0x116>
 800367e:	4843      	ldr	r0, [pc, #268]	; (800378c <task_drawString+0x12c>)
 8003680:	f000 fb7b 	bl	8003d7a <bufNumItems>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d007      	beq.n	800369a <task_drawString+0x3a>
 800368a:	4941      	ldr	r1, [pc, #260]	; (8003790 <task_drawString+0x130>)
 800368c:	483f      	ldr	r0, [pc, #252]	; (800378c <task_drawString+0x12c>)
 800368e:	f000 fc0d 	bl	8003eac <bufDeDat>
 8003692:	4b3d      	ldr	r3, [pc, #244]	; (8003788 <task_drawString+0x128>)
 8003694:	2201      	movs	r2, #1
 8003696:	701a      	strb	r2, [r3, #0]
 8003698:	e071      	b.n	800377e <task_drawString+0x11e>
 800369a:	4b3e      	ldr	r3, [pc, #248]	; (8003794 <task_drawString+0x134>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2bff      	cmp	r3, #255	; 0xff
 80036a0:	d007      	beq.n	80036b2 <task_drawString+0x52>
 80036a2:	4b3c      	ldr	r3, [pc, #240]	; (8003794 <task_drawString+0x134>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fe fbf6 	bl	8001e98 <TimerStop>
 80036ac:	4b39      	ldr	r3, [pc, #228]	; (8003794 <task_drawString+0x134>)
 80036ae:	22ff      	movs	r2, #255	; 0xff
 80036b0:	701a      	strb	r2, [r3, #0]
 80036b2:	4b35      	ldr	r3, [pc, #212]	; (8003788 <task_drawString+0x128>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	701a      	strb	r2, [r3, #0]
 80036b8:	e061      	b.n	800377e <task_drawString+0x11e>
 80036ba:	4b35      	ldr	r3, [pc, #212]	; (8003790 <task_drawString+0x130>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d054      	beq.n	800376e <task_drawString+0x10e>
 80036c4:	4b32      	ldr	r3, [pc, #200]	; (8003790 <task_drawString+0x130>)
 80036c6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80036ca:	4b31      	ldr	r3, [pc, #196]	; (8003790 <task_drawString+0x130>)
 80036cc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80036d0:	4b2f      	ldr	r3, [pc, #188]	; (8003790 <task_drawString+0x130>)
 80036d2:	7918      	ldrb	r0, [r3, #4]
 80036d4:	4b2e      	ldr	r3, [pc, #184]	; (8003790 <task_drawString+0x130>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	4603      	mov	r3, r0
 80036de:	68b8      	ldr	r0, [r7, #8]
 80036e0:	f7ff ff66 	bl	80035b0 <ucg_DrawGlyph>
 80036e4:	4603      	mov	r3, r0
 80036e6:	81fb      	strh	r3, [r7, #14]
 80036e8:	4b29      	ldr	r3, [pc, #164]	; (8003790 <task_drawString+0x130>)
 80036ea:	791b      	ldrb	r3, [r3, #4]
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	d837      	bhi.n	8003760 <task_drawString+0x100>
 80036f0:	a201      	add	r2, pc, #4	; (adr r2, 80036f8 <task_drawString+0x98>)
 80036f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f6:	bf00      	nop
 80036f8:	08003709 	.word	0x08003709
 80036fc:	0800371f 	.word	0x0800371f
 8003700:	08003735 	.word	0x08003735
 8003704:	0800374b 	.word	0x0800374b
 8003708:	4b21      	ldr	r3, [pc, #132]	; (8003790 <task_drawString+0x130>)
 800370a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800370e:	b29a      	uxth	r2, r3
 8003710:	89fb      	ldrh	r3, [r7, #14]
 8003712:	4413      	add	r3, r2
 8003714:	b29b      	uxth	r3, r3
 8003716:	b21a      	sxth	r2, r3
 8003718:	4b1d      	ldr	r3, [pc, #116]	; (8003790 <task_drawString+0x130>)
 800371a:	801a      	strh	r2, [r3, #0]
 800371c:	e021      	b.n	8003762 <task_drawString+0x102>
 800371e:	4b1c      	ldr	r3, [pc, #112]	; (8003790 <task_drawString+0x130>)
 8003720:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003724:	b29a      	uxth	r2, r3
 8003726:	89fb      	ldrh	r3, [r7, #14]
 8003728:	4413      	add	r3, r2
 800372a:	b29b      	uxth	r3, r3
 800372c:	b21a      	sxth	r2, r3
 800372e:	4b18      	ldr	r3, [pc, #96]	; (8003790 <task_drawString+0x130>)
 8003730:	805a      	strh	r2, [r3, #2]
 8003732:	e016      	b.n	8003762 <task_drawString+0x102>
 8003734:	4b16      	ldr	r3, [pc, #88]	; (8003790 <task_drawString+0x130>)
 8003736:	f9b3 3000 	ldrsh.w	r3, [r3]
 800373a:	b29a      	uxth	r2, r3
 800373c:	89fb      	ldrh	r3, [r7, #14]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	b29b      	uxth	r3, r3
 8003742:	b21a      	sxth	r2, r3
 8003744:	4b12      	ldr	r3, [pc, #72]	; (8003790 <task_drawString+0x130>)
 8003746:	801a      	strh	r2, [r3, #0]
 8003748:	e00b      	b.n	8003762 <task_drawString+0x102>
 800374a:	4b11      	ldr	r3, [pc, #68]	; (8003790 <task_drawString+0x130>)
 800374c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003750:	b29a      	uxth	r2, r3
 8003752:	89fb      	ldrh	r3, [r7, #14]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	b29b      	uxth	r3, r3
 8003758:	b21a      	sxth	r2, r3
 800375a:	4b0d      	ldr	r3, [pc, #52]	; (8003790 <task_drawString+0x130>)
 800375c:	805a      	strh	r2, [r3, #2]
 800375e:	e000      	b.n	8003762 <task_drawString+0x102>
 8003760:	bf00      	nop
 8003762:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <task_drawString+0x130>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	3301      	adds	r3, #1
 8003768:	4a09      	ldr	r2, [pc, #36]	; (8003790 <task_drawString+0x130>)
 800376a:	6093      	str	r3, [r2, #8]
 800376c:	e007      	b.n	800377e <task_drawString+0x11e>
 800376e:	4b06      	ldr	r3, [pc, #24]	; (8003788 <task_drawString+0x128>)
 8003770:	2200      	movs	r2, #0
 8003772:	701a      	strb	r2, [r3, #0]
 8003774:	e003      	b.n	800377e <task_drawString+0x11e>
 8003776:	4b04      	ldr	r3, [pc, #16]	; (8003788 <task_drawString+0x128>)
 8003778:	2200      	movs	r2, #0
 800377a:	701a      	strb	r2, [r3, #0]
 800377c:	bf00      	nop
 800377e:	bf00      	nop
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	20001d7c 	.word	0x20001d7c
 800378c:	20000d6c 	.word	0x20000d6c
 8003790:	20001ec8 	.word	0x20001ec8
 8003794:	20000594 	.word	0x20000594

08003798 <ucg_DrawString>:
 8003798:	b580      	push	{r7, lr}
 800379a:	b08a      	sub	sp, #40	; 0x28
 800379c:	af02      	add	r7, sp, #8
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	4608      	mov	r0, r1
 80037a2:	4611      	mov	r1, r2
 80037a4:	461a      	mov	r2, r3
 80037a6:	4603      	mov	r3, r0
 80037a8:	817b      	strh	r3, [r7, #10]
 80037aa:	460b      	mov	r3, r1
 80037ac:	813b      	strh	r3, [r7, #8]
 80037ae:	4613      	mov	r3, r2
 80037b0:	71fb      	strb	r3, [r7, #7]
 80037b2:	2300      	movs	r3, #0
 80037b4:	83fb      	strh	r3, [r7, #30]
 80037b6:	897b      	ldrh	r3, [r7, #10]
 80037b8:	823b      	strh	r3, [r7, #16]
 80037ba:	893b      	ldrh	r3, [r7, #8]
 80037bc:	827b      	strh	r3, [r7, #18]
 80037be:	79fb      	ldrb	r3, [r7, #7]
 80037c0:	753b      	strb	r3, [r7, #20]
 80037c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c4:	61bb      	str	r3, [r7, #24]
 80037c6:	f107 0310 	add.w	r3, r7, #16
 80037ca:	4619      	mov	r1, r3
 80037cc:	480c      	ldr	r0, [pc, #48]	; (8003800 <ucg_DrawString+0x68>)
 80037ce:	f000 fb1f 	bl	8003e10 <bufEnDat>
 80037d2:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <ucg_DrawString+0x6c>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2bff      	cmp	r3, #255	; 0xff
 80037d8:	d10b      	bne.n	80037f2 <ucg_DrawString+0x5a>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <ucg_DrawString+0x70>)
 80037e0:	22ff      	movs	r2, #255	; 0xff
 80037e2:	211e      	movs	r1, #30
 80037e4:	4809      	ldr	r0, [pc, #36]	; (800380c <ucg_DrawString+0x74>)
 80037e6:	f7fe faf5 	bl	8001dd4 <TimerStart>
 80037ea:	4603      	mov	r3, r0
 80037ec:	461a      	mov	r2, r3
 80037ee:	4b05      	ldr	r3, [pc, #20]	; (8003804 <ucg_DrawString+0x6c>)
 80037f0:	701a      	strb	r2, [r3, #0]
 80037f2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80037f6:	4618      	mov	r0, r3
 80037f8:	3720      	adds	r7, #32
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20000d6c 	.word	0x20000d6c
 8003804:	20000594 	.word	0x20000594
 8003808:	08003661 	.word	0x08003661
 800380c:	08005b08 	.word	0x08005b08

08003810 <ucg_UpdateRefHeight>:
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800381c:	2b00      	cmp	r3, #0
 800381e:	d05d      	beq.n	80038dc <ucg_UpdateRefHeight+0xcc>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f993 209d 	ldrsb.w	r2, [r3, #157]	; 0x9d
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f993 209e 	ldrsb.w	r2, [r3, #158]	; 0x9e
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 800383e:	2b00      	cmp	r3, #0
 8003840:	d04d      	beq.n	80038de <ucg_UpdateRefHeight+0xce>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8003848:	2b01      	cmp	r3, #1
 800384a:	d11c      	bne.n	8003886 <ucg_UpdateRefHeight+0x76>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f993 20ac 	ldrsb.w	r2, [r3, #172]	; 0xac
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f993 309f 	ldrsb.w	r3, [r3, #159]	; 0x9f
 8003858:	429a      	cmp	r2, r3
 800385a:	da05      	bge.n	8003868 <ucg_UpdateRefHeight+0x58>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f993 209f 	ldrsb.w	r2, [r3, #159]	; 0x9f
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f993 20ad 	ldrsb.w	r2, [r3, #173]	; 0xad
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 8003874:	429a      	cmp	r2, r3
 8003876:	dd32      	ble.n	80038de <ucg_UpdateRefHeight+0xce>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f993 20a0 	ldrsb.w	r2, [r3, #160]	; 0xa0
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8003884:	e02b      	b.n	80038de <ucg_UpdateRefHeight+0xce>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f993 30ac 	ldrsb.w	r3, [r3, #172]	; 0xac
 800388c:	461a      	mov	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f993 309a 	ldrsb.w	r3, [r3, #154]	; 0x9a
 8003894:	4619      	mov	r1, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 800389c:	440b      	add	r3, r1
 800389e:	429a      	cmp	r2, r3
 80038a0:	da0d      	bge.n	80038be <ucg_UpdateRefHeight+0xae>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f993 309a 	ldrsb.w	r3, [r3, #154]	; 0x9a
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	4413      	add	r3, r2
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	b25a      	sxtb	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f993 20ad 	ldrsb.w	r2, [r3, #173]	; 0xad
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 80038ca:	429a      	cmp	r2, r3
 80038cc:	dd07      	ble.n	80038de <ucg_UpdateRefHeight+0xce>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f993 209c 	ldrsb.w	r2, [r3, #156]	; 0x9c
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 80038da:	e000      	b.n	80038de <ucg_UpdateRefHeight+0xce>
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <ucg_font_calc_vref_font>:
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	2300      	movs	r3, #0
 80038f2:	4618      	mov	r0, r3
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
	...

08003900 <ucg_SetFontPosBaseline>:
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a04      	ldr	r2, [pc, #16]	; (800391c <ucg_SetFontPosBaseline+0x1c>)
 800390c:	67da      	str	r2, [r3, #124]	; 0x7c
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	080038e9 	.word	0x080038e9

08003920 <ucg_SetFont>:
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d012      	beq.n	800395a <ucg_SetFont+0x3a>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	679a      	str	r2, [r3, #120]	; 0x78
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3390      	adds	r3, #144	; 0x90
 800393e:	6839      	ldr	r1, [r7, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff fac9 	bl	8002ed8 <ucg_read_font_info>
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff ff62 	bl	8003810 <ucg_UpdateRefHeight>
 800394c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003950:	220c      	movs	r2, #12
 8003952:	4904      	ldr	r1, [pc, #16]	; (8003964 <ucg_SetFont+0x44>)
 8003954:	4804      	ldr	r0, [pc, #16]	; (8003968 <ucg_SetFont+0x48>)
 8003956:	f000 f9f5 	bl	8003d44 <bufInit>
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20000d6c 	.word	0x20000d6c
 8003968:	20000d7c 	.word	0x20000d7c

0800396c <ucg_init_struct>:
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	7813      	ldrb	r3, [r2, #0]
 8003978:	f36f 0300 	bfc	r3, #0, #1
 800397c:	7013      	strb	r3, [r2, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	611a      	str	r2, [r3, #16]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	865a      	strh	r2, [r3, #50]	; 0x32
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	679a      	str	r2, [r3, #120]	; 0x78
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <ucg_Init>:
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
 80039c8:	603b      	str	r3, [r7, #0]
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f7ff ffce 	bl	800396c <ucg_init_struct>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d103      	bne.n	80039de <ucg_Init+0x22>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4a0e      	ldr	r2, [pc, #56]	; (8003a14 <ucg_Init+0x58>)
 80039da:	60da      	str	r2, [r3, #12]
 80039dc:	e002      	b.n	80039e4 <ucg_Init+0x28>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	60da      	str	r2, [r3, #12]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	609a      	str	r2, [r3, #8]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	61da      	str	r2, [r3, #28]
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f7ff ff85 	bl	8003900 <ucg_SetFontPosBaseline>
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f7ff f996 	bl	8002d28 <ucg_PowerUp>
 80039fc:	4603      	mov	r3, r0
 80039fe:	82fb      	strh	r3, [r7, #22]
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f7ff f9d6 	bl	8002db2 <ucg_GetDimension>
 8003a06:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	0800298b 	.word	0x0800298b

08003a18 <ucg_Draw90Line>:
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	4608      	mov	r0, r1
 8003a22:	4611      	mov	r1, r2
 8003a24:	461a      	mov	r2, r3
 8003a26:	4603      	mov	r3, r0
 8003a28:	817b      	strh	r3, [r7, #10]
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	813b      	strh	r3, [r7, #8]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	80fb      	strh	r3, [r7, #6]
 8003a32:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003a36:	68f9      	ldr	r1, [r7, #12]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	4413      	add	r3, r2
 8003a3e:	440b      	add	r3, r1
 8003a40:	333a      	adds	r3, #58	; 0x3a
 8003a42:	781a      	ldrb	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003a4a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003a4e:	68f9      	ldr	r1, [r7, #12]
 8003a50:	4613      	mov	r3, r2
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	4413      	add	r3, r2
 8003a56:	440b      	add	r3, r1
 8003a58:	333b      	adds	r3, #59	; 0x3b
 8003a5a:	781a      	ldrb	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8003a62:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003a66:	68f9      	ldr	r1, [r7, #12]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	4413      	add	r3, r2
 8003a6e:	440b      	add	r3, r1
 8003a70:	333c      	adds	r3, #60	; 0x3c
 8003a72:	781a      	ldrb	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	897a      	ldrh	r2, [r7, #10]
 8003a7e:	849a      	strh	r2, [r3, #36]	; 0x24
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	893a      	ldrh	r2, [r7, #8]
 8003a84:	84da      	strh	r2, [r3, #38]	; 0x26
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	88fa      	ldrh	r2, [r7, #6]
 8003a8a:	859a      	strh	r2, [r3, #44]	; 0x2c
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8b3a      	ldrh	r2, [r7, #24]
 8003a90:	85da      	strh	r2, [r3, #46]	; 0x2e
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f7ff f99f 	bl	8002dd6 <ucg_DrawL90FXWithArg>
 8003a98:	bf00      	nop
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <ucg_DrawHLine>:
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	4608      	mov	r0, r1
 8003aaa:	4611      	mov	r1, r2
 8003aac:	461a      	mov	r2, r3
 8003aae:	4603      	mov	r3, r0
 8003ab0:	817b      	strh	r3, [r7, #10]
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	813b      	strh	r3, [r7, #8]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	80fb      	strh	r3, [r7, #6]
 8003aba:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003abe:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003ac2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	9301      	str	r3, [sp, #4]
 8003aca:	2300      	movs	r3, #0
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	4603      	mov	r3, r0
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f7ff ffa1 	bl	8003a18 <ucg_Draw90Line>
 8003ad6:	bf00      	nop
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <ucg_DrawVLine>:
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b086      	sub	sp, #24
 8003ae2:	af02      	add	r7, sp, #8
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	4608      	mov	r0, r1
 8003ae8:	4611      	mov	r1, r2
 8003aea:	461a      	mov	r2, r3
 8003aec:	4603      	mov	r3, r0
 8003aee:	817b      	strh	r3, [r7, #10]
 8003af0:	460b      	mov	r3, r1
 8003af2:	813b      	strh	r3, [r7, #8]
 8003af4:	4613      	mov	r3, r2
 8003af6:	80fb      	strh	r3, [r7, #6]
 8003af8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003afc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003b00:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003b04:	2300      	movs	r3, #0
 8003b06:	9301      	str	r3, [sp, #4]
 8003b08:	2301      	movs	r3, #1
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f7ff ff82 	bl	8003a18 <ucg_Draw90Line>
 8003b14:	bf00      	nop
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <ucg_SetColor>:
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	4608      	mov	r0, r1
 8003b26:	4611      	mov	r1, r2
 8003b28:	461a      	mov	r2, r3
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	70fb      	strb	r3, [r7, #3]
 8003b2e:	460b      	mov	r3, r1
 8003b30:	70bb      	strb	r3, [r7, #2]
 8003b32:	4613      	mov	r3, r2
 8003b34:	707b      	strb	r3, [r7, #1]
 8003b36:	78fa      	ldrb	r2, [r7, #3]
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	4413      	add	r3, r2
 8003b40:	440b      	add	r3, r1
 8003b42:	333a      	adds	r3, #58	; 0x3a
 8003b44:	78ba      	ldrb	r2, [r7, #2]
 8003b46:	701a      	strb	r2, [r3, #0]
 8003b48:	78fa      	ldrb	r2, [r7, #3]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	4413      	add	r3, r2
 8003b52:	440b      	add	r3, r1
 8003b54:	333b      	adds	r3, #59	; 0x3b
 8003b56:	787a      	ldrb	r2, [r7, #1]
 8003b58:	701a      	strb	r2, [r3, #0]
 8003b5a:	78fa      	ldrb	r2, [r7, #3]
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	4413      	add	r3, r2
 8003b64:	440b      	add	r3, r1
 8003b66:	333c      	adds	r3, #60	; 0x3c
 8003b68:	7c3a      	ldrb	r2, [r7, #16]
 8003b6a:	701a      	strb	r2, [r3, #0]
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <ucg_UndoRotate>:
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d006      	beq.n	8003b96 <ucg_UndoRotate+0x1e>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	609a      	str	r2, [r3, #8]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	611a      	str	r2, [r3, #16]
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7ff f90b 	bl	8002db2 <ucg_GetDimension>
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff f8f0 	bl	8002d82 <ucg_SetMaxClipRange>
 8003ba2:	bf00      	nop
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <ucg_rotate_180_xy>:
 8003baa:	b480      	push	{r7}
 8003bac:	b085      	sub	sp, #20
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	6039      	str	r1, [r7, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	8adb      	ldrh	r3, [r3, #22]
 8003bb8:	81fb      	strh	r3, [r7, #14]
 8003bba:	89fa      	ldrh	r2, [r7, #14]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	81fb      	strh	r3, [r7, #14]
 8003bca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	81fb      	strh	r3, [r7, #14]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	89fa      	ldrh	r2, [r7, #14]
 8003bda:	805a      	strh	r2, [r3, #2]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	8a9b      	ldrh	r3, [r3, #20]
 8003be0:	81bb      	strh	r3, [r7, #12]
 8003be2:	89ba      	ldrh	r2, [r7, #12]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	81bb      	strh	r3, [r7, #12]
 8003bf2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	81bb      	strh	r3, [r7, #12]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	89ba      	ldrh	r2, [r7, #12]
 8003c02:	801a      	strh	r2, [r3, #0]
 8003c04:	bf00      	nop
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <ucg_dev_rotate180>:
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	607a      	str	r2, [r7, #4]
 8003c1c:	817b      	strh	r3, [r7, #10]
 8003c1e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003c22:	3b0c      	subs	r3, #12
 8003c24:	2b0b      	cmp	r3, #11
 8003c26:	d866      	bhi.n	8003cf6 <ucg_dev_rotate180+0xe6>
 8003c28:	a201      	add	r2, pc, #4	; (adr r2, 8003c30 <ucg_dev_rotate180+0x20>)
 8003c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2e:	bf00      	nop
 8003c30:	08003c7f 	.word	0x08003c7f
 8003c34:	08003cf7 	.word	0x08003cf7
 8003c38:	08003cf7 	.word	0x08003cf7
 8003c3c:	08003c61 	.word	0x08003c61
 8003c40:	08003cf7 	.word	0x08003cf7
 8003c44:	08003cf7 	.word	0x08003cf7
 8003c48:	08003cf7 	.word	0x08003cf7
 8003c4c:	08003cf7 	.word	0x08003cf7
 8003c50:	08003cc7 	.word	0x08003cc7
 8003c54:	08003cc7 	.word	0x08003cc7
 8003c58:	08003cf7 	.word	0x08003cf7
 8003c5c:	08003cc7 	.word	0x08003cc7
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	3214      	adds	r2, #20
 8003c68:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	4798      	blx	r3
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	3314      	adds	r3, #20
 8003c76:	6818      	ldr	r0, [r3, #0]
 8003c78:	6010      	str	r0, [r2, #0]
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e043      	b.n	8003d06 <ucg_dev_rotate180+0xf6>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	4413      	add	r3, r2
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	b21a      	sxth	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	805a      	strh	r2, [r3, #2]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	4413      	add	r3, r2
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	b21a      	sxth	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	801a      	strh	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f7ff ff73 	bl	8003baa <ucg_rotate_180_xy>
 8003cc4:	e017      	b.n	8003cf6 <ucg_dev_rotate180+0xe6>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	3302      	adds	r3, #2
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	b21a      	sxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	85da      	strh	r2, [r3, #46]	; 0x2e
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	b21a      	sxth	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	85da      	strh	r2, [r3, #46]	; 0x2e
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3324      	adds	r3, #36	; 0x24
 8003cec:	4619      	mov	r1, r3
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f7ff ff5b 	bl	8003baa <ucg_rotate_180_xy>
 8003cf4:	bf00      	nop
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	4798      	blx	r3
 8003d04:	4603      	mov	r3, r0
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop

08003d10 <ucg_SetRotate180>:
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7ff ff2d 	bl	8003b78 <ucg_UndoRotate>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	611a      	str	r2, [r3, #16]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a05      	ldr	r2, [pc, #20]	; (8003d40 <ucg_SetRotate180+0x30>)
 8003d2a:	609a      	str	r2, [r3, #8]
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7ff f840 	bl	8002db2 <ucg_GetDimension>
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff f825 	bl	8002d82 <ucg_SetMaxClipRange>
 8003d38:	bf00      	nop
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	08003c11 	.word	0x08003c11

08003d44 <bufInit>:
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	4611      	mov	r1, r2
 8003d50:	461a      	mov	r2, r3
 8003d52:	460b      	mov	r3, r1
 8003d54:	71fb      	strb	r3, [r7, #7]
 8003d56:	4613      	mov	r3, r2
 8003d58:	80bb      	strh	r3, [r7, #4]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	88ba      	ldrh	r2, [r7, #4]
 8003d5e:	801a      	strh	r2, [r3, #0]
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	79fa      	ldrb	r2, [r7, #7]
 8003d64:	711a      	strb	r2, [r3, #4]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	60da      	str	r2, [r3, #12]
 8003d6c:	68b8      	ldr	r0, [r7, #8]
 8003d6e:	f000 f836 	bl	8003dde <bufFlush>
 8003d72:	bf00      	nop
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <bufNumItems>:
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	885b      	ldrh	r3, [r3, #2]
 8003d86:	4618      	mov	r0, r3
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <bufIsFull>:
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	885a      	ldrh	r2, [r3, #2]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	bf2c      	ite	cs
 8003da6:	2301      	movcs	r3, #1
 8003da8:	2300      	movcc	r3, #0
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	4618      	mov	r0, r3
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <bufIsEmpty>:
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	88da      	ldrh	r2, [r3, #6]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	891b      	ldrh	r3, [r3, #8]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	bf0c      	ite	eq
 8003dcc:	2301      	moveq	r3, #1
 8003dce:	2300      	movne	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <bufFlush>:
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b082      	sub	sp, #8
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	80da      	strh	r2, [r3, #6]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	811a      	strh	r2, [r3, #8]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	805a      	strh	r2, [r3, #2]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68d8      	ldr	r0, [r3, #12]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	461a      	mov	r2, r3
 8003e02:	2100      	movs	r1, #0
 8003e04:	f000 f894 	bl	8003f30 <memsetl>
 8003e08:	bf00      	nop
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <bufEnDat>:
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
 8003e1a:	b672      	cpsid	i
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	73fb      	strb	r3, [r7, #15]
 8003e20:	e021      	b.n	8003e66 <bufEnDat+0x56>
 8003e22:	7bfb      	ldrb	r3, [r7, #15]
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	441a      	add	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	6879      	ldr	r1, [r7, #4]
 8003e2e:	88c9      	ldrh	r1, [r1, #6]
 8003e30:	440b      	add	r3, r1
 8003e32:	7812      	ldrb	r2, [r2, #0]
 8003e34:	701a      	strb	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	88db      	ldrh	r3, [r3, #6]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	b21a      	sxth	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	881b      	ldrh	r3, [r3, #0]
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	b21b      	sxth	r3, r3
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	b21b      	sxth	r3, r3
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	80da      	strh	r2, [r3, #6]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	885b      	ldrh	r3, [r3, #2]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	805a      	strh	r2, [r3, #2]
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
 8003e62:	3301      	adds	r3, #1
 8003e64:	73fb      	strb	r3, [r7, #15]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	791b      	ldrb	r3, [r3, #4]
 8003e6a:	7bfa      	ldrb	r2, [r7, #15]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d3d8      	bcc.n	8003e22 <bufEnDat+0x12>
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7ff ff8e 	bl	8003d92 <bufIsFull>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d011      	beq.n	8003ea0 <bufEnDat+0x90>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	891a      	ldrh	r2, [r3, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	791b      	ldrb	r3, [r3, #4]
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	4413      	add	r3, r2
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	b21a      	sxth	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	b21b      	sxth	r3, r3
 8003e96:	4013      	ands	r3, r2
 8003e98:	b21b      	sxth	r3, r3
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	811a      	strh	r2, [r3, #8]
 8003ea0:	b662      	cpsie	i
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <bufDeDat>:
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
 8003eb6:	b672      	cpsid	i
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7ff ff7d 	bl	8003db8 <bufIsEmpty>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <bufDeDat+0x24>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	805a      	strh	r2, [r3, #2]
 8003eca:	b662      	cpsie	i
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e02b      	b.n	8003f28 <bufDeDat+0x7c>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	73fb      	strb	r3, [r7, #15]
 8003ed4:	e021      	b.n	8003f1a <bufDeDat+0x6e>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	8912      	ldrh	r2, [r2, #8]
 8003ede:	441a      	add	r2, r3
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
 8003ee2:	6839      	ldr	r1, [r7, #0]
 8003ee4:	440b      	add	r3, r1
 8003ee6:	7812      	ldrb	r2, [r2, #0]
 8003ee8:	701a      	strb	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	891b      	ldrh	r3, [r3, #8]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	b21a      	sxth	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	b21b      	sxth	r3, r3
 8003efe:	4013      	ands	r3, r2
 8003f00:	b21b      	sxth	r3, r3
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	811a      	strh	r2, [r3, #8]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	885b      	ldrh	r3, [r3, #2]
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	805a      	strh	r2, [r3, #2]
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
 8003f16:	3301      	adds	r3, #1
 8003f18:	73fb      	strb	r3, [r7, #15]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	791b      	ldrb	r3, [r3, #4]
 8003f1e:	7bfa      	ldrb	r2, [r7, #15]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d3d8      	bcc.n	8003ed6 <bufDeDat+0x2a>
 8003f24:	b662      	cpsie	i
 8003f26:	2300      	movs	r3, #0
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <memsetl>:
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	70fb      	strb	r3, [r7, #3]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	803b      	strh	r3, [r7, #0]
 8003f40:	e004      	b.n	8003f4c <memsetl+0x1c>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	1c5a      	adds	r2, r3, #1
 8003f46:	607a      	str	r2, [r7, #4]
 8003f48:	78fa      	ldrb	r2, [r7, #3]
 8003f4a:	701a      	strb	r2, [r3, #0]
 8003f4c:	883b      	ldrh	r3, [r7, #0]
 8003f4e:	1e5a      	subs	r2, r3, #1
 8003f50:	803a      	strh	r2, [r7, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f5      	bne.n	8003f42 <memsetl+0x12>
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <ADC_DeInit>:
 8003f62:	b580      	push	{r7, lr}
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	2101      	movs	r1, #1
 8003f68:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003f6c:	f7fd fe62 	bl	8001c34 <RCC_APB2PeriphResetCmd>
 8003f70:	2100      	movs	r1, #0
 8003f72:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003f76:	f7fd fe5d 	bl	8001c34 <RCC_APB2PeriphResetCmd>
 8003f7a:	bf00      	nop
 8003f7c:	bd80      	pop	{r7, pc}
	...

08003f80 <ADC_Init>:
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	2300      	movs	r3, #0
 8003f90:	72fb      	strb	r3, [r7, #11]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003f9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	791b      	ldrb	r3, [r3, #4]
 8003fa8:	021a      	lsls	r2, r3, #8
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	605a      	str	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4b18      	ldr	r3, [pc, #96]	; (8004028 <ADC_Init+0xa8>)
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	691a      	ldr	r2, [r3, #16]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	795b      	ldrb	r3, [r3, #5]
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	609a      	str	r2, [r3, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	7d1b      	ldrb	r3, [r3, #20]
 8004000:	3b01      	subs	r3, #1
 8004002:	b2da      	uxtb	r2, r3
 8004004:	7afb      	ldrb	r3, [r7, #11]
 8004006:	4313      	orrs	r3, r2
 8004008:	72fb      	strb	r3, [r7, #11]
 800400a:	7afb      	ldrb	r3, [r7, #11]
 800400c:	051b      	lsls	r3, r3, #20
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	4313      	orrs	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	62da      	str	r2, [r3, #44]	; 0x2c
 800401a:	bf00      	nop
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	c0fff7fd 	.word	0xc0fff7fd

0800402c <ADC_CommonInit>:
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	2300      	movs	r3, #0
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	4b0e      	ldr	r3, [pc, #56]	; (8004074 <ADC_CommonInit+0x48>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4b0d      	ldr	r3, [pc, #52]	; (8004078 <ADC_CommonInit+0x4c>)
 8004042:	4013      	ands	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	431a      	orrs	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	4313      	orrs	r3, r2
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	4a04      	ldr	r2, [pc, #16]	; (8004074 <ADC_CommonInit+0x48>)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6053      	str	r3, [r2, #4]
 8004068:	bf00      	nop
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	40012300 	.word	0x40012300
 8004078:	fffc30e0 	.word	0xfffc30e0

0800407c <ADC_Cmd>:
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	460b      	mov	r3, r1
 8004086:	70fb      	strb	r3, [r7, #3]
 8004088:	78fb      	ldrb	r3, [r7, #3]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d006      	beq.n	800409c <ADC_Cmd+0x20>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f043 0201 	orr.w	r2, r3, #1
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	609a      	str	r2, [r3, #8]
 800409a:	e005      	b.n	80040a8 <ADC_Cmd+0x2c>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f023 0201 	bic.w	r2, r3, #1
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	609a      	str	r2, [r3, #8]
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <ADC_RegularChannelConfig>:
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	4608      	mov	r0, r1
 80040be:	4611      	mov	r1, r2
 80040c0:	461a      	mov	r2, r3
 80040c2:	4603      	mov	r3, r0
 80040c4:	70fb      	strb	r3, [r7, #3]
 80040c6:	460b      	mov	r3, r1
 80040c8:	70bb      	strb	r3, [r7, #2]
 80040ca:	4613      	mov	r3, r2
 80040cc:	707b      	strb	r3, [r7, #1]
 80040ce:	2300      	movs	r3, #0
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	2300      	movs	r3, #0
 80040d4:	60bb      	str	r3, [r7, #8]
 80040d6:	78fb      	ldrb	r3, [r7, #3]
 80040d8:	2b09      	cmp	r3, #9
 80040da:	d923      	bls.n	8004124 <ADC_RegularChannelConfig+0x70>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	78fb      	ldrb	r3, [r7, #3]
 80040e4:	f1a3 020a 	sub.w	r2, r3, #10
 80040e8:	4613      	mov	r3, r2
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	4413      	add	r3, r2
 80040ee:	2207      	movs	r2, #7
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	60bb      	str	r3, [r7, #8]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	43db      	mvns	r3, r3
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4013      	ands	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	7879      	ldrb	r1, [r7, #1]
 8004102:	78fb      	ldrb	r3, [r7, #3]
 8004104:	f1a3 020a 	sub.w	r2, r3, #10
 8004108:	4613      	mov	r3, r2
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	4413      	add	r3, r2
 800410e:	fa01 f303 	lsl.w	r3, r1, r3
 8004112:	60bb      	str	r3, [r7, #8]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	4313      	orrs	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	60da      	str	r2, [r3, #12]
 8004122:	e01e      	b.n	8004162 <ADC_RegularChannelConfig+0xae>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	78fa      	ldrb	r2, [r7, #3]
 800412c:	4613      	mov	r3, r2
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	4413      	add	r3, r2
 8004132:	2207      	movs	r2, #7
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	60bb      	str	r3, [r7, #8]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	43db      	mvns	r3, r3
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4013      	ands	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	7879      	ldrb	r1, [r7, #1]
 8004146:	78fa      	ldrb	r2, [r7, #3]
 8004148:	4613      	mov	r3, r2
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	4413      	add	r3, r2
 800414e:	fa01 f303 	lsl.w	r3, r1, r3
 8004152:	60bb      	str	r3, [r7, #8]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	4313      	orrs	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	611a      	str	r2, [r3, #16]
 8004162:	78bb      	ldrb	r3, [r7, #2]
 8004164:	2b06      	cmp	r3, #6
 8004166:	d821      	bhi.n	80041ac <ADC_RegularChannelConfig+0xf8>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	78bb      	ldrb	r3, [r7, #2]
 8004170:	1e5a      	subs	r2, r3, #1
 8004172:	4613      	mov	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	221f      	movs	r2, #31
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	60bb      	str	r3, [r7, #8]
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	43db      	mvns	r3, r3
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	4013      	ands	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	78f9      	ldrb	r1, [r7, #3]
 800418c:	78bb      	ldrb	r3, [r7, #2]
 800418e:	1e5a      	subs	r2, r3, #1
 8004190:	4613      	mov	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	fa01 f303 	lsl.w	r3, r1, r3
 800419a:	60bb      	str	r3, [r7, #8]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	635a      	str	r2, [r3, #52]	; 0x34
 80041aa:	e047      	b.n	800423c <ADC_RegularChannelConfig+0x188>
 80041ac:	78bb      	ldrb	r3, [r7, #2]
 80041ae:	2b0c      	cmp	r3, #12
 80041b0:	d821      	bhi.n	80041f6 <ADC_RegularChannelConfig+0x142>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	78bb      	ldrb	r3, [r7, #2]
 80041ba:	1fda      	subs	r2, r3, #7
 80041bc:	4613      	mov	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	221f      	movs	r2, #31
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	60bb      	str	r3, [r7, #8]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	43db      	mvns	r3, r3
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	4013      	ands	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	78f9      	ldrb	r1, [r7, #3]
 80041d6:	78bb      	ldrb	r3, [r7, #2]
 80041d8:	1fda      	subs	r2, r3, #7
 80041da:	4613      	mov	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	fa01 f303 	lsl.w	r3, r1, r3
 80041e4:	60bb      	str	r3, [r7, #8]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	631a      	str	r2, [r3, #48]	; 0x30
 80041f4:	e022      	b.n	800423c <ADC_RegularChannelConfig+0x188>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	78bb      	ldrb	r3, [r7, #2]
 80041fe:	f1a3 020d 	sub.w	r2, r3, #13
 8004202:	4613      	mov	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	221f      	movs	r2, #31
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	60bb      	str	r3, [r7, #8]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	43db      	mvns	r3, r3
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	4013      	ands	r3, r2
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	78f9      	ldrb	r1, [r7, #3]
 800421c:	78bb      	ldrb	r3, [r7, #2]
 800421e:	f1a3 020d 	sub.w	r2, r3, #13
 8004222:	4613      	mov	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	fa01 f303 	lsl.w	r3, r1, r3
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	4313      	orrs	r3, r2
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	62da      	str	r2, [r3, #44]	; 0x2c
 800423c:	bf00      	nop
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <ADC_SoftwareStartConv>:
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	609a      	str	r2, [r3, #8]
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <ADC_EOCOnEachRegularChannelCmd>:
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	460b      	mov	r3, r1
 8004272:	70fb      	strb	r3, [r7, #3]
 8004274:	78fb      	ldrb	r3, [r7, #3]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d006      	beq.n	8004288 <ADC_EOCOnEachRegularChannelCmd+0x20>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	609a      	str	r2, [r3, #8]
 8004286:	e005      	b.n	8004294 <ADC_EOCOnEachRegularChannelCmd+0x2c>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	609a      	str	r2, [r3, #8]
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <ADC_ContinuousModeCmd>:
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	70fb      	strb	r3, [r7, #3]
 80042ac:	78fb      	ldrb	r3, [r7, #3]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d006      	beq.n	80042c0 <ADC_ContinuousModeCmd+0x20>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f043 0202 	orr.w	r2, r3, #2
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	609a      	str	r2, [r3, #8]
 80042be:	e005      	b.n	80042cc <ADC_ContinuousModeCmd+0x2c>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f023 0202 	bic.w	r2, r3, #2
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	609a      	str	r2, [r3, #8]
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <ADC_DiscModeChannelCountConfig>:
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	460b      	mov	r3, r1
 80042e2:	70fb      	strb	r3, [r7, #3]
 80042e4:	2300      	movs	r3, #0
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	2300      	movs	r3, #0
 80042ea:	60bb      	str	r3, [r7, #8]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	60fb      	str	r3, [r7, #12]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	78fb      	ldrb	r3, [r7, #3]
 80042fc:	3b01      	subs	r3, #1
 80042fe:	60bb      	str	r3, [r7, #8]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	035b      	lsls	r3, r3, #13
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	605a      	str	r2, [r3, #4]
 8004310:	bf00      	nop
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <ADC_DiscModeCmd>:
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	460b      	mov	r3, r1
 8004326:	70fb      	strb	r3, [r7, #3]
 8004328:	78fb      	ldrb	r3, [r7, #3]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d006      	beq.n	800433c <ADC_DiscModeCmd+0x20>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	605a      	str	r2, [r3, #4]
 800433a:	e005      	b.n	8004348 <ADC_DiscModeCmd+0x2c>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	605a      	str	r2, [r3, #4]
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <ADC_DMACmd>:
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	460b      	mov	r3, r1
 800435e:	70fb      	strb	r3, [r7, #3]
 8004360:	78fb      	ldrb	r3, [r7, #3]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d006      	beq.n	8004374 <ADC_DMACmd+0x20>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	609a      	str	r2, [r3, #8]
 8004372:	e005      	b.n	8004380 <ADC_DMACmd+0x2c>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	609a      	str	r2, [r3, #8]
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <ADC_DMARequestAfterLastTransferCmd>:
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	70fb      	strb	r3, [r7, #3]
 8004398:	78fb      	ldrb	r3, [r7, #3]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d006      	beq.n	80043ac <ADC_DMARequestAfterLastTransferCmd+0x20>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	609a      	str	r2, [r3, #8]
 80043aa:	e005      	b.n	80043b8 <ADC_DMARequestAfterLastTransferCmd+0x2c>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	609a      	str	r2, [r3, #8]
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <DMA_DeInit>:
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f023 0201 	bic.w	r2, r3, #1
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	605a      	str	r2, [r3, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	609a      	str	r2, [r3, #8]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	60da      	str	r2, [r3, #12]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	611a      	str	r2, [r3, #16]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2221      	movs	r2, #33	; 0x21
 80043fa:	615a      	str	r2, [r3, #20]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a46      	ldr	r2, [pc, #280]	; (8004518 <DMA_DeInit+0x154>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d103      	bne.n	800440c <DMA_DeInit+0x48>
 8004404:	4b45      	ldr	r3, [pc, #276]	; (800451c <DMA_DeInit+0x158>)
 8004406:	223d      	movs	r2, #61	; 0x3d
 8004408:	609a      	str	r2, [r3, #8]
 800440a:	e07e      	b.n	800450a <DMA_DeInit+0x146>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a44      	ldr	r2, [pc, #272]	; (8004520 <DMA_DeInit+0x15c>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d104      	bne.n	800441e <DMA_DeInit+0x5a>
 8004414:	4b41      	ldr	r3, [pc, #260]	; (800451c <DMA_DeInit+0x158>)
 8004416:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800441a:	609a      	str	r2, [r3, #8]
 800441c:	e075      	b.n	800450a <DMA_DeInit+0x146>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a40      	ldr	r2, [pc, #256]	; (8004524 <DMA_DeInit+0x160>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d104      	bne.n	8004430 <DMA_DeInit+0x6c>
 8004426:	4b3d      	ldr	r3, [pc, #244]	; (800451c <DMA_DeInit+0x158>)
 8004428:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800442c:	609a      	str	r2, [r3, #8]
 800442e:	e06c      	b.n	800450a <DMA_DeInit+0x146>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a3d      	ldr	r2, [pc, #244]	; (8004528 <DMA_DeInit+0x164>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d104      	bne.n	8004442 <DMA_DeInit+0x7e>
 8004438:	4b38      	ldr	r3, [pc, #224]	; (800451c <DMA_DeInit+0x158>)
 800443a:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800443e:	609a      	str	r2, [r3, #8]
 8004440:	e063      	b.n	800450a <DMA_DeInit+0x146>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a39      	ldr	r2, [pc, #228]	; (800452c <DMA_DeInit+0x168>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d103      	bne.n	8004452 <DMA_DeInit+0x8e>
 800444a:	4b34      	ldr	r3, [pc, #208]	; (800451c <DMA_DeInit+0x158>)
 800444c:	4a38      	ldr	r2, [pc, #224]	; (8004530 <DMA_DeInit+0x16c>)
 800444e:	60da      	str	r2, [r3, #12]
 8004450:	e05b      	b.n	800450a <DMA_DeInit+0x146>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a37      	ldr	r2, [pc, #220]	; (8004534 <DMA_DeInit+0x170>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d103      	bne.n	8004462 <DMA_DeInit+0x9e>
 800445a:	4b30      	ldr	r3, [pc, #192]	; (800451c <DMA_DeInit+0x158>)
 800445c:	4a36      	ldr	r2, [pc, #216]	; (8004538 <DMA_DeInit+0x174>)
 800445e:	60da      	str	r2, [r3, #12]
 8004460:	e053      	b.n	800450a <DMA_DeInit+0x146>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a35      	ldr	r2, [pc, #212]	; (800453c <DMA_DeInit+0x178>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d103      	bne.n	8004472 <DMA_DeInit+0xae>
 800446a:	4b2c      	ldr	r3, [pc, #176]	; (800451c <DMA_DeInit+0x158>)
 800446c:	4a34      	ldr	r2, [pc, #208]	; (8004540 <DMA_DeInit+0x17c>)
 800446e:	60da      	str	r2, [r3, #12]
 8004470:	e04b      	b.n	800450a <DMA_DeInit+0x146>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a33      	ldr	r2, [pc, #204]	; (8004544 <DMA_DeInit+0x180>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d104      	bne.n	8004484 <DMA_DeInit+0xc0>
 800447a:	4b28      	ldr	r3, [pc, #160]	; (800451c <DMA_DeInit+0x158>)
 800447c:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8004480:	60da      	str	r2, [r3, #12]
 8004482:	e042      	b.n	800450a <DMA_DeInit+0x146>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a30      	ldr	r2, [pc, #192]	; (8004548 <DMA_DeInit+0x184>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d103      	bne.n	8004494 <DMA_DeInit+0xd0>
 800448c:	4b2f      	ldr	r3, [pc, #188]	; (800454c <DMA_DeInit+0x188>)
 800448e:	223d      	movs	r2, #61	; 0x3d
 8004490:	609a      	str	r2, [r3, #8]
 8004492:	e03a      	b.n	800450a <DMA_DeInit+0x146>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a2e      	ldr	r2, [pc, #184]	; (8004550 <DMA_DeInit+0x18c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d104      	bne.n	80044a6 <DMA_DeInit+0xe2>
 800449c:	4b2b      	ldr	r3, [pc, #172]	; (800454c <DMA_DeInit+0x188>)
 800449e:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80044a2:	609a      	str	r2, [r3, #8]
 80044a4:	e031      	b.n	800450a <DMA_DeInit+0x146>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a2a      	ldr	r2, [pc, #168]	; (8004554 <DMA_DeInit+0x190>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d104      	bne.n	80044b8 <DMA_DeInit+0xf4>
 80044ae:	4b27      	ldr	r3, [pc, #156]	; (800454c <DMA_DeInit+0x188>)
 80044b0:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80044b4:	609a      	str	r2, [r3, #8]
 80044b6:	e028      	b.n	800450a <DMA_DeInit+0x146>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a27      	ldr	r2, [pc, #156]	; (8004558 <DMA_DeInit+0x194>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d104      	bne.n	80044ca <DMA_DeInit+0x106>
 80044c0:	4b22      	ldr	r3, [pc, #136]	; (800454c <DMA_DeInit+0x188>)
 80044c2:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80044c6:	609a      	str	r2, [r3, #8]
 80044c8:	e01f      	b.n	800450a <DMA_DeInit+0x146>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a23      	ldr	r2, [pc, #140]	; (800455c <DMA_DeInit+0x198>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d103      	bne.n	80044da <DMA_DeInit+0x116>
 80044d2:	4b1e      	ldr	r3, [pc, #120]	; (800454c <DMA_DeInit+0x188>)
 80044d4:	4a16      	ldr	r2, [pc, #88]	; (8004530 <DMA_DeInit+0x16c>)
 80044d6:	60da      	str	r2, [r3, #12]
 80044d8:	e017      	b.n	800450a <DMA_DeInit+0x146>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a20      	ldr	r2, [pc, #128]	; (8004560 <DMA_DeInit+0x19c>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d103      	bne.n	80044ea <DMA_DeInit+0x126>
 80044e2:	4b1a      	ldr	r3, [pc, #104]	; (800454c <DMA_DeInit+0x188>)
 80044e4:	4a14      	ldr	r2, [pc, #80]	; (8004538 <DMA_DeInit+0x174>)
 80044e6:	60da      	str	r2, [r3, #12]
 80044e8:	e00f      	b.n	800450a <DMA_DeInit+0x146>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a1d      	ldr	r2, [pc, #116]	; (8004564 <DMA_DeInit+0x1a0>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d103      	bne.n	80044fa <DMA_DeInit+0x136>
 80044f2:	4b16      	ldr	r3, [pc, #88]	; (800454c <DMA_DeInit+0x188>)
 80044f4:	4a12      	ldr	r2, [pc, #72]	; (8004540 <DMA_DeInit+0x17c>)
 80044f6:	60da      	str	r2, [r3, #12]
 80044f8:	e007      	b.n	800450a <DMA_DeInit+0x146>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a1a      	ldr	r2, [pc, #104]	; (8004568 <DMA_DeInit+0x1a4>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d103      	bne.n	800450a <DMA_DeInit+0x146>
 8004502:	4b12      	ldr	r3, [pc, #72]	; (800454c <DMA_DeInit+0x188>)
 8004504:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8004508:	60da      	str	r2, [r3, #12]
 800450a:	bf00      	nop
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40026010 	.word	0x40026010
 800451c:	40026000 	.word	0x40026000
 8004520:	40026028 	.word	0x40026028
 8004524:	40026040 	.word	0x40026040
 8004528:	40026058 	.word	0x40026058
 800452c:	40026070 	.word	0x40026070
 8004530:	2000003d 	.word	0x2000003d
 8004534:	40026088 	.word	0x40026088
 8004538:	20000f40 	.word	0x20000f40
 800453c:	400260a0 	.word	0x400260a0
 8004540:	203d0000 	.word	0x203d0000
 8004544:	400260b8 	.word	0x400260b8
 8004548:	40026410 	.word	0x40026410
 800454c:	40026400 	.word	0x40026400
 8004550:	40026428 	.word	0x40026428
 8004554:	40026440 	.word	0x40026440
 8004558:	40026458 	.word	0x40026458
 800455c:	40026470 	.word	0x40026470
 8004560:	40026488 	.word	0x40026488
 8004564:	400264a0 	.word	0x400264a0
 8004568:	400264b8 	.word	0x400264b8

0800456c <DMA_Init>:
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
 8004576:	2300      	movs	r3, #0
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	4b25      	ldr	r3, [pc, #148]	; (8004618 <DMA_Init+0xac>)
 8004584:	4013      	ands	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	431a      	orrs	r2, r3
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	431a      	orrs	r2, r3
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	431a      	orrs	r2, r3
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	431a      	orrs	r2, r3
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	431a      	orrs	r2, r3
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	431a      	orrs	r2, r3
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b4:	431a      	orrs	r2, r3
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ba:	431a      	orrs	r2, r3
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c0:	4313      	orrs	r3, r2
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f023 0307 	bic.w	r3, r3, #7
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e4:	4313      	orrs	r3, r2
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	615a      	str	r2, [r3, #20]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	691a      	ldr	r2, [r3, #16]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	605a      	str	r2, [r3, #4]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	609a      	str	r2, [r3, #8]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	689a      	ldr	r2, [r3, #8]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	60da      	str	r2, [r3, #12]
 800460a:	bf00      	nop
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	f01c803f 	.word	0xf01c803f

0800461c <DMA_Cmd>:
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	460b      	mov	r3, r1
 8004626:	70fb      	strb	r3, [r7, #3]
 8004628:	78fb      	ldrb	r3, [r7, #3]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d006      	beq.n	800463c <DMA_Cmd+0x20>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f043 0201 	orr.w	r2, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	e005      	b.n	8004648 <DMA_Cmd+0x2c>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f023 0201 	bic.w	r2, r3, #1
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <USART_ReceiveData>:
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	889b      	ldrh	r3, [r3, #4]
 8004660:	b29b      	uxth	r3, r3
 8004662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004666:	b29b      	uxth	r3, r3
 8004668:	4618      	mov	r0, r3
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <USART_GetITStatus>:
 8004674:	b480      	push	{r7}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	460b      	mov	r3, r1
 800467e:	807b      	strh	r3, [r7, #2]
 8004680:	2300      	movs	r3, #0
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	2300      	movs	r3, #0
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	2300      	movs	r3, #0
 800468a:	60bb      	str	r3, [r7, #8]
 800468c:	2300      	movs	r3, #0
 800468e:	74fb      	strb	r3, [r7, #19]
 8004690:	887b      	ldrh	r3, [r7, #2]
 8004692:	b2db      	uxtb	r3, r3
 8004694:	095b      	lsrs	r3, r3, #5
 8004696:	b2db      	uxtb	r3, r3
 8004698:	60bb      	str	r3, [r7, #8]
 800469a:	887b      	ldrh	r3, [r7, #2]
 800469c:	f003 031f 	and.w	r3, r3, #31
 80046a0:	617b      	str	r3, [r7, #20]
 80046a2:	2201      	movs	r2, #1
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d107      	bne.n	80046c2 <USART_GetITStatus+0x4e>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	899b      	ldrh	r3, [r3, #12]
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	461a      	mov	r2, r3
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	4013      	ands	r3, r2
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	e011      	b.n	80046e6 <USART_GetITStatus+0x72>
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d107      	bne.n	80046d8 <USART_GetITStatus+0x64>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	8a1b      	ldrh	r3, [r3, #16]
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	461a      	mov	r2, r3
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	4013      	ands	r3, r2
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	e006      	b.n	80046e6 <USART_GetITStatus+0x72>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	8a9b      	ldrh	r3, [r3, #20]
 80046dc:	b29b      	uxth	r3, r3
 80046de:	461a      	mov	r2, r3
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	4013      	ands	r3, r2
 80046e4:	617b      	str	r3, [r7, #20]
 80046e6:	887b      	ldrh	r3, [r7, #2]
 80046e8:	0a1b      	lsrs	r3, r3, #8
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	60fb      	str	r3, [r7, #12]
 80046ee:	2201      	movs	r2, #1
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	fa02 f303 	lsl.w	r3, r2, r3
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	461a      	mov	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4013      	ands	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d005      	beq.n	8004718 <USART_GetITStatus+0xa4>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d002      	beq.n	8004718 <USART_GetITStatus+0xa4>
 8004712:	2301      	movs	r3, #1
 8004714:	74fb      	strb	r3, [r7, #19]
 8004716:	e001      	b.n	800471c <USART_GetITStatus+0xa8>
 8004718:	2300      	movs	r3, #0
 800471a:	74fb      	strb	r3, [r7, #19]
 800471c:	7cfb      	ldrb	r3, [r7, #19]
 800471e:	4618      	mov	r0, r3
 8004720:	371c      	adds	r7, #28
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <USART_ClearITPendingBit>:
 800472a:	b480      	push	{r7}
 800472c:	b085      	sub	sp, #20
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	460b      	mov	r3, r1
 8004734:	807b      	strh	r3, [r7, #2]
 8004736:	2300      	movs	r3, #0
 8004738:	81fb      	strh	r3, [r7, #14]
 800473a:	2300      	movs	r3, #0
 800473c:	81bb      	strh	r3, [r7, #12]
 800473e:	887b      	ldrh	r3, [r7, #2]
 8004740:	0a1b      	lsrs	r3, r3, #8
 8004742:	81fb      	strh	r3, [r7, #14]
 8004744:	89fb      	ldrh	r3, [r7, #14]
 8004746:	2201      	movs	r2, #1
 8004748:	fa02 f303 	lsl.w	r3, r2, r3
 800474c:	81bb      	strh	r3, [r7, #12]
 800474e:	89bb      	ldrh	r3, [r7, #12]
 8004750:	43db      	mvns	r3, r3
 8004752:	b29a      	uxth	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	801a      	strh	r2, [r3, #0]
 8004758:	bf00      	nop
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <ucg_clip_is_x_visible>:
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004770:	81fb      	strh	r3, [r7, #14]
 8004772:	89fa      	ldrh	r2, [r7, #14]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 800477a:	b29b      	uxth	r3, r3
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	b29b      	uxth	r3, r3
 8004780:	81fb      	strh	r3, [r7, #14]
 8004782:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004786:	2b00      	cmp	r3, #0
 8004788:	da01      	bge.n	800478e <ucg_clip_is_x_visible+0x2a>
 800478a:	2300      	movs	r3, #0
 800478c:	e009      	b.n	80047a2 <ucg_clip_is_x_visible+0x3e>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8004794:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004798:	429a      	cmp	r2, r3
 800479a:	db01      	blt.n	80047a0 <ucg_clip_is_x_visible+0x3c>
 800479c:	2300      	movs	r3, #0
 800479e:	e000      	b.n	80047a2 <ucg_clip_is_x_visible+0x3e>
 80047a0:	2301      	movs	r3, #1
 80047a2:	4618      	mov	r0, r3
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <ucg_clip_is_y_visible>:
 80047ae:	b480      	push	{r7}
 80047b0:	b085      	sub	sp, #20
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047ba:	81fb      	strh	r3, [r7, #14]
 80047bc:	89fa      	ldrh	r2, [r7, #14]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	81fb      	strh	r3, [r7, #14]
 80047cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	da01      	bge.n	80047d8 <ucg_clip_is_y_visible+0x2a>
 80047d4:	2300      	movs	r3, #0
 80047d6:	e009      	b.n	80047ec <ucg_clip_is_y_visible+0x3e>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 80047de:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	db01      	blt.n	80047ea <ucg_clip_is_y_visible+0x3c>
 80047e6:	2300      	movs	r3, #0
 80047e8:	e000      	b.n	80047ec <ucg_clip_is_y_visible+0x3e>
 80047ea:	2301      	movs	r3, #1
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <ucg_clip_intersection>:
 80047f8:	b480      	push	{r7}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	4611      	mov	r1, r2
 8004804:	461a      	mov	r2, r3
 8004806:	460b      	mov	r3, r1
 8004808:	80fb      	strh	r3, [r7, #6]
 800480a:	4613      	mov	r3, r2
 800480c:	80bb      	strh	r3, [r7, #4]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	82fb      	strh	r3, [r7, #22]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	881b      	ldrh	r3, [r3, #0]
 8004818:	82bb      	strh	r3, [r7, #20]
 800481a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800481e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004822:	429a      	cmp	r2, r3
 8004824:	db01      	blt.n	800482a <ucg_clip_intersection+0x32>
 8004826:	2300      	movs	r3, #0
 8004828:	e01a      	b.n	8004860 <ucg_clip_intersection+0x68>
 800482a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800482e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004832:	429a      	cmp	r2, r3
 8004834:	dc01      	bgt.n	800483a <ucg_clip_intersection+0x42>
 8004836:	2300      	movs	r3, #0
 8004838:	e012      	b.n	8004860 <ucg_clip_intersection+0x68>
 800483a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800483e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004842:	429a      	cmp	r2, r3
 8004844:	da02      	bge.n	800484c <ucg_clip_intersection+0x54>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	88fa      	ldrh	r2, [r7, #6]
 800484a:	801a      	strh	r2, [r3, #0]
 800484c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004850:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004854:	429a      	cmp	r2, r3
 8004856:	dd02      	ble.n	800485e <ucg_clip_intersection+0x66>
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	88ba      	ldrh	r2, [r7, #4]
 800485c:	801a      	strh	r2, [r3, #0]
 800485e:	2301      	movs	r3, #1
 8004860:	4618      	mov	r0, r3
 8004862:	371c      	adds	r7, #28
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <ucg_clip_is_pixel_visible>:
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7ff ff75 	bl	8004764 <ucg_clip_is_x_visible>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <ucg_clip_is_pixel_visible+0x18>
 8004880:	2300      	movs	r3, #0
 8004882:	e008      	b.n	8004896 <ucg_clip_is_pixel_visible+0x2a>
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7ff ff92 	bl	80047ae <ucg_clip_is_y_visible>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <ucg_clip_is_pixel_visible+0x28>
 8004890:	2300      	movs	r3, #0
 8004892:	e000      	b.n	8004896 <ucg_clip_is_pixel_visible+0x2a>
 8004894:	2301      	movs	r3, #1
 8004896:	4618      	mov	r0, r3
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <ucg_clip_l90fx>:
 80048a0:	b590      	push	{r4, r7, lr}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	861a      	strh	r2, [r3, #48]	; 0x30
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80048b4:	2b03      	cmp	r3, #3
 80048b6:	f200 816d 	bhi.w	8004b94 <ucg_clip_l90fx+0x2f4>
 80048ba:	a201      	add	r2, pc, #4	; (adr r2, 80048c0 <ucg_clip_l90fx+0x20>)
 80048bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c0:	080048d1 	.word	0x080048d1
 80048c4:	08004977 	.word	0x08004977
 80048c8:	08004a1d 	.word	0x08004a1d
 80048cc:	08004ad9 	.word	0x08004ad9
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f7ff ff6c 	bl	80047ae <ucg_clip_is_y_visible>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <ucg_clip_l90fx+0x40>
 80048dc:	2300      	movs	r3, #0
 80048de:	e15a      	b.n	8004b96 <ucg_clip_l90fx+0x2f6>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80048e6:	81fb      	strh	r3, [r7, #14]
 80048e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80048ec:	81bb      	strh	r3, [r7, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	4413      	add	r3, r2
 80048fe:	b29b      	uxth	r3, r3
 8004900:	b21b      	sxth	r3, r3
 8004902:	81bb      	strh	r3, [r7, #12]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	; 0x70
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 8004910:	b29a      	uxth	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8004918:	b29b      	uxth	r3, r3
 800491a:	4413      	add	r3, r2
 800491c:	b29b      	uxth	r3, r3
 800491e:	b21b      	sxth	r3, r3
 8004920:	f107 010c 	add.w	r1, r7, #12
 8004924:	f107 000e 	add.w	r0, r7, #14
 8004928:	4622      	mov	r2, r4
 800492a:	f7ff ff65 	bl	80047f8 <ucg_clip_intersection>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <ucg_clip_l90fx+0x98>
 8004934:	2300      	movs	r3, #0
 8004936:	e12e      	b.n	8004b96 <ucg_clip_l90fx+0x2f6>
 8004938:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800493c:	b29a      	uxth	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004944:	b29b      	uxth	r3, r3
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	b29b      	uxth	r3, r3
 800494a:	b21a      	sxth	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	861a      	strh	r2, [r3, #48]	; 0x30
 8004950:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	849a      	strh	r2, [r3, #36]	; 0x24
 8004958:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800495c:	b29a      	uxth	r2, r3
 800495e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004962:	b29b      	uxth	r3, r3
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	b29b      	uxth	r3, r3
 8004968:	b21b      	sxth	r3, r3
 800496a:	81bb      	strh	r3, [r7, #12]
 800496c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	859a      	strh	r2, [r3, #44]	; 0x2c
 8004974:	e10e      	b.n	8004b94 <ucg_clip_l90fx+0x2f4>
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7ff fef4 	bl	8004764 <ucg_clip_is_x_visible>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <ucg_clip_l90fx+0xe6>
 8004982:	2300      	movs	r3, #0
 8004984:	e107      	b.n	8004b96 <ucg_clip_l90fx+0x2f6>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800498c:	81fb      	strh	r3, [r7, #14]
 800498e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004992:	81bb      	strh	r3, [r7, #12]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800499a:	b29a      	uxth	r2, r3
 800499c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	4413      	add	r3, r2
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	b21b      	sxth	r3, r3
 80049a8:	81bb      	strh	r3, [r7, #12]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	; 0x72
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 80049be:	b29b      	uxth	r3, r3
 80049c0:	4413      	add	r3, r2
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	b21b      	sxth	r3, r3
 80049c6:	f107 010c 	add.w	r1, r7, #12
 80049ca:	f107 000e 	add.w	r0, r7, #14
 80049ce:	4622      	mov	r2, r4
 80049d0:	f7ff ff12 	bl	80047f8 <ucg_clip_intersection>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <ucg_clip_l90fx+0x13e>
 80049da:	2300      	movs	r3, #0
 80049dc:	e0db      	b.n	8004b96 <ucg_clip_l90fx+0x2f6>
 80049de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	b21a      	sxth	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	861a      	strh	r2, [r3, #48]	; 0x30
 80049f6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	84da      	strh	r2, [r3, #38]	; 0x26
 80049fe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	b21b      	sxth	r3, r3
 8004a10:	81bb      	strh	r3, [r7, #12]
 8004a12:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	859a      	strh	r2, [r3, #44]	; 0x2c
 8004a1a:	e0bb      	b.n	8004b94 <ucg_clip_l90fx+0x2f4>
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7ff fec6 	bl	80047ae <ucg_clip_is_y_visible>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <ucg_clip_l90fx+0x18c>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	e0b4      	b.n	8004b96 <ucg_clip_l90fx+0x2f6>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004a32:	81bb      	strh	r3, [r7, #12]
 8004a34:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	b21b      	sxth	r3, r3
 8004a40:	81bb      	strh	r3, [r7, #12]
 8004a42:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004a46:	81fb      	strh	r3, [r7, #14]
 8004a48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	b21b      	sxth	r3, r3
 8004a5c:	81fb      	strh	r3, [r7, #14]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	; 0x70
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	4413      	add	r3, r2
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	b21b      	sxth	r3, r3
 8004a7a:	f107 010c 	add.w	r1, r7, #12
 8004a7e:	f107 000e 	add.w	r0, r7, #14
 8004a82:	4622      	mov	r2, r4
 8004a84:	f7ff feb8 	bl	80047f8 <ucg_clip_intersection>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <ucg_clip_l90fx+0x1f2>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	e081      	b.n	8004b96 <ucg_clip_l90fx+0x2f6>
 8004a92:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	b21a      	sxth	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	859a      	strh	r2, [r3, #44]	; 0x2c
 8004aa8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	b21b      	sxth	r3, r3
 8004ab4:	81bb      	strh	r3, [r7, #12]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	b21a      	sxth	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	861a      	strh	r2, [r3, #48]	; 0x30
 8004ace:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	849a      	strh	r2, [r3, #36]	; 0x24
 8004ad6:	e05d      	b.n	8004b94 <ucg_clip_l90fx+0x2f4>
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f7ff fe43 	bl	8004764 <ucg_clip_is_x_visible>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <ucg_clip_l90fx+0x248>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	e056      	b.n	8004b96 <ucg_clip_l90fx+0x2f6>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004aee:	81bb      	strh	r3, [r7, #12]
 8004af0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	3301      	adds	r3, #1
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	b21b      	sxth	r3, r3
 8004afc:	81bb      	strh	r3, [r7, #12]
 8004afe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004b02:	81fb      	strh	r3, [r7, #14]
 8004b04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	b21b      	sxth	r3, r3
 8004b18:	81fb      	strh	r3, [r7, #14]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	; 0x72
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	4413      	add	r3, r2
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	b21b      	sxth	r3, r3
 8004b36:	f107 010c 	add.w	r1, r7, #12
 8004b3a:	f107 000e 	add.w	r0, r7, #14
 8004b3e:	4622      	mov	r2, r4
 8004b40:	f7ff fe5a 	bl	80047f8 <ucg_clip_intersection>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <ucg_clip_l90fx+0x2ae>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	e023      	b.n	8004b96 <ucg_clip_l90fx+0x2f6>
 8004b4e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	b21a      	sxth	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	859a      	strh	r2, [r3, #44]	; 0x2c
 8004b64:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	b21b      	sxth	r3, r3
 8004b70:	81bb      	strh	r3, [r7, #12]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	b21a      	sxth	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	861a      	strh	r2, [r3, #48]	; 0x30
 8004b8a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	84da      	strh	r2, [r3, #38]	; 0x26
 8004b92:	bf00      	nop
 8004b94:	2301      	movs	r3, #1
 8004b96:	4618      	mov	r0, r3
 8004b98:	3714      	adds	r7, #20
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd90      	pop	{r4, r7, pc}
 8004b9e:	bf00      	nop

08004ba0 <ucg_clip_l90se>:
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7ff fe79 	bl	80048a0 <ucg_clip_l90fx>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <ucg_clip_l90se+0x18>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	e019      	b.n	8004bec <ucg_clip_l90se+0x4c>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	73fb      	strb	r3, [r7, #15]
 8004bbc:	e012      	b.n	8004be4 <ucg_clip_l90se+0x44>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8004bc4:	7bfa      	ldrb	r2, [r7, #15]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	1a9b      	subs	r3, r3, r2
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	18ca      	adds	r2, r1, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	4610      	mov	r0, r2
 8004bda:	f7fd fe4f 	bl	800287c <ucg_ccs_seek>
 8004bde:	7bfb      	ldrb	r3, [r7, #15]
 8004be0:	3301      	adds	r3, #1
 8004be2:	73fb      	strb	r3, [r7, #15]
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d9e9      	bls.n	8004bbe <ucg_clip_l90se+0x1e>
 8004bea:	2301      	movs	r3, #1
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <ucg_com_PowerDown>:
 8004bf4:	b590      	push	{r4, r7, lr}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d006      	beq.n	8004c18 <ucg_com_PowerDown+0x24>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69dc      	ldr	r4, [r3, #28]
 8004c0e:	2300      	movs	r3, #0
 8004c10:	2200      	movs	r2, #0
 8004c12:	210b      	movs	r1, #11
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	47a0      	blx	r4
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8004c1e:	f023 0308 	bic.w	r3, r3, #8
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8004c2a:	bf00      	nop
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd90      	pop	{r4, r7, pc}

08004c32 <ucg_com_PowerUp>:
 8004c32:	b590      	push	{r4, r7, lr}
 8004c34:	b085      	sub	sp, #20
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	807b      	strh	r3, [r7, #2]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	803b      	strh	r3, [r7, #0]
 8004c42:	887b      	ldrh	r3, [r7, #2]
 8004c44:	813b      	strh	r3, [r7, #8]
 8004c46:	883b      	ldrh	r3, [r7, #0]
 8004c48:	817b      	strh	r3, [r7, #10]
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7ff ffd2 	bl	8004bf4 <ucg_com_PowerDown>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	69dc      	ldr	r4, [r3, #28]
 8004c5c:	f107 0308 	add.w	r3, r7, #8
 8004c60:	2200      	movs	r2, #0
 8004c62:	210a      	movs	r1, #10
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	47a0      	blx	r4
 8004c68:	4603      	mov	r3, r0
 8004c6a:	81fb      	strh	r3, [r7, #14]
 8004c6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d008      	beq.n	8004c86 <ucg_com_PowerUp+0x54>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8004c7a:	f043 0308 	orr.w	r3, r3, #8
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8004c86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd90      	pop	{r4, r7, pc}

08004c92 <ucg_com_SetLineStatus>:
 8004c92:	b590      	push	{r4, r7, lr}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	4608      	mov	r0, r1
 8004c9c:	4611      	mov	r1, r2
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	70fb      	strb	r3, [r7, #3]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	70bb      	strb	r3, [r7, #2]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	707b      	strb	r3, [r7, #1]
 8004cac:	78fb      	ldrb	r3, [r7, #3]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d131      	bne.n	8004d16 <ucg_com_SetLineStatus+0x84>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8004cb8:	78bb      	ldrb	r3, [r7, #2]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d008      	beq.n	8004cd4 <ucg_com_SetLineStatus+0x42>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8004cc8:	78bb      	ldrb	r3, [r7, #2]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	78ba      	ldrb	r2, [r7, #2]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d14b      	bne.n	8004d6c <ucg_com_SetLineStatus+0xda>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	69dc      	ldr	r4, [r3, #28]
 8004cd8:	787b      	ldrb	r3, [r7, #1]
 8004cda:	b219      	sxth	r1, r3
 8004cdc:	78fb      	ldrb	r3, [r7, #3]
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	47a0      	blx	r4
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8004cec:	b25a      	sxtb	r2, r3
 8004cee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004cf2:	43db      	mvns	r3, r3
 8004cf4:	b25b      	sxtb	r3, r3
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	b25b      	sxtb	r3, r3
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8004d08:	78bb      	ldrb	r3, [r7, #2]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	b2da      	uxtb	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8004d14:	e02a      	b.n	8004d6c <ucg_com_SetLineStatus+0xda>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8004d1c:	78bb      	ldrb	r3, [r7, #2]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d007      	beq.n	8004d36 <ucg_com_SetLineStatus+0xa4>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8004d2c:	78bb      	ldrb	r3, [r7, #2]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d11a      	bne.n	8004d6c <ucg_com_SetLineStatus+0xda>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	69dc      	ldr	r4, [r3, #28]
 8004d3a:	787b      	ldrb	r3, [r7, #1]
 8004d3c:	b219      	sxth	r1, r3
 8004d3e:	78fb      	ldrb	r3, [r7, #3]
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	2300      	movs	r3, #0
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	47a0      	blx	r4
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8004d4e:	78bb      	ldrb	r3, [r7, #2]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	b2da      	uxtb	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8004d60:	78bb      	ldrb	r3, [r7, #2]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd90      	pop	{r4, r7, pc}

08004d74 <ucg_com_SetResetLineStatus>:
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	70fb      	strb	r3, [r7, #3]
 8004d80:	78f9      	ldrb	r1, [r7, #3]
 8004d82:	230d      	movs	r3, #13
 8004d84:	2204      	movs	r2, #4
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7ff ff83 	bl	8004c92 <ucg_com_SetLineStatus>
 8004d8c:	bf00      	nop
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <ucg_com_SetCSLineStatus>:
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	70fb      	strb	r3, [r7, #3]
 8004da0:	78f9      	ldrb	r1, [r7, #3]
 8004da2:	230e      	movs	r3, #14
 8004da4:	2202      	movs	r2, #2
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7ff ff73 	bl	8004c92 <ucg_com_SetLineStatus>
 8004dac:	bf00      	nop
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <ucg_com_SetCDLineStatus>:
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	70fb      	strb	r3, [r7, #3]
 8004dc0:	78f9      	ldrb	r1, [r7, #3]
 8004dc2:	230f      	movs	r3, #15
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7ff ff63 	bl	8004c92 <ucg_com_SetLineStatus>
 8004dcc:	bf00      	nop
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <ucg_com_DelayMicroseconds>:
 8004dd4:	b590      	push	{r4, r7, lr}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	460b      	mov	r3, r1
 8004dde:	807b      	strh	r3, [r7, #2]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	69dc      	ldr	r4, [r3, #28]
 8004de4:	887a      	ldrh	r2, [r7, #2]
 8004de6:	2300      	movs	r3, #0
 8004de8:	210c      	movs	r1, #12
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	47a0      	blx	r4
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd90      	pop	{r4, r7, pc}

08004df6 <ucg_com_DelayMilliseconds>:
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b082      	sub	sp, #8
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	807b      	strh	r3, [r7, #2]
 8004e02:	e007      	b.n	8004e14 <ucg_com_DelayMilliseconds+0x1e>
 8004e04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f7ff ffe3 	bl	8004dd4 <ucg_com_DelayMicroseconds>
 8004e0e:	887b      	ldrh	r3, [r7, #2]
 8004e10:	3b01      	subs	r3, #1
 8004e12:	807b      	strh	r3, [r7, #2]
 8004e14:	887b      	ldrh	r3, [r7, #2]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1f4      	bne.n	8004e04 <ucg_com_DelayMilliseconds+0xe>
 8004e1a:	bf00      	nop
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <ucg_com_SendByte>:
 8004e22:	b590      	push	{r4, r7, lr}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	70fb      	strb	r3, [r7, #3]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69dc      	ldr	r4, [r3, #28]
 8004e32:	78fb      	ldrb	r3, [r7, #3]
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	2300      	movs	r3, #0
 8004e38:	2110      	movs	r1, #16
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	47a0      	blx	r4
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd90      	pop	{r4, r7, pc}

08004e46 <ucg_com_SendStringP>:
 8004e46:	b590      	push	{r4, r7, lr}
 8004e48:	b087      	sub	sp, #28
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	60f8      	str	r0, [r7, #12]
 8004e4e:	460b      	mov	r3, r1
 8004e50:	607a      	str	r2, [r7, #4]
 8004e52:	817b      	strh	r3, [r7, #10]
 8004e54:	e010      	b.n	8004e78 <ucg_com_SendStringP+0x32>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	75fb      	strb	r3, [r7, #23]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	69dc      	ldr	r4, [r3, #28]
 8004e60:	7dfb      	ldrb	r3, [r7, #23]
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	2300      	movs	r3, #0
 8004e66:	2110      	movs	r1, #16
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	47a0      	blx	r4
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	607b      	str	r3, [r7, #4]
 8004e72:	897b      	ldrh	r3, [r7, #10]
 8004e74:	3b01      	subs	r3, #1
 8004e76:	817b      	strh	r3, [r7, #10]
 8004e78:	897b      	ldrh	r3, [r7, #10]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1eb      	bne.n	8004e56 <ucg_com_SendStringP+0x10>
 8004e7e:	bf00      	nop
 8004e80:	371c      	adds	r7, #28
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd90      	pop	{r4, r7, pc}

08004e86 <ucg_com_SendCmdArg>:
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b084      	sub	sp, #16
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	60f8      	str	r0, [r7, #12]
 8004e8e:	60b9      	str	r1, [r7, #8]
 8004e90:	4611      	mov	r1, r2
 8004e92:	461a      	mov	r2, r3
 8004e94:	460b      	mov	r3, r1
 8004e96:	71fb      	strb	r3, [r7, #7]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	71bb      	strb	r3, [r7, #6]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004ea2:	085b      	lsrs	r3, r3, #1
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	4619      	mov	r1, r3
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f7ff ff80 	bl	8004db4 <ucg_com_SetCDLineStatus>
 8004eb4:	79fb      	ldrb	r3, [r7, #7]
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	4619      	mov	r1, r3
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f7ff ffc2 	bl	8004e46 <ucg_com_SendStringP>
 8004ec2:	79bb      	ldrb	r3, [r7, #6]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d014      	beq.n	8004ef2 <ucg_com_SendCmdArg+0x6c>
 8004ec8:	79fb      	ldrb	r3, [r7, #7]
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	4413      	add	r3, r2
 8004ece:	60bb      	str	r3, [r7, #8]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	4619      	mov	r1, r3
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f7ff ff68 	bl	8004db4 <ucg_com_SetCDLineStatus>
 8004ee4:	79bb      	ldrb	r3, [r7, #6]
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	4619      	mov	r1, r3
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f7ff ffaa 	bl	8004e46 <ucg_com_SendStringP>
 8004ef2:	bf00      	nop
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
	...

08004efc <ucg_com_SendCmdSeq>:
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	73fb      	strb	r3, [r7, #15]
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
 8004f0e:	091b      	lsrs	r3, r3, #4
 8004f10:	73bb      	strb	r3, [r7, #14]
 8004f12:	7bfb      	ldrb	r3, [r7, #15]
 8004f14:	f003 030f 	and.w	r3, r3, #15
 8004f18:	737b      	strb	r3, [r7, #13]
 8004f1a:	7bbb      	ldrb	r3, [r7, #14]
 8004f1c:	2b0f      	cmp	r3, #15
 8004f1e:	f200 8124 	bhi.w	800516a <ucg_com_SendCmdSeq+0x26e>
 8004f22:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <ucg_com_SendCmdSeq+0x2c>)
 8004f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f28:	0800516b 	.word	0x0800516b
 8004f2c:	08004f69 	.word	0x08004f69
 8004f30:	08004f69 	.word	0x08004f69
 8004f34:	08004f69 	.word	0x08004f69
 8004f38:	0800516b 	.word	0x0800516b
 8004f3c:	0800516b 	.word	0x0800516b
 8004f40:	08004f89 	.word	0x08004f89
 8004f44:	08004fbb 	.word	0x08004fbb
 8004f48:	08004fff 	.word	0x08004fff
 8004f4c:	0800502b 	.word	0x0800502b
 8004f50:	08005057 	.word	0x08005057
 8004f54:	080050b7 	.word	0x080050b7
 8004f58:	0800516b 	.word	0x0800516b
 8004f5c:	0800516b 	.word	0x0800516b
 8004f60:	0800516b 	.word	0x0800516b
 8004f64:	08005117 	.word	0x08005117
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	1c59      	adds	r1, r3, #1
 8004f6c:	7b7b      	ldrb	r3, [r7, #13]
 8004f6e:	7bba      	ldrb	r2, [r7, #14]
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f7ff ff88 	bl	8004e86 <ucg_com_SendCmdArg>
 8004f76:	7bbb      	ldrb	r3, [r7, #14]
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	7b7b      	ldrb	r3, [r7, #13]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	461a      	mov	r2, r3
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	4413      	add	r3, r2
 8004f84:	603b      	str	r3, [r7, #0]
 8004f86:	e0ef      	b.n	8005168 <ucg_com_SendCmdSeq+0x26c>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	4619      	mov	r1, r3
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7ff ff0c 	bl	8004db4 <ucg_com_SetCDLineStatus>
 8004f9c:	7b7b      	ldrb	r3, [r7, #13]
 8004f9e:	b299      	uxth	r1, r3
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7ff ff4d 	bl	8004e46 <ucg_com_SendStringP>
 8004fac:	7b7b      	ldrb	r3, [r7, #13]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	603b      	str	r3, [r7, #0]
 8004fb8:	e0d6      	b.n	8005168 <ucg_com_SendCmdSeq+0x26c>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004fc0:	085b      	lsrs	r3, r3, #1
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	bf0c      	ite	eq
 8004fcc:	2301      	moveq	r3, #1
 8004fce:	2300      	movne	r3, #0
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff feed 	bl	8004db4 <ucg_com_SetCDLineStatus>
 8004fda:	7b7b      	ldrb	r3, [r7, #13]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d007      	beq.n	8004ff0 <ucg_com_SendCmdSeq+0xf4>
 8004fe0:	7b7b      	ldrb	r3, [r7, #13]
 8004fe2:	b299      	uxth	r1, r3
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	461a      	mov	r2, r3
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7ff ff2b 	bl	8004e46 <ucg_com_SendStringP>
 8004ff0:	7b7b      	ldrb	r3, [r7, #13]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	603b      	str	r3, [r7, #0]
 8004ffc:	e0b4      	b.n	8005168 <ucg_com_SendCmdSeq+0x26c>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	3301      	adds	r3, #1
 8005002:	603b      	str	r3, [r7, #0]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	73fb      	strb	r3, [r7, #15]
 800500a:	7b7b      	ldrb	r3, [r7, #13]
 800500c:	b29b      	uxth	r3, r3
 800500e:	021b      	lsls	r3, r3, #8
 8005010:	b29a      	uxth	r2, r3
 8005012:	7bfb      	ldrb	r3, [r7, #15]
 8005014:	b29b      	uxth	r3, r3
 8005016:	4413      	add	r3, r2
 8005018:	b29b      	uxth	r3, r3
 800501a:	4619      	mov	r1, r3
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7ff feea 	bl	8004df6 <ucg_com_DelayMilliseconds>
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	3301      	adds	r3, #1
 8005026:	603b      	str	r3, [r7, #0]
 8005028:	e09e      	b.n	8005168 <ucg_com_SendCmdSeq+0x26c>
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	3301      	adds	r3, #1
 800502e:	603b      	str	r3, [r7, #0]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	73fb      	strb	r3, [r7, #15]
 8005036:	7b7b      	ldrb	r3, [r7, #13]
 8005038:	b29b      	uxth	r3, r3
 800503a:	021b      	lsls	r3, r3, #8
 800503c:	b29a      	uxth	r2, r3
 800503e:	7bfb      	ldrb	r3, [r7, #15]
 8005040:	b29b      	uxth	r3, r3
 8005042:	4413      	add	r3, r2
 8005044:	b29b      	uxth	r3, r3
 8005046:	4619      	mov	r1, r3
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7ff fec3 	bl	8004dd4 <ucg_com_DelayMicroseconds>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	3301      	adds	r3, #1
 8005052:	603b      	str	r3, [r7, #0]
 8005054:	e088      	b.n	8005168 <ucg_com_SendCmdSeq+0x26c>
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	3301      	adds	r3, #1
 800505a:	603b      	str	r3, [r7, #0]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	73fb      	strb	r3, [r7, #15]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	3301      	adds	r3, #1
 8005066:	603b      	str	r3, [r7, #0]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	733b      	strb	r3, [r7, #12]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	3301      	adds	r3, #1
 8005072:	603b      	str	r3, [r7, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	b2db      	uxtb	r3, r3
 8005080:	4619      	mov	r1, r3
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7ff fe96 	bl	8004db4 <ucg_com_SetCDLineStatus>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800508e:	461a      	mov	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8005096:	441a      	add	r2, r3
 8005098:	7b7b      	ldrb	r3, [r7, #13]
 800509a:	fa42 f303 	asr.w	r3, r2, r3
 800509e:	b2da      	uxtb	r2, r3
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
 80050a2:	4013      	ands	r3, r2
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	7b3b      	ldrb	r3, [r7, #12]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	4619      	mov	r1, r3
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7ff feb7 	bl	8004e22 <ucg_com_SendByte>
 80050b4:	e058      	b.n	8005168 <ucg_com_SendCmdSeq+0x26c>
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	3301      	adds	r3, #1
 80050ba:	603b      	str	r3, [r7, #0]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	73fb      	strb	r3, [r7, #15]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	3301      	adds	r3, #1
 80050c6:	603b      	str	r3, [r7, #0]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	733b      	strb	r3, [r7, #12]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	3301      	adds	r3, #1
 80050d2:	603b      	str	r3, [r7, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	4619      	mov	r1, r3
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7ff fe66 	bl	8004db4 <ucg_com_SetCDLineStatus>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80050ee:	461a      	mov	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80050f6:	441a      	add	r2, r3
 80050f8:	7b7b      	ldrb	r3, [r7, #13]
 80050fa:	fa42 f303 	asr.w	r3, r2, r3
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	7bfb      	ldrb	r3, [r7, #15]
 8005102:	4013      	ands	r3, r2
 8005104:	b2da      	uxtb	r2, r3
 8005106:	7b3b      	ldrb	r3, [r7, #12]
 8005108:	4313      	orrs	r3, r2
 800510a:	b2db      	uxtb	r3, r3
 800510c:	4619      	mov	r1, r3
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7ff fe87 	bl	8004e22 <ucg_com_SendByte>
 8005114:	e028      	b.n	8005168 <ucg_com_SendCmdSeq+0x26c>
 8005116:	7b7b      	ldrb	r3, [r7, #13]
 8005118:	089b      	lsrs	r3, r3, #2
 800511a:	73bb      	strb	r3, [r7, #14]
 800511c:	7b7b      	ldrb	r3, [r7, #13]
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	737b      	strb	r3, [r7, #13]
 8005124:	7bbb      	ldrb	r3, [r7, #14]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d00c      	beq.n	8005144 <ucg_com_SendCmdSeq+0x248>
 800512a:	2b03      	cmp	r3, #3
 800512c:	d013      	beq.n	8005156 <ucg_com_SendCmdSeq+0x25a>
 800512e:	2b00      	cmp	r3, #0
 8005130:	d116      	bne.n	8005160 <ucg_com_SendCmdSeq+0x264>
 8005132:	7b7b      	ldrb	r3, [r7, #13]
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	b2db      	uxtb	r3, r3
 800513a:	4619      	mov	r1, r3
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7ff fe19 	bl	8004d74 <ucg_com_SetResetLineStatus>
 8005142:	e00d      	b.n	8005160 <ucg_com_SendCmdSeq+0x264>
 8005144:	7b7b      	ldrb	r3, [r7, #13]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	b2db      	uxtb	r3, r3
 800514c:	4619      	mov	r1, r3
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7ff fe20 	bl	8004d94 <ucg_com_SetCSLineStatus>
 8005154:	e004      	b.n	8005160 <ucg_com_SendCmdSeq+0x264>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	7b7a      	ldrb	r2, [r7, #13]
 800515a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800515e:	bf00      	nop
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	3301      	adds	r3, #1
 8005164:	603b      	str	r3, [r7, #0]
 8005166:	bf00      	nop
 8005168:	e6cd      	b.n	8004f06 <ucg_com_SendCmdSeq+0xa>
 800516a:	bf00      	nop
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop

08005174 <siprintf>:
 8005174:	b40e      	push	{r1, r2, r3}
 8005176:	b500      	push	{lr}
 8005178:	b09c      	sub	sp, #112	; 0x70
 800517a:	ab1d      	add	r3, sp, #116	; 0x74
 800517c:	9002      	str	r0, [sp, #8]
 800517e:	9006      	str	r0, [sp, #24]
 8005180:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005184:	4809      	ldr	r0, [pc, #36]	; (80051ac <siprintf+0x38>)
 8005186:	9107      	str	r1, [sp, #28]
 8005188:	9104      	str	r1, [sp, #16]
 800518a:	4909      	ldr	r1, [pc, #36]	; (80051b0 <siprintf+0x3c>)
 800518c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005190:	9105      	str	r1, [sp, #20]
 8005192:	6800      	ldr	r0, [r0, #0]
 8005194:	9301      	str	r3, [sp, #4]
 8005196:	a902      	add	r1, sp, #8
 8005198:	f000 f9a0 	bl	80054dc <_svfiprintf_r>
 800519c:	9b02      	ldr	r3, [sp, #8]
 800519e:	2200      	movs	r2, #0
 80051a0:	701a      	strb	r2, [r3, #0]
 80051a2:	b01c      	add	sp, #112	; 0x70
 80051a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80051a8:	b003      	add	sp, #12
 80051aa:	4770      	bx	lr
 80051ac:	200005e4 	.word	0x200005e4
 80051b0:	ffff0208 	.word	0xffff0208

080051b4 <memset>:
 80051b4:	4402      	add	r2, r0
 80051b6:	4603      	mov	r3, r0
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d100      	bne.n	80051be <memset+0xa>
 80051bc:	4770      	bx	lr
 80051be:	f803 1b01 	strb.w	r1, [r3], #1
 80051c2:	e7f9      	b.n	80051b8 <memset+0x4>

080051c4 <__errno>:
 80051c4:	4b01      	ldr	r3, [pc, #4]	; (80051cc <__errno+0x8>)
 80051c6:	6818      	ldr	r0, [r3, #0]
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	200005e4 	.word	0x200005e4

080051d0 <__libc_init_array>:
 80051d0:	b570      	push	{r4, r5, r6, lr}
 80051d2:	4d0d      	ldr	r5, [pc, #52]	; (8005208 <__libc_init_array+0x38>)
 80051d4:	4c0d      	ldr	r4, [pc, #52]	; (800520c <__libc_init_array+0x3c>)
 80051d6:	1b64      	subs	r4, r4, r5
 80051d8:	10a4      	asrs	r4, r4, #2
 80051da:	2600      	movs	r6, #0
 80051dc:	42a6      	cmp	r6, r4
 80051de:	d109      	bne.n	80051f4 <__libc_init_array+0x24>
 80051e0:	4d0b      	ldr	r5, [pc, #44]	; (8005210 <__libc_init_array+0x40>)
 80051e2:	4c0c      	ldr	r4, [pc, #48]	; (8005214 <__libc_init_array+0x44>)
 80051e4:	f000 fc6a 	bl	8005abc <_init>
 80051e8:	1b64      	subs	r4, r4, r5
 80051ea:	10a4      	asrs	r4, r4, #2
 80051ec:	2600      	movs	r6, #0
 80051ee:	42a6      	cmp	r6, r4
 80051f0:	d105      	bne.n	80051fe <__libc_init_array+0x2e>
 80051f2:	bd70      	pop	{r4, r5, r6, pc}
 80051f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80051f8:	4798      	blx	r3
 80051fa:	3601      	adds	r6, #1
 80051fc:	e7ee      	b.n	80051dc <__libc_init_array+0xc>
 80051fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005202:	4798      	blx	r3
 8005204:	3601      	adds	r6, #1
 8005206:	e7f2      	b.n	80051ee <__libc_init_array+0x1e>
 8005208:	08006128 	.word	0x08006128
 800520c:	08006128 	.word	0x08006128
 8005210:	08006128 	.word	0x08006128
 8005214:	0800612c 	.word	0x0800612c

08005218 <__retarget_lock_acquire_recursive>:
 8005218:	4770      	bx	lr

0800521a <__retarget_lock_release_recursive>:
 800521a:	4770      	bx	lr

0800521c <memcpy>:
 800521c:	440a      	add	r2, r1
 800521e:	4291      	cmp	r1, r2
 8005220:	f100 33ff 	add.w	r3, r0, #4294967295
 8005224:	d100      	bne.n	8005228 <memcpy+0xc>
 8005226:	4770      	bx	lr
 8005228:	b510      	push	{r4, lr}
 800522a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800522e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005232:	4291      	cmp	r1, r2
 8005234:	d1f9      	bne.n	800522a <memcpy+0xe>
 8005236:	bd10      	pop	{r4, pc}

08005238 <_free_r>:
 8005238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800523a:	2900      	cmp	r1, #0
 800523c:	d044      	beq.n	80052c8 <_free_r+0x90>
 800523e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005242:	9001      	str	r0, [sp, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	f1a1 0404 	sub.w	r4, r1, #4
 800524a:	bfb8      	it	lt
 800524c:	18e4      	addlt	r4, r4, r3
 800524e:	f000 f8df 	bl	8005410 <__malloc_lock>
 8005252:	4a1e      	ldr	r2, [pc, #120]	; (80052cc <_free_r+0x94>)
 8005254:	9801      	ldr	r0, [sp, #4]
 8005256:	6813      	ldr	r3, [r2, #0]
 8005258:	b933      	cbnz	r3, 8005268 <_free_r+0x30>
 800525a:	6063      	str	r3, [r4, #4]
 800525c:	6014      	str	r4, [r2, #0]
 800525e:	b003      	add	sp, #12
 8005260:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005264:	f000 b8da 	b.w	800541c <__malloc_unlock>
 8005268:	42a3      	cmp	r3, r4
 800526a:	d908      	bls.n	800527e <_free_r+0x46>
 800526c:	6825      	ldr	r5, [r4, #0]
 800526e:	1961      	adds	r1, r4, r5
 8005270:	428b      	cmp	r3, r1
 8005272:	bf01      	itttt	eq
 8005274:	6819      	ldreq	r1, [r3, #0]
 8005276:	685b      	ldreq	r3, [r3, #4]
 8005278:	1949      	addeq	r1, r1, r5
 800527a:	6021      	streq	r1, [r4, #0]
 800527c:	e7ed      	b.n	800525a <_free_r+0x22>
 800527e:	461a      	mov	r2, r3
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	b10b      	cbz	r3, 8005288 <_free_r+0x50>
 8005284:	42a3      	cmp	r3, r4
 8005286:	d9fa      	bls.n	800527e <_free_r+0x46>
 8005288:	6811      	ldr	r1, [r2, #0]
 800528a:	1855      	adds	r5, r2, r1
 800528c:	42a5      	cmp	r5, r4
 800528e:	d10b      	bne.n	80052a8 <_free_r+0x70>
 8005290:	6824      	ldr	r4, [r4, #0]
 8005292:	4421      	add	r1, r4
 8005294:	1854      	adds	r4, r2, r1
 8005296:	42a3      	cmp	r3, r4
 8005298:	6011      	str	r1, [r2, #0]
 800529a:	d1e0      	bne.n	800525e <_free_r+0x26>
 800529c:	681c      	ldr	r4, [r3, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	6053      	str	r3, [r2, #4]
 80052a2:	440c      	add	r4, r1
 80052a4:	6014      	str	r4, [r2, #0]
 80052a6:	e7da      	b.n	800525e <_free_r+0x26>
 80052a8:	d902      	bls.n	80052b0 <_free_r+0x78>
 80052aa:	230c      	movs	r3, #12
 80052ac:	6003      	str	r3, [r0, #0]
 80052ae:	e7d6      	b.n	800525e <_free_r+0x26>
 80052b0:	6825      	ldr	r5, [r4, #0]
 80052b2:	1961      	adds	r1, r4, r5
 80052b4:	428b      	cmp	r3, r1
 80052b6:	bf04      	itt	eq
 80052b8:	6819      	ldreq	r1, [r3, #0]
 80052ba:	685b      	ldreq	r3, [r3, #4]
 80052bc:	6063      	str	r3, [r4, #4]
 80052be:	bf04      	itt	eq
 80052c0:	1949      	addeq	r1, r1, r5
 80052c2:	6021      	streq	r1, [r4, #0]
 80052c4:	6054      	str	r4, [r2, #4]
 80052c6:	e7ca      	b.n	800525e <_free_r+0x26>
 80052c8:	b003      	add	sp, #12
 80052ca:	bd30      	pop	{r4, r5, pc}
 80052cc:	20001ec0 	.word	0x20001ec0

080052d0 <sbrk_aligned>:
 80052d0:	b570      	push	{r4, r5, r6, lr}
 80052d2:	4e0e      	ldr	r6, [pc, #56]	; (800530c <sbrk_aligned+0x3c>)
 80052d4:	460c      	mov	r4, r1
 80052d6:	6831      	ldr	r1, [r6, #0]
 80052d8:	4605      	mov	r5, r0
 80052da:	b911      	cbnz	r1, 80052e2 <sbrk_aligned+0x12>
 80052dc:	f000 fba6 	bl	8005a2c <_sbrk_r>
 80052e0:	6030      	str	r0, [r6, #0]
 80052e2:	4621      	mov	r1, r4
 80052e4:	4628      	mov	r0, r5
 80052e6:	f000 fba1 	bl	8005a2c <_sbrk_r>
 80052ea:	1c43      	adds	r3, r0, #1
 80052ec:	d00a      	beq.n	8005304 <sbrk_aligned+0x34>
 80052ee:	1cc4      	adds	r4, r0, #3
 80052f0:	f024 0403 	bic.w	r4, r4, #3
 80052f4:	42a0      	cmp	r0, r4
 80052f6:	d007      	beq.n	8005308 <sbrk_aligned+0x38>
 80052f8:	1a21      	subs	r1, r4, r0
 80052fa:	4628      	mov	r0, r5
 80052fc:	f000 fb96 	bl	8005a2c <_sbrk_r>
 8005300:	3001      	adds	r0, #1
 8005302:	d101      	bne.n	8005308 <sbrk_aligned+0x38>
 8005304:	f04f 34ff 	mov.w	r4, #4294967295
 8005308:	4620      	mov	r0, r4
 800530a:	bd70      	pop	{r4, r5, r6, pc}
 800530c:	20001ec4 	.word	0x20001ec4

08005310 <_malloc_r>:
 8005310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005314:	1ccd      	adds	r5, r1, #3
 8005316:	f025 0503 	bic.w	r5, r5, #3
 800531a:	3508      	adds	r5, #8
 800531c:	2d0c      	cmp	r5, #12
 800531e:	bf38      	it	cc
 8005320:	250c      	movcc	r5, #12
 8005322:	2d00      	cmp	r5, #0
 8005324:	4607      	mov	r7, r0
 8005326:	db01      	blt.n	800532c <_malloc_r+0x1c>
 8005328:	42a9      	cmp	r1, r5
 800532a:	d905      	bls.n	8005338 <_malloc_r+0x28>
 800532c:	230c      	movs	r3, #12
 800532e:	603b      	str	r3, [r7, #0]
 8005330:	2600      	movs	r6, #0
 8005332:	4630      	mov	r0, r6
 8005334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005338:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800540c <_malloc_r+0xfc>
 800533c:	f000 f868 	bl	8005410 <__malloc_lock>
 8005340:	f8d8 3000 	ldr.w	r3, [r8]
 8005344:	461c      	mov	r4, r3
 8005346:	bb5c      	cbnz	r4, 80053a0 <_malloc_r+0x90>
 8005348:	4629      	mov	r1, r5
 800534a:	4638      	mov	r0, r7
 800534c:	f7ff ffc0 	bl	80052d0 <sbrk_aligned>
 8005350:	1c43      	adds	r3, r0, #1
 8005352:	4604      	mov	r4, r0
 8005354:	d155      	bne.n	8005402 <_malloc_r+0xf2>
 8005356:	f8d8 4000 	ldr.w	r4, [r8]
 800535a:	4626      	mov	r6, r4
 800535c:	2e00      	cmp	r6, #0
 800535e:	d145      	bne.n	80053ec <_malloc_r+0xdc>
 8005360:	2c00      	cmp	r4, #0
 8005362:	d048      	beq.n	80053f6 <_malloc_r+0xe6>
 8005364:	6823      	ldr	r3, [r4, #0]
 8005366:	4631      	mov	r1, r6
 8005368:	4638      	mov	r0, r7
 800536a:	eb04 0903 	add.w	r9, r4, r3
 800536e:	f000 fb5d 	bl	8005a2c <_sbrk_r>
 8005372:	4581      	cmp	r9, r0
 8005374:	d13f      	bne.n	80053f6 <_malloc_r+0xe6>
 8005376:	6821      	ldr	r1, [r4, #0]
 8005378:	1a6d      	subs	r5, r5, r1
 800537a:	4629      	mov	r1, r5
 800537c:	4638      	mov	r0, r7
 800537e:	f7ff ffa7 	bl	80052d0 <sbrk_aligned>
 8005382:	3001      	adds	r0, #1
 8005384:	d037      	beq.n	80053f6 <_malloc_r+0xe6>
 8005386:	6823      	ldr	r3, [r4, #0]
 8005388:	442b      	add	r3, r5
 800538a:	6023      	str	r3, [r4, #0]
 800538c:	f8d8 3000 	ldr.w	r3, [r8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d038      	beq.n	8005406 <_malloc_r+0xf6>
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	42a2      	cmp	r2, r4
 8005398:	d12b      	bne.n	80053f2 <_malloc_r+0xe2>
 800539a:	2200      	movs	r2, #0
 800539c:	605a      	str	r2, [r3, #4]
 800539e:	e00f      	b.n	80053c0 <_malloc_r+0xb0>
 80053a0:	6822      	ldr	r2, [r4, #0]
 80053a2:	1b52      	subs	r2, r2, r5
 80053a4:	d41f      	bmi.n	80053e6 <_malloc_r+0xd6>
 80053a6:	2a0b      	cmp	r2, #11
 80053a8:	d917      	bls.n	80053da <_malloc_r+0xca>
 80053aa:	1961      	adds	r1, r4, r5
 80053ac:	42a3      	cmp	r3, r4
 80053ae:	6025      	str	r5, [r4, #0]
 80053b0:	bf18      	it	ne
 80053b2:	6059      	strne	r1, [r3, #4]
 80053b4:	6863      	ldr	r3, [r4, #4]
 80053b6:	bf08      	it	eq
 80053b8:	f8c8 1000 	streq.w	r1, [r8]
 80053bc:	5162      	str	r2, [r4, r5]
 80053be:	604b      	str	r3, [r1, #4]
 80053c0:	4638      	mov	r0, r7
 80053c2:	f104 060b 	add.w	r6, r4, #11
 80053c6:	f000 f829 	bl	800541c <__malloc_unlock>
 80053ca:	f026 0607 	bic.w	r6, r6, #7
 80053ce:	1d23      	adds	r3, r4, #4
 80053d0:	1af2      	subs	r2, r6, r3
 80053d2:	d0ae      	beq.n	8005332 <_malloc_r+0x22>
 80053d4:	1b9b      	subs	r3, r3, r6
 80053d6:	50a3      	str	r3, [r4, r2]
 80053d8:	e7ab      	b.n	8005332 <_malloc_r+0x22>
 80053da:	42a3      	cmp	r3, r4
 80053dc:	6862      	ldr	r2, [r4, #4]
 80053de:	d1dd      	bne.n	800539c <_malloc_r+0x8c>
 80053e0:	f8c8 2000 	str.w	r2, [r8]
 80053e4:	e7ec      	b.n	80053c0 <_malloc_r+0xb0>
 80053e6:	4623      	mov	r3, r4
 80053e8:	6864      	ldr	r4, [r4, #4]
 80053ea:	e7ac      	b.n	8005346 <_malloc_r+0x36>
 80053ec:	4634      	mov	r4, r6
 80053ee:	6876      	ldr	r6, [r6, #4]
 80053f0:	e7b4      	b.n	800535c <_malloc_r+0x4c>
 80053f2:	4613      	mov	r3, r2
 80053f4:	e7cc      	b.n	8005390 <_malloc_r+0x80>
 80053f6:	230c      	movs	r3, #12
 80053f8:	603b      	str	r3, [r7, #0]
 80053fa:	4638      	mov	r0, r7
 80053fc:	f000 f80e 	bl	800541c <__malloc_unlock>
 8005400:	e797      	b.n	8005332 <_malloc_r+0x22>
 8005402:	6025      	str	r5, [r4, #0]
 8005404:	e7dc      	b.n	80053c0 <_malloc_r+0xb0>
 8005406:	605b      	str	r3, [r3, #4]
 8005408:	deff      	udf	#255	; 0xff
 800540a:	bf00      	nop
 800540c:	20001ec0 	.word	0x20001ec0

08005410 <__malloc_lock>:
 8005410:	4801      	ldr	r0, [pc, #4]	; (8005418 <__malloc_lock+0x8>)
 8005412:	f7ff bf01 	b.w	8005218 <__retarget_lock_acquire_recursive>
 8005416:	bf00      	nop
 8005418:	20001ebc 	.word	0x20001ebc

0800541c <__malloc_unlock>:
 800541c:	4801      	ldr	r0, [pc, #4]	; (8005424 <__malloc_unlock+0x8>)
 800541e:	f7ff befc 	b.w	800521a <__retarget_lock_release_recursive>
 8005422:	bf00      	nop
 8005424:	20001ebc 	.word	0x20001ebc

08005428 <__ssputs_r>:
 8005428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800542c:	688e      	ldr	r6, [r1, #8]
 800542e:	461f      	mov	r7, r3
 8005430:	42be      	cmp	r6, r7
 8005432:	680b      	ldr	r3, [r1, #0]
 8005434:	4682      	mov	sl, r0
 8005436:	460c      	mov	r4, r1
 8005438:	4690      	mov	r8, r2
 800543a:	d82c      	bhi.n	8005496 <__ssputs_r+0x6e>
 800543c:	898a      	ldrh	r2, [r1, #12]
 800543e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005442:	d026      	beq.n	8005492 <__ssputs_r+0x6a>
 8005444:	6965      	ldr	r5, [r4, #20]
 8005446:	6909      	ldr	r1, [r1, #16]
 8005448:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800544c:	eba3 0901 	sub.w	r9, r3, r1
 8005450:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005454:	1c7b      	adds	r3, r7, #1
 8005456:	444b      	add	r3, r9
 8005458:	106d      	asrs	r5, r5, #1
 800545a:	429d      	cmp	r5, r3
 800545c:	bf38      	it	cc
 800545e:	461d      	movcc	r5, r3
 8005460:	0553      	lsls	r3, r2, #21
 8005462:	d527      	bpl.n	80054b4 <__ssputs_r+0x8c>
 8005464:	4629      	mov	r1, r5
 8005466:	f7ff ff53 	bl	8005310 <_malloc_r>
 800546a:	4606      	mov	r6, r0
 800546c:	b360      	cbz	r0, 80054c8 <__ssputs_r+0xa0>
 800546e:	6921      	ldr	r1, [r4, #16]
 8005470:	464a      	mov	r2, r9
 8005472:	f7ff fed3 	bl	800521c <memcpy>
 8005476:	89a3      	ldrh	r3, [r4, #12]
 8005478:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800547c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005480:	81a3      	strh	r3, [r4, #12]
 8005482:	6126      	str	r6, [r4, #16]
 8005484:	6165      	str	r5, [r4, #20]
 8005486:	444e      	add	r6, r9
 8005488:	eba5 0509 	sub.w	r5, r5, r9
 800548c:	6026      	str	r6, [r4, #0]
 800548e:	60a5      	str	r5, [r4, #8]
 8005490:	463e      	mov	r6, r7
 8005492:	42be      	cmp	r6, r7
 8005494:	d900      	bls.n	8005498 <__ssputs_r+0x70>
 8005496:	463e      	mov	r6, r7
 8005498:	6820      	ldr	r0, [r4, #0]
 800549a:	4632      	mov	r2, r6
 800549c:	4641      	mov	r1, r8
 800549e:	f000 faab 	bl	80059f8 <memmove>
 80054a2:	68a3      	ldr	r3, [r4, #8]
 80054a4:	1b9b      	subs	r3, r3, r6
 80054a6:	60a3      	str	r3, [r4, #8]
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	4433      	add	r3, r6
 80054ac:	6023      	str	r3, [r4, #0]
 80054ae:	2000      	movs	r0, #0
 80054b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054b4:	462a      	mov	r2, r5
 80054b6:	f000 fac9 	bl	8005a4c <_realloc_r>
 80054ba:	4606      	mov	r6, r0
 80054bc:	2800      	cmp	r0, #0
 80054be:	d1e0      	bne.n	8005482 <__ssputs_r+0x5a>
 80054c0:	6921      	ldr	r1, [r4, #16]
 80054c2:	4650      	mov	r0, sl
 80054c4:	f7ff feb8 	bl	8005238 <_free_r>
 80054c8:	230c      	movs	r3, #12
 80054ca:	f8ca 3000 	str.w	r3, [sl]
 80054ce:	89a3      	ldrh	r3, [r4, #12]
 80054d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054d4:	81a3      	strh	r3, [r4, #12]
 80054d6:	f04f 30ff 	mov.w	r0, #4294967295
 80054da:	e7e9      	b.n	80054b0 <__ssputs_r+0x88>

080054dc <_svfiprintf_r>:
 80054dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e0:	4698      	mov	r8, r3
 80054e2:	898b      	ldrh	r3, [r1, #12]
 80054e4:	061b      	lsls	r3, r3, #24
 80054e6:	b09d      	sub	sp, #116	; 0x74
 80054e8:	4607      	mov	r7, r0
 80054ea:	460d      	mov	r5, r1
 80054ec:	4614      	mov	r4, r2
 80054ee:	d50e      	bpl.n	800550e <_svfiprintf_r+0x32>
 80054f0:	690b      	ldr	r3, [r1, #16]
 80054f2:	b963      	cbnz	r3, 800550e <_svfiprintf_r+0x32>
 80054f4:	2140      	movs	r1, #64	; 0x40
 80054f6:	f7ff ff0b 	bl	8005310 <_malloc_r>
 80054fa:	6028      	str	r0, [r5, #0]
 80054fc:	6128      	str	r0, [r5, #16]
 80054fe:	b920      	cbnz	r0, 800550a <_svfiprintf_r+0x2e>
 8005500:	230c      	movs	r3, #12
 8005502:	603b      	str	r3, [r7, #0]
 8005504:	f04f 30ff 	mov.w	r0, #4294967295
 8005508:	e0d0      	b.n	80056ac <_svfiprintf_r+0x1d0>
 800550a:	2340      	movs	r3, #64	; 0x40
 800550c:	616b      	str	r3, [r5, #20]
 800550e:	2300      	movs	r3, #0
 8005510:	9309      	str	r3, [sp, #36]	; 0x24
 8005512:	2320      	movs	r3, #32
 8005514:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005518:	f8cd 800c 	str.w	r8, [sp, #12]
 800551c:	2330      	movs	r3, #48	; 0x30
 800551e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80056c4 <_svfiprintf_r+0x1e8>
 8005522:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005526:	f04f 0901 	mov.w	r9, #1
 800552a:	4623      	mov	r3, r4
 800552c:	469a      	mov	sl, r3
 800552e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005532:	b10a      	cbz	r2, 8005538 <_svfiprintf_r+0x5c>
 8005534:	2a25      	cmp	r2, #37	; 0x25
 8005536:	d1f9      	bne.n	800552c <_svfiprintf_r+0x50>
 8005538:	ebba 0b04 	subs.w	fp, sl, r4
 800553c:	d00b      	beq.n	8005556 <_svfiprintf_r+0x7a>
 800553e:	465b      	mov	r3, fp
 8005540:	4622      	mov	r2, r4
 8005542:	4629      	mov	r1, r5
 8005544:	4638      	mov	r0, r7
 8005546:	f7ff ff6f 	bl	8005428 <__ssputs_r>
 800554a:	3001      	adds	r0, #1
 800554c:	f000 80a9 	beq.w	80056a2 <_svfiprintf_r+0x1c6>
 8005550:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005552:	445a      	add	r2, fp
 8005554:	9209      	str	r2, [sp, #36]	; 0x24
 8005556:	f89a 3000 	ldrb.w	r3, [sl]
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 80a1 	beq.w	80056a2 <_svfiprintf_r+0x1c6>
 8005560:	2300      	movs	r3, #0
 8005562:	f04f 32ff 	mov.w	r2, #4294967295
 8005566:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800556a:	f10a 0a01 	add.w	sl, sl, #1
 800556e:	9304      	str	r3, [sp, #16]
 8005570:	9307      	str	r3, [sp, #28]
 8005572:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005576:	931a      	str	r3, [sp, #104]	; 0x68
 8005578:	4654      	mov	r4, sl
 800557a:	2205      	movs	r2, #5
 800557c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005580:	4850      	ldr	r0, [pc, #320]	; (80056c4 <_svfiprintf_r+0x1e8>)
 8005582:	f7fa fe2d 	bl	80001e0 <memchr>
 8005586:	9a04      	ldr	r2, [sp, #16]
 8005588:	b9d8      	cbnz	r0, 80055c2 <_svfiprintf_r+0xe6>
 800558a:	06d0      	lsls	r0, r2, #27
 800558c:	bf44      	itt	mi
 800558e:	2320      	movmi	r3, #32
 8005590:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005594:	0711      	lsls	r1, r2, #28
 8005596:	bf44      	itt	mi
 8005598:	232b      	movmi	r3, #43	; 0x2b
 800559a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800559e:	f89a 3000 	ldrb.w	r3, [sl]
 80055a2:	2b2a      	cmp	r3, #42	; 0x2a
 80055a4:	d015      	beq.n	80055d2 <_svfiprintf_r+0xf6>
 80055a6:	9a07      	ldr	r2, [sp, #28]
 80055a8:	4654      	mov	r4, sl
 80055aa:	2000      	movs	r0, #0
 80055ac:	f04f 0c0a 	mov.w	ip, #10
 80055b0:	4621      	mov	r1, r4
 80055b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055b6:	3b30      	subs	r3, #48	; 0x30
 80055b8:	2b09      	cmp	r3, #9
 80055ba:	d94d      	bls.n	8005658 <_svfiprintf_r+0x17c>
 80055bc:	b1b0      	cbz	r0, 80055ec <_svfiprintf_r+0x110>
 80055be:	9207      	str	r2, [sp, #28]
 80055c0:	e014      	b.n	80055ec <_svfiprintf_r+0x110>
 80055c2:	eba0 0308 	sub.w	r3, r0, r8
 80055c6:	fa09 f303 	lsl.w	r3, r9, r3
 80055ca:	4313      	orrs	r3, r2
 80055cc:	9304      	str	r3, [sp, #16]
 80055ce:	46a2      	mov	sl, r4
 80055d0:	e7d2      	b.n	8005578 <_svfiprintf_r+0x9c>
 80055d2:	9b03      	ldr	r3, [sp, #12]
 80055d4:	1d19      	adds	r1, r3, #4
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	9103      	str	r1, [sp, #12]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	bfbb      	ittet	lt
 80055de:	425b      	neglt	r3, r3
 80055e0:	f042 0202 	orrlt.w	r2, r2, #2
 80055e4:	9307      	strge	r3, [sp, #28]
 80055e6:	9307      	strlt	r3, [sp, #28]
 80055e8:	bfb8      	it	lt
 80055ea:	9204      	strlt	r2, [sp, #16]
 80055ec:	7823      	ldrb	r3, [r4, #0]
 80055ee:	2b2e      	cmp	r3, #46	; 0x2e
 80055f0:	d10c      	bne.n	800560c <_svfiprintf_r+0x130>
 80055f2:	7863      	ldrb	r3, [r4, #1]
 80055f4:	2b2a      	cmp	r3, #42	; 0x2a
 80055f6:	d134      	bne.n	8005662 <_svfiprintf_r+0x186>
 80055f8:	9b03      	ldr	r3, [sp, #12]
 80055fa:	1d1a      	adds	r2, r3, #4
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	9203      	str	r2, [sp, #12]
 8005600:	2b00      	cmp	r3, #0
 8005602:	bfb8      	it	lt
 8005604:	f04f 33ff 	movlt.w	r3, #4294967295
 8005608:	3402      	adds	r4, #2
 800560a:	9305      	str	r3, [sp, #20]
 800560c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80056d4 <_svfiprintf_r+0x1f8>
 8005610:	7821      	ldrb	r1, [r4, #0]
 8005612:	2203      	movs	r2, #3
 8005614:	4650      	mov	r0, sl
 8005616:	f7fa fde3 	bl	80001e0 <memchr>
 800561a:	b138      	cbz	r0, 800562c <_svfiprintf_r+0x150>
 800561c:	9b04      	ldr	r3, [sp, #16]
 800561e:	eba0 000a 	sub.w	r0, r0, sl
 8005622:	2240      	movs	r2, #64	; 0x40
 8005624:	4082      	lsls	r2, r0
 8005626:	4313      	orrs	r3, r2
 8005628:	3401      	adds	r4, #1
 800562a:	9304      	str	r3, [sp, #16]
 800562c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005630:	4825      	ldr	r0, [pc, #148]	; (80056c8 <_svfiprintf_r+0x1ec>)
 8005632:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005636:	2206      	movs	r2, #6
 8005638:	f7fa fdd2 	bl	80001e0 <memchr>
 800563c:	2800      	cmp	r0, #0
 800563e:	d038      	beq.n	80056b2 <_svfiprintf_r+0x1d6>
 8005640:	4b22      	ldr	r3, [pc, #136]	; (80056cc <_svfiprintf_r+0x1f0>)
 8005642:	bb1b      	cbnz	r3, 800568c <_svfiprintf_r+0x1b0>
 8005644:	9b03      	ldr	r3, [sp, #12]
 8005646:	3307      	adds	r3, #7
 8005648:	f023 0307 	bic.w	r3, r3, #7
 800564c:	3308      	adds	r3, #8
 800564e:	9303      	str	r3, [sp, #12]
 8005650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005652:	4433      	add	r3, r6
 8005654:	9309      	str	r3, [sp, #36]	; 0x24
 8005656:	e768      	b.n	800552a <_svfiprintf_r+0x4e>
 8005658:	fb0c 3202 	mla	r2, ip, r2, r3
 800565c:	460c      	mov	r4, r1
 800565e:	2001      	movs	r0, #1
 8005660:	e7a6      	b.n	80055b0 <_svfiprintf_r+0xd4>
 8005662:	2300      	movs	r3, #0
 8005664:	3401      	adds	r4, #1
 8005666:	9305      	str	r3, [sp, #20]
 8005668:	4619      	mov	r1, r3
 800566a:	f04f 0c0a 	mov.w	ip, #10
 800566e:	4620      	mov	r0, r4
 8005670:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005674:	3a30      	subs	r2, #48	; 0x30
 8005676:	2a09      	cmp	r2, #9
 8005678:	d903      	bls.n	8005682 <_svfiprintf_r+0x1a6>
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0c6      	beq.n	800560c <_svfiprintf_r+0x130>
 800567e:	9105      	str	r1, [sp, #20]
 8005680:	e7c4      	b.n	800560c <_svfiprintf_r+0x130>
 8005682:	fb0c 2101 	mla	r1, ip, r1, r2
 8005686:	4604      	mov	r4, r0
 8005688:	2301      	movs	r3, #1
 800568a:	e7f0      	b.n	800566e <_svfiprintf_r+0x192>
 800568c:	ab03      	add	r3, sp, #12
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	462a      	mov	r2, r5
 8005692:	4b0f      	ldr	r3, [pc, #60]	; (80056d0 <_svfiprintf_r+0x1f4>)
 8005694:	a904      	add	r1, sp, #16
 8005696:	4638      	mov	r0, r7
 8005698:	f3af 8000 	nop.w
 800569c:	1c42      	adds	r2, r0, #1
 800569e:	4606      	mov	r6, r0
 80056a0:	d1d6      	bne.n	8005650 <_svfiprintf_r+0x174>
 80056a2:	89ab      	ldrh	r3, [r5, #12]
 80056a4:	065b      	lsls	r3, r3, #25
 80056a6:	f53f af2d 	bmi.w	8005504 <_svfiprintf_r+0x28>
 80056aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056ac:	b01d      	add	sp, #116	; 0x74
 80056ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056b2:	ab03      	add	r3, sp, #12
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	462a      	mov	r2, r5
 80056b8:	4b05      	ldr	r3, [pc, #20]	; (80056d0 <_svfiprintf_r+0x1f4>)
 80056ba:	a904      	add	r1, sp, #16
 80056bc:	4638      	mov	r0, r7
 80056be:	f000 f879 	bl	80057b4 <_printf_i>
 80056c2:	e7eb      	b.n	800569c <_svfiprintf_r+0x1c0>
 80056c4:	080060f5 	.word	0x080060f5
 80056c8:	080060ff 	.word	0x080060ff
 80056cc:	00000000 	.word	0x00000000
 80056d0:	08005429 	.word	0x08005429
 80056d4:	080060fb 	.word	0x080060fb

080056d8 <_printf_common>:
 80056d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056dc:	4616      	mov	r6, r2
 80056de:	4699      	mov	r9, r3
 80056e0:	688a      	ldr	r2, [r1, #8]
 80056e2:	690b      	ldr	r3, [r1, #16]
 80056e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056e8:	4293      	cmp	r3, r2
 80056ea:	bfb8      	it	lt
 80056ec:	4613      	movlt	r3, r2
 80056ee:	6033      	str	r3, [r6, #0]
 80056f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056f4:	4607      	mov	r7, r0
 80056f6:	460c      	mov	r4, r1
 80056f8:	b10a      	cbz	r2, 80056fe <_printf_common+0x26>
 80056fa:	3301      	adds	r3, #1
 80056fc:	6033      	str	r3, [r6, #0]
 80056fe:	6823      	ldr	r3, [r4, #0]
 8005700:	0699      	lsls	r1, r3, #26
 8005702:	bf42      	ittt	mi
 8005704:	6833      	ldrmi	r3, [r6, #0]
 8005706:	3302      	addmi	r3, #2
 8005708:	6033      	strmi	r3, [r6, #0]
 800570a:	6825      	ldr	r5, [r4, #0]
 800570c:	f015 0506 	ands.w	r5, r5, #6
 8005710:	d106      	bne.n	8005720 <_printf_common+0x48>
 8005712:	f104 0a19 	add.w	sl, r4, #25
 8005716:	68e3      	ldr	r3, [r4, #12]
 8005718:	6832      	ldr	r2, [r6, #0]
 800571a:	1a9b      	subs	r3, r3, r2
 800571c:	42ab      	cmp	r3, r5
 800571e:	dc26      	bgt.n	800576e <_printf_common+0x96>
 8005720:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005724:	1e13      	subs	r3, r2, #0
 8005726:	6822      	ldr	r2, [r4, #0]
 8005728:	bf18      	it	ne
 800572a:	2301      	movne	r3, #1
 800572c:	0692      	lsls	r2, r2, #26
 800572e:	d42b      	bmi.n	8005788 <_printf_common+0xb0>
 8005730:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005734:	4649      	mov	r1, r9
 8005736:	4638      	mov	r0, r7
 8005738:	47c0      	blx	r8
 800573a:	3001      	adds	r0, #1
 800573c:	d01e      	beq.n	800577c <_printf_common+0xa4>
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	6922      	ldr	r2, [r4, #16]
 8005742:	f003 0306 	and.w	r3, r3, #6
 8005746:	2b04      	cmp	r3, #4
 8005748:	bf02      	ittt	eq
 800574a:	68e5      	ldreq	r5, [r4, #12]
 800574c:	6833      	ldreq	r3, [r6, #0]
 800574e:	1aed      	subeq	r5, r5, r3
 8005750:	68a3      	ldr	r3, [r4, #8]
 8005752:	bf0c      	ite	eq
 8005754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005758:	2500      	movne	r5, #0
 800575a:	4293      	cmp	r3, r2
 800575c:	bfc4      	itt	gt
 800575e:	1a9b      	subgt	r3, r3, r2
 8005760:	18ed      	addgt	r5, r5, r3
 8005762:	2600      	movs	r6, #0
 8005764:	341a      	adds	r4, #26
 8005766:	42b5      	cmp	r5, r6
 8005768:	d11a      	bne.n	80057a0 <_printf_common+0xc8>
 800576a:	2000      	movs	r0, #0
 800576c:	e008      	b.n	8005780 <_printf_common+0xa8>
 800576e:	2301      	movs	r3, #1
 8005770:	4652      	mov	r2, sl
 8005772:	4649      	mov	r1, r9
 8005774:	4638      	mov	r0, r7
 8005776:	47c0      	blx	r8
 8005778:	3001      	adds	r0, #1
 800577a:	d103      	bne.n	8005784 <_printf_common+0xac>
 800577c:	f04f 30ff 	mov.w	r0, #4294967295
 8005780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005784:	3501      	adds	r5, #1
 8005786:	e7c6      	b.n	8005716 <_printf_common+0x3e>
 8005788:	18e1      	adds	r1, r4, r3
 800578a:	1c5a      	adds	r2, r3, #1
 800578c:	2030      	movs	r0, #48	; 0x30
 800578e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005792:	4422      	add	r2, r4
 8005794:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005798:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800579c:	3302      	adds	r3, #2
 800579e:	e7c7      	b.n	8005730 <_printf_common+0x58>
 80057a0:	2301      	movs	r3, #1
 80057a2:	4622      	mov	r2, r4
 80057a4:	4649      	mov	r1, r9
 80057a6:	4638      	mov	r0, r7
 80057a8:	47c0      	blx	r8
 80057aa:	3001      	adds	r0, #1
 80057ac:	d0e6      	beq.n	800577c <_printf_common+0xa4>
 80057ae:	3601      	adds	r6, #1
 80057b0:	e7d9      	b.n	8005766 <_printf_common+0x8e>
	...

080057b4 <_printf_i>:
 80057b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057b8:	7e0f      	ldrb	r7, [r1, #24]
 80057ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057bc:	2f78      	cmp	r7, #120	; 0x78
 80057be:	4691      	mov	r9, r2
 80057c0:	4680      	mov	r8, r0
 80057c2:	460c      	mov	r4, r1
 80057c4:	469a      	mov	sl, r3
 80057c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057ca:	d807      	bhi.n	80057dc <_printf_i+0x28>
 80057cc:	2f62      	cmp	r7, #98	; 0x62
 80057ce:	d80a      	bhi.n	80057e6 <_printf_i+0x32>
 80057d0:	2f00      	cmp	r7, #0
 80057d2:	f000 80d4 	beq.w	800597e <_printf_i+0x1ca>
 80057d6:	2f58      	cmp	r7, #88	; 0x58
 80057d8:	f000 80c0 	beq.w	800595c <_printf_i+0x1a8>
 80057dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057e4:	e03a      	b.n	800585c <_printf_i+0xa8>
 80057e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057ea:	2b15      	cmp	r3, #21
 80057ec:	d8f6      	bhi.n	80057dc <_printf_i+0x28>
 80057ee:	a101      	add	r1, pc, #4	; (adr r1, 80057f4 <_printf_i+0x40>)
 80057f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057f4:	0800584d 	.word	0x0800584d
 80057f8:	08005861 	.word	0x08005861
 80057fc:	080057dd 	.word	0x080057dd
 8005800:	080057dd 	.word	0x080057dd
 8005804:	080057dd 	.word	0x080057dd
 8005808:	080057dd 	.word	0x080057dd
 800580c:	08005861 	.word	0x08005861
 8005810:	080057dd 	.word	0x080057dd
 8005814:	080057dd 	.word	0x080057dd
 8005818:	080057dd 	.word	0x080057dd
 800581c:	080057dd 	.word	0x080057dd
 8005820:	08005965 	.word	0x08005965
 8005824:	0800588d 	.word	0x0800588d
 8005828:	0800591f 	.word	0x0800591f
 800582c:	080057dd 	.word	0x080057dd
 8005830:	080057dd 	.word	0x080057dd
 8005834:	08005987 	.word	0x08005987
 8005838:	080057dd 	.word	0x080057dd
 800583c:	0800588d 	.word	0x0800588d
 8005840:	080057dd 	.word	0x080057dd
 8005844:	080057dd 	.word	0x080057dd
 8005848:	08005927 	.word	0x08005927
 800584c:	682b      	ldr	r3, [r5, #0]
 800584e:	1d1a      	adds	r2, r3, #4
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	602a      	str	r2, [r5, #0]
 8005854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005858:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800585c:	2301      	movs	r3, #1
 800585e:	e09f      	b.n	80059a0 <_printf_i+0x1ec>
 8005860:	6820      	ldr	r0, [r4, #0]
 8005862:	682b      	ldr	r3, [r5, #0]
 8005864:	0607      	lsls	r7, r0, #24
 8005866:	f103 0104 	add.w	r1, r3, #4
 800586a:	6029      	str	r1, [r5, #0]
 800586c:	d501      	bpl.n	8005872 <_printf_i+0xbe>
 800586e:	681e      	ldr	r6, [r3, #0]
 8005870:	e003      	b.n	800587a <_printf_i+0xc6>
 8005872:	0646      	lsls	r6, r0, #25
 8005874:	d5fb      	bpl.n	800586e <_printf_i+0xba>
 8005876:	f9b3 6000 	ldrsh.w	r6, [r3]
 800587a:	2e00      	cmp	r6, #0
 800587c:	da03      	bge.n	8005886 <_printf_i+0xd2>
 800587e:	232d      	movs	r3, #45	; 0x2d
 8005880:	4276      	negs	r6, r6
 8005882:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005886:	485a      	ldr	r0, [pc, #360]	; (80059f0 <_printf_i+0x23c>)
 8005888:	230a      	movs	r3, #10
 800588a:	e012      	b.n	80058b2 <_printf_i+0xfe>
 800588c:	682b      	ldr	r3, [r5, #0]
 800588e:	6820      	ldr	r0, [r4, #0]
 8005890:	1d19      	adds	r1, r3, #4
 8005892:	6029      	str	r1, [r5, #0]
 8005894:	0605      	lsls	r5, r0, #24
 8005896:	d501      	bpl.n	800589c <_printf_i+0xe8>
 8005898:	681e      	ldr	r6, [r3, #0]
 800589a:	e002      	b.n	80058a2 <_printf_i+0xee>
 800589c:	0641      	lsls	r1, r0, #25
 800589e:	d5fb      	bpl.n	8005898 <_printf_i+0xe4>
 80058a0:	881e      	ldrh	r6, [r3, #0]
 80058a2:	4853      	ldr	r0, [pc, #332]	; (80059f0 <_printf_i+0x23c>)
 80058a4:	2f6f      	cmp	r7, #111	; 0x6f
 80058a6:	bf0c      	ite	eq
 80058a8:	2308      	moveq	r3, #8
 80058aa:	230a      	movne	r3, #10
 80058ac:	2100      	movs	r1, #0
 80058ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058b2:	6865      	ldr	r5, [r4, #4]
 80058b4:	60a5      	str	r5, [r4, #8]
 80058b6:	2d00      	cmp	r5, #0
 80058b8:	bfa2      	ittt	ge
 80058ba:	6821      	ldrge	r1, [r4, #0]
 80058bc:	f021 0104 	bicge.w	r1, r1, #4
 80058c0:	6021      	strge	r1, [r4, #0]
 80058c2:	b90e      	cbnz	r6, 80058c8 <_printf_i+0x114>
 80058c4:	2d00      	cmp	r5, #0
 80058c6:	d04b      	beq.n	8005960 <_printf_i+0x1ac>
 80058c8:	4615      	mov	r5, r2
 80058ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80058ce:	fb03 6711 	mls	r7, r3, r1, r6
 80058d2:	5dc7      	ldrb	r7, [r0, r7]
 80058d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058d8:	4637      	mov	r7, r6
 80058da:	42bb      	cmp	r3, r7
 80058dc:	460e      	mov	r6, r1
 80058de:	d9f4      	bls.n	80058ca <_printf_i+0x116>
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	d10b      	bne.n	80058fc <_printf_i+0x148>
 80058e4:	6823      	ldr	r3, [r4, #0]
 80058e6:	07de      	lsls	r6, r3, #31
 80058e8:	d508      	bpl.n	80058fc <_printf_i+0x148>
 80058ea:	6923      	ldr	r3, [r4, #16]
 80058ec:	6861      	ldr	r1, [r4, #4]
 80058ee:	4299      	cmp	r1, r3
 80058f0:	bfde      	ittt	le
 80058f2:	2330      	movle	r3, #48	; 0x30
 80058f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058fc:	1b52      	subs	r2, r2, r5
 80058fe:	6122      	str	r2, [r4, #16]
 8005900:	f8cd a000 	str.w	sl, [sp]
 8005904:	464b      	mov	r3, r9
 8005906:	aa03      	add	r2, sp, #12
 8005908:	4621      	mov	r1, r4
 800590a:	4640      	mov	r0, r8
 800590c:	f7ff fee4 	bl	80056d8 <_printf_common>
 8005910:	3001      	adds	r0, #1
 8005912:	d14a      	bne.n	80059aa <_printf_i+0x1f6>
 8005914:	f04f 30ff 	mov.w	r0, #4294967295
 8005918:	b004      	add	sp, #16
 800591a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800591e:	6823      	ldr	r3, [r4, #0]
 8005920:	f043 0320 	orr.w	r3, r3, #32
 8005924:	6023      	str	r3, [r4, #0]
 8005926:	4833      	ldr	r0, [pc, #204]	; (80059f4 <_printf_i+0x240>)
 8005928:	2778      	movs	r7, #120	; 0x78
 800592a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800592e:	6823      	ldr	r3, [r4, #0]
 8005930:	6829      	ldr	r1, [r5, #0]
 8005932:	061f      	lsls	r7, r3, #24
 8005934:	f851 6b04 	ldr.w	r6, [r1], #4
 8005938:	d402      	bmi.n	8005940 <_printf_i+0x18c>
 800593a:	065f      	lsls	r7, r3, #25
 800593c:	bf48      	it	mi
 800593e:	b2b6      	uxthmi	r6, r6
 8005940:	07df      	lsls	r7, r3, #31
 8005942:	bf48      	it	mi
 8005944:	f043 0320 	orrmi.w	r3, r3, #32
 8005948:	6029      	str	r1, [r5, #0]
 800594a:	bf48      	it	mi
 800594c:	6023      	strmi	r3, [r4, #0]
 800594e:	b91e      	cbnz	r6, 8005958 <_printf_i+0x1a4>
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	f023 0320 	bic.w	r3, r3, #32
 8005956:	6023      	str	r3, [r4, #0]
 8005958:	2310      	movs	r3, #16
 800595a:	e7a7      	b.n	80058ac <_printf_i+0xf8>
 800595c:	4824      	ldr	r0, [pc, #144]	; (80059f0 <_printf_i+0x23c>)
 800595e:	e7e4      	b.n	800592a <_printf_i+0x176>
 8005960:	4615      	mov	r5, r2
 8005962:	e7bd      	b.n	80058e0 <_printf_i+0x12c>
 8005964:	682b      	ldr	r3, [r5, #0]
 8005966:	6826      	ldr	r6, [r4, #0]
 8005968:	6961      	ldr	r1, [r4, #20]
 800596a:	1d18      	adds	r0, r3, #4
 800596c:	6028      	str	r0, [r5, #0]
 800596e:	0635      	lsls	r5, r6, #24
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	d501      	bpl.n	8005978 <_printf_i+0x1c4>
 8005974:	6019      	str	r1, [r3, #0]
 8005976:	e002      	b.n	800597e <_printf_i+0x1ca>
 8005978:	0670      	lsls	r0, r6, #25
 800597a:	d5fb      	bpl.n	8005974 <_printf_i+0x1c0>
 800597c:	8019      	strh	r1, [r3, #0]
 800597e:	2300      	movs	r3, #0
 8005980:	6123      	str	r3, [r4, #16]
 8005982:	4615      	mov	r5, r2
 8005984:	e7bc      	b.n	8005900 <_printf_i+0x14c>
 8005986:	682b      	ldr	r3, [r5, #0]
 8005988:	1d1a      	adds	r2, r3, #4
 800598a:	602a      	str	r2, [r5, #0]
 800598c:	681d      	ldr	r5, [r3, #0]
 800598e:	6862      	ldr	r2, [r4, #4]
 8005990:	2100      	movs	r1, #0
 8005992:	4628      	mov	r0, r5
 8005994:	f7fa fc24 	bl	80001e0 <memchr>
 8005998:	b108      	cbz	r0, 800599e <_printf_i+0x1ea>
 800599a:	1b40      	subs	r0, r0, r5
 800599c:	6060      	str	r0, [r4, #4]
 800599e:	6863      	ldr	r3, [r4, #4]
 80059a0:	6123      	str	r3, [r4, #16]
 80059a2:	2300      	movs	r3, #0
 80059a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059a8:	e7aa      	b.n	8005900 <_printf_i+0x14c>
 80059aa:	6923      	ldr	r3, [r4, #16]
 80059ac:	462a      	mov	r2, r5
 80059ae:	4649      	mov	r1, r9
 80059b0:	4640      	mov	r0, r8
 80059b2:	47d0      	blx	sl
 80059b4:	3001      	adds	r0, #1
 80059b6:	d0ad      	beq.n	8005914 <_printf_i+0x160>
 80059b8:	6823      	ldr	r3, [r4, #0]
 80059ba:	079b      	lsls	r3, r3, #30
 80059bc:	d413      	bmi.n	80059e6 <_printf_i+0x232>
 80059be:	68e0      	ldr	r0, [r4, #12]
 80059c0:	9b03      	ldr	r3, [sp, #12]
 80059c2:	4298      	cmp	r0, r3
 80059c4:	bfb8      	it	lt
 80059c6:	4618      	movlt	r0, r3
 80059c8:	e7a6      	b.n	8005918 <_printf_i+0x164>
 80059ca:	2301      	movs	r3, #1
 80059cc:	4632      	mov	r2, r6
 80059ce:	4649      	mov	r1, r9
 80059d0:	4640      	mov	r0, r8
 80059d2:	47d0      	blx	sl
 80059d4:	3001      	adds	r0, #1
 80059d6:	d09d      	beq.n	8005914 <_printf_i+0x160>
 80059d8:	3501      	adds	r5, #1
 80059da:	68e3      	ldr	r3, [r4, #12]
 80059dc:	9903      	ldr	r1, [sp, #12]
 80059de:	1a5b      	subs	r3, r3, r1
 80059e0:	42ab      	cmp	r3, r5
 80059e2:	dcf2      	bgt.n	80059ca <_printf_i+0x216>
 80059e4:	e7eb      	b.n	80059be <_printf_i+0x20a>
 80059e6:	2500      	movs	r5, #0
 80059e8:	f104 0619 	add.w	r6, r4, #25
 80059ec:	e7f5      	b.n	80059da <_printf_i+0x226>
 80059ee:	bf00      	nop
 80059f0:	08006106 	.word	0x08006106
 80059f4:	08006117 	.word	0x08006117

080059f8 <memmove>:
 80059f8:	4288      	cmp	r0, r1
 80059fa:	b510      	push	{r4, lr}
 80059fc:	eb01 0402 	add.w	r4, r1, r2
 8005a00:	d902      	bls.n	8005a08 <memmove+0x10>
 8005a02:	4284      	cmp	r4, r0
 8005a04:	4623      	mov	r3, r4
 8005a06:	d807      	bhi.n	8005a18 <memmove+0x20>
 8005a08:	1e43      	subs	r3, r0, #1
 8005a0a:	42a1      	cmp	r1, r4
 8005a0c:	d008      	beq.n	8005a20 <memmove+0x28>
 8005a0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a16:	e7f8      	b.n	8005a0a <memmove+0x12>
 8005a18:	4402      	add	r2, r0
 8005a1a:	4601      	mov	r1, r0
 8005a1c:	428a      	cmp	r2, r1
 8005a1e:	d100      	bne.n	8005a22 <memmove+0x2a>
 8005a20:	bd10      	pop	{r4, pc}
 8005a22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a2a:	e7f7      	b.n	8005a1c <memmove+0x24>

08005a2c <_sbrk_r>:
 8005a2c:	b538      	push	{r3, r4, r5, lr}
 8005a2e:	4d06      	ldr	r5, [pc, #24]	; (8005a48 <_sbrk_r+0x1c>)
 8005a30:	2300      	movs	r3, #0
 8005a32:	4604      	mov	r4, r0
 8005a34:	4608      	mov	r0, r1
 8005a36:	602b      	str	r3, [r5, #0]
 8005a38:	f7fb fd0e 	bl	8001458 <_sbrk>
 8005a3c:	1c43      	adds	r3, r0, #1
 8005a3e:	d102      	bne.n	8005a46 <_sbrk_r+0x1a>
 8005a40:	682b      	ldr	r3, [r5, #0]
 8005a42:	b103      	cbz	r3, 8005a46 <_sbrk_r+0x1a>
 8005a44:	6023      	str	r3, [r4, #0]
 8005a46:	bd38      	pop	{r3, r4, r5, pc}
 8005a48:	20001eb8 	.word	0x20001eb8

08005a4c <_realloc_r>:
 8005a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a50:	4680      	mov	r8, r0
 8005a52:	4614      	mov	r4, r2
 8005a54:	460e      	mov	r6, r1
 8005a56:	b921      	cbnz	r1, 8005a62 <_realloc_r+0x16>
 8005a58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a5c:	4611      	mov	r1, r2
 8005a5e:	f7ff bc57 	b.w	8005310 <_malloc_r>
 8005a62:	b92a      	cbnz	r2, 8005a70 <_realloc_r+0x24>
 8005a64:	f7ff fbe8 	bl	8005238 <_free_r>
 8005a68:	4625      	mov	r5, r4
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a70:	f000 f81b 	bl	8005aaa <_malloc_usable_size_r>
 8005a74:	4284      	cmp	r4, r0
 8005a76:	4607      	mov	r7, r0
 8005a78:	d802      	bhi.n	8005a80 <_realloc_r+0x34>
 8005a7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a7e:	d812      	bhi.n	8005aa6 <_realloc_r+0x5a>
 8005a80:	4621      	mov	r1, r4
 8005a82:	4640      	mov	r0, r8
 8005a84:	f7ff fc44 	bl	8005310 <_malloc_r>
 8005a88:	4605      	mov	r5, r0
 8005a8a:	2800      	cmp	r0, #0
 8005a8c:	d0ed      	beq.n	8005a6a <_realloc_r+0x1e>
 8005a8e:	42bc      	cmp	r4, r7
 8005a90:	4622      	mov	r2, r4
 8005a92:	4631      	mov	r1, r6
 8005a94:	bf28      	it	cs
 8005a96:	463a      	movcs	r2, r7
 8005a98:	f7ff fbc0 	bl	800521c <memcpy>
 8005a9c:	4631      	mov	r1, r6
 8005a9e:	4640      	mov	r0, r8
 8005aa0:	f7ff fbca 	bl	8005238 <_free_r>
 8005aa4:	e7e1      	b.n	8005a6a <_realloc_r+0x1e>
 8005aa6:	4635      	mov	r5, r6
 8005aa8:	e7df      	b.n	8005a6a <_realloc_r+0x1e>

08005aaa <_malloc_usable_size_r>:
 8005aaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005aae:	1f18      	subs	r0, r3, #4
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	bfbc      	itt	lt
 8005ab4:	580b      	ldrlt	r3, [r1, r0]
 8005ab6:	18c0      	addlt	r0, r0, r3
 8005ab8:	4770      	bx	lr
	...

08005abc <_init>:
 8005abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005abe:	bf00      	nop
 8005ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ac2:	bc08      	pop	{r3}
 8005ac4:	469e      	mov	lr, r3
 8005ac6:	4770      	bx	lr

08005ac8 <_fini>:
 8005ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aca:	bf00      	nop
 8005acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ace:	bc08      	pop	{r3}
 8005ad0:	469e      	mov	lr, r3
 8005ad2:	4770      	bx	lr
